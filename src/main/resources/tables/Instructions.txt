INSTRUCTION: <invalid> | <invalid> | INTEL8086
  mnemonic: INVALID
  flags: no-instr cflow=ex asm-ig
  fast: mnemonic=(bad)
  gas: mnemonic=(bad)
  intel: mnemonic=(bad)
  masm: mnemonic=(bad)
  nasm: mnemonic=(bad)
-----
INSTRUCTION: <db> | <db> | INTEL8086
  mnemonic: db
  code-mnemonic: DeclareByte
  flags: no-instr cflow=ex asm-ig
  gas: mnemonic=.byte decl
  intel: decl
  masm: decl
  nasm: decl
-----
INSTRUCTION: <dw> | <dw> | INTEL8086
  mnemonic: dw
  code-mnemonic: DeclareWord
  flags: no-instr cflow=ex asm-ig
  gas: mnemonic=.word decl
  intel: decl
  masm: decl
  nasm: decl
-----
INSTRUCTION: <dd> | <dd> | INTEL8086
  mnemonic: dd
  code-mnemonic: DeclareDword
  flags: no-instr cflow=ex asm-ig
  gas: mnemonic=.int decl
  intel: decl
  masm: decl
  nasm: decl
-----
INSTRUCTION: <dq> | <dq> | INTEL8086
  mnemonic: dq
  code-mnemonic: DeclareQword
  flags: no-instr cflow=ex asm-ig
  gas: mnemonic=.quad decl
  intel: decl
  masm: decl
  nasm: decl
-----
INSTRUCTION: <zero_bytes> | ZERO_BYTES | INTEL8086
  flags: no-instr
-----
INSTRUCTION: 00 /r | ADD r/m8, r8 | INTEL8086
  ops: rw=rm r=reg | UInt8
  rflags: w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=b
-----
INSTRUCTION: o16 01 /r | ADD r/m16, r16 | INTEL8086
  ops: rw=rm r=reg | UInt16
  rflags: w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=w
-----
INSTRUCTION: o32 01 /r | ADD r/m32, r32 | INTEL386
  ops: rw=rm r=reg | UInt32
  rflags: w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=l
-----
INSTRUCTION: o64 01 /r | ADD r/m64, r64 | X64
  ops: rw=rm r=reg | UInt64
  rflags: w=oszacp
  flags: 64 lock xacquire xrelease
  gas: suffix=q
-----
INSTRUCTION: 02 /r | ADD r8, r/m8 | INTEL8086
  ops: rw=reg r=rm | UInt8
  rflags: w=oszacp
  gas: suffix=b
-----
INSTRUCTION: o16 03 /r | ADD r16, r/m16 | INTEL8086
  ops: rw=reg r=rm | UInt16
  rflags: w=oszacp
  gas: suffix=w
-----
INSTRUCTION: o32 03 /r | ADD r32, r/m32 | INTEL386
  ops: rw=reg r=rm | UInt32
  rflags: w=oszacp
  gas: suffix=l
-----
INSTRUCTION: o64 03 /r | ADD r64, r/m64 | X64
  ops: rw=reg r=rm | UInt64
  rflags: w=oszacp
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: 04 ib | ADD AL, imm8 | INTEL8086
  ops: rw=r:al r=imm
  rflags: w=oszacp
  gas: suffix=b
-----
INSTRUCTION: o16 05 iw | ADD AX, imm16 | INTEL8086
  ops: rw=r:ax r=imm
  rflags: w=oszacp
  gas: suffix=w
-----
INSTRUCTION: o32 05 id | ADD EAX, imm32 | INTEL386
  ops: rw=r:eax r=imm
  rflags: w=oszacp
  gas: suffix=l
-----
INSTRUCTION: o64 05 id | ADD RAX, imm32 | X64
  ops: rw=r:rax r=imm;64
  rflags: w=oszacp
  flags: 64
  gas: suffix=q
  nasm: sx
-----
INSTRUCTION: o16 06 | PUSH ES | INTEL8086
  ops: r=r:es
  implied: push=1x2
  code-mnemonic: pushw
  flags: 16 32 sp=push;2
  gas: suffix=w osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o32 06 | PUSH ES | INTEL386
  ops: r=r:es
  implied: push=1x4
  code-mnemonic: pushd
  flags: 16 32 sp=push;4
  gas: suffix=l osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o16 07 | POP ES | INTEL8086
  ops: w=r:es
  implied: pop=1x2
  code-mnemonic: popw
  flags: 16 32 sp=pop;2 no-in-sgx tsx-impl-abort
  gas: suffix=w osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o32 07 | POP ES | INTEL386
  ops: w=r:es
  implied: pop=1x4
  code-mnemonic: popd
  flags: 16 32 sp=pop;4 no-in-sgx tsx-impl-abort
  gas: suffix=l osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: 08 /r | OR r/m8, r8 | INTEL8086
  ops: rw=rm r=reg | UInt8
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  gas: suffix=b
-----
INSTRUCTION: o16 09 /r | OR r/m16, r16 | INTEL8086
  ops: rw=rm r=reg | UInt16
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  gas: suffix=w
-----
INSTRUCTION: o32 09 /r | OR r/m32, r32 | INTEL386
  ops: rw=rm r=reg | UInt32
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  gas: suffix=l
-----
INSTRUCTION: o64 09 /r | OR r/m64, r64 | X64
  ops: rw=rm r=reg | UInt64
  rflags: u=a w=szp 0=oc
  flags: 64 lock xacquire xrelease
  gas: suffix=q
-----
INSTRUCTION: 0A /r | OR r8, r/m8 | INTEL8086
  ops: rw=reg r=rm | UInt8
  rflags: u=a w=szp 0=oc
  gas: suffix=b
-----
INSTRUCTION: o16 0B /r | OR r16, r/m16 | INTEL8086
  ops: rw=reg r=rm | UInt16
  rflags: u=a w=szp 0=oc
  gas: suffix=w
-----
INSTRUCTION: o32 0B /r | OR r32, r/m32 | INTEL386
  ops: rw=reg r=rm | UInt32
  rflags: u=a w=szp 0=oc
  gas: suffix=l
-----
INSTRUCTION: o64 0B /r | OR r64, r/m64 | X64
  ops: rw=reg r=rm | UInt64
  rflags: u=a w=szp 0=oc
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: 0C ib | OR AL, imm8 | INTEL8086
  ops: rw=r:al r=imm
  rflags: u=a w=szp 0=oc
  gas: suffix=b
-----
INSTRUCTION: o16 0D iw | OR AX, imm16 | INTEL8086
  ops: rw=r:ax r=imm
  rflags: u=a w=szp 0=oc
  gas: suffix=w
-----
INSTRUCTION: o32 0D id | OR EAX, imm32 | INTEL386
  ops: rw=r:eax r=imm
  rflags: u=a w=szp 0=oc
  gas: suffix=l
-----
INSTRUCTION: o64 0D id | OR RAX, imm32 | X64
  ops: rw=r:rax r=imm;64
  rflags: u=a w=szp 0=oc
  flags: 64
  gas: suffix=q
  nasm: sx
-----
INSTRUCTION: o16 0E | PUSH CS | INTEL8086
  ops: r=r:cs
  implied: push=1x2
  code-mnemonic: pushw
  flags: 16 32 sp=push;2
  gas: suffix=w osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o32 0E | PUSH CS | INTEL386
  ops: r=r:cs
  implied: push=1x4
  code-mnemonic: pushd
  flags: 16 32 sp=push;4
  gas: suffix=l osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o16 0F | POP CS | INTEL8086_ONLY
  ops: w=r:cs
  implied: pop=1x2
  code-mnemonic: popw
  flags: 16 sp=pop;2 asm-ig
  gas: suffix=w
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: 10 /r | ADC r/m8, r8 | INTEL8086
  ops: rw=rm r=reg | UInt8
  rflags: r=c w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=b
-----
INSTRUCTION: o16 11 /r | ADC r/m16, r16 | INTEL8086
  ops: rw=rm r=reg | UInt16
  rflags: r=c w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=w
-----
INSTRUCTION: o32 11 /r | ADC r/m32, r32 | INTEL386
  ops: rw=rm r=reg | UInt32
  rflags: r=c w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=l
-----
INSTRUCTION: o64 11 /r | ADC r/m64, r64 | X64
  ops: rw=rm r=reg | UInt64
  rflags: r=c w=oszacp
  flags: 64 lock xacquire xrelease
  gas: suffix=q
-----
INSTRUCTION: 12 /r | ADC r8, r/m8 | INTEL8086
  ops: rw=reg r=rm | UInt8
  rflags: r=c w=oszacp
  gas: suffix=b
-----
INSTRUCTION: o16 13 /r | ADC r16, r/m16 | INTEL8086
  ops: rw=reg r=rm | UInt16
  rflags: r=c w=oszacp
  gas: suffix=w
-----
INSTRUCTION: o32 13 /r | ADC r32, r/m32 | INTEL386
  ops: rw=reg r=rm | UInt32
  rflags: r=c w=oszacp
  gas: suffix=l
-----
INSTRUCTION: o64 13 /r | ADC r64, r/m64 | X64
  ops: rw=reg r=rm | UInt64
  rflags: r=c w=oszacp
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: 14 ib | ADC AL, imm8 | INTEL8086
  ops: rw=r:al r=imm
  rflags: r=c w=oszacp
  gas: suffix=b
-----
INSTRUCTION: o16 15 iw | ADC AX, imm16 | INTEL8086
  ops: rw=r:ax r=imm
  rflags: r=c w=oszacp
  gas: suffix=w
-----
INSTRUCTION: o32 15 id | ADC EAX, imm32 | INTEL386
  ops: rw=r:eax r=imm
  rflags: r=c w=oszacp
  gas: suffix=l
-----
INSTRUCTION: o64 15 id | ADC RAX, imm32 | X64
  ops: rw=r:rax r=imm;64
  rflags: r=c w=oszacp
  flags: 64
  gas: suffix=q
  nasm: sx
-----
INSTRUCTION: o16 16 | PUSH SS | INTEL8086
  ops: r=r:ss
  implied: push=1x2
  code-mnemonic: pushw
  flags: 16 32 sp=push;2
  gas: suffix=w osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o32 16 | PUSH SS | INTEL386
  ops: r=r:ss
  implied: push=1x4
  code-mnemonic: pushd
  flags: 16 32 sp=push;4
  gas: suffix=l osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o16 17 | POP SS | INTEL8086
  ops: w=r:ss
  implied: pop=1x2
  code-mnemonic: popw
  flags: 16 32 sp=pop;2 no-in-sgx tsx-impl-abort
  gas: suffix=w osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o32 17 | POP SS | INTEL386
  ops: w=r:ss
  implied: pop=1x4
  code-mnemonic: popd
  flags: 16 32 sp=pop;4 no-in-sgx tsx-impl-abort
  gas: suffix=l osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: 18 /r | SBB r/m8, r8 | INTEL8086
  ops: rw=rm r=reg | UInt8
  rflags: r=c w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=b
-----
INSTRUCTION: o16 19 /r | SBB r/m16, r16 | INTEL8086
  ops: rw=rm r=reg | UInt16
  rflags: r=c w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=w
-----
INSTRUCTION: o32 19 /r | SBB r/m32, r32 | INTEL386
  ops: rw=rm r=reg | UInt32
  rflags: r=c w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=l
-----
INSTRUCTION: o64 19 /r | SBB r/m64, r64 | X64
  ops: rw=rm r=reg | UInt64
  rflags: r=c w=oszacp
  flags: 64 lock xacquire xrelease
  gas: suffix=q
-----
INSTRUCTION: 1A /r | SBB r8, r/m8 | INTEL8086
  ops: rw=reg r=rm | UInt8
  rflags: r=c w=oszacp
  gas: suffix=b
-----
INSTRUCTION: o16 1B /r | SBB r16, r/m16 | INTEL8086
  ops: rw=reg r=rm | UInt16
  rflags: r=c w=oszacp
  gas: suffix=w
-----
INSTRUCTION: o32 1B /r | SBB r32, r/m32 | INTEL386
  ops: rw=reg r=rm | UInt32
  rflags: r=c w=oszacp
  gas: suffix=l
-----
INSTRUCTION: o64 1B /r | SBB r64, r/m64 | X64
  ops: rw=reg r=rm | UInt64
  rflags: r=c w=oszacp
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: 1C ib | SBB AL, imm8 | INTEL8086
  ops: rw=r:al r=imm
  rflags: r=c w=oszacp
  gas: suffix=b
-----
INSTRUCTION: o16 1D iw | SBB AX, imm16 | INTEL8086
  ops: rw=r:ax r=imm
  rflags: r=c w=oszacp
  gas: suffix=w
-----
INSTRUCTION: o32 1D id | SBB EAX, imm32 | INTEL386
  ops: rw=r:eax r=imm
  rflags: r=c w=oszacp
  gas: suffix=l
-----
INSTRUCTION: o64 1D id | SBB RAX, imm32 | X64
  ops: rw=r:rax r=imm;64
  rflags: r=c w=oszacp
  flags: 64
  gas: suffix=q
  nasm: sx
-----
INSTRUCTION: o16 1E | PUSH DS | INTEL8086
  ops: r=r:ds
  implied: push=1x2
  code-mnemonic: pushw
  flags: 16 32 sp=push;2
  gas: suffix=w osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o32 1E | PUSH DS | INTEL386
  ops: r=r:ds
  implied: push=1x4
  code-mnemonic: pushd
  flags: 16 32 sp=push;4
  gas: suffix=l osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o16 1F | POP DS | INTEL8086
  ops: w=r:ds
  implied: pop=1x2
  code-mnemonic: popw
  flags: 16 32 sp=pop;2 no-in-sgx tsx-impl-abort
  gas: suffix=w osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o32 1F | POP DS | INTEL386
  ops: w=r:ds
  implied: pop=1x4
  code-mnemonic: popd
  flags: 16 32 sp=pop;4 no-in-sgx tsx-impl-abort
  gas: suffix=l osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: 20 /r | AND r/m8, r8 | INTEL8086
  ops: rw=rm r=reg | UInt8
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  gas: suffix=b
-----
INSTRUCTION: o16 21 /r | AND r/m16, r16 | INTEL8086
  ops: rw=rm r=reg | UInt16
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  gas: suffix=w
-----
INSTRUCTION: o32 21 /r | AND r/m32, r32 | INTEL386
  ops: rw=rm r=reg | UInt32
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  gas: suffix=l
-----
INSTRUCTION: o64 21 /r | AND r/m64, r64 | X64
  ops: rw=rm r=reg | UInt64
  rflags: u=a w=szp 0=oc
  flags: 64 lock xacquire xrelease
  gas: suffix=q
-----
INSTRUCTION: 22 /r | AND r8, r/m8 | INTEL8086
  ops: rw=reg r=rm | UInt8
  rflags: u=a w=szp 0=oc
  gas: suffix=b
-----
INSTRUCTION: o16 23 /r | AND r16, r/m16 | INTEL8086
  ops: rw=reg r=rm | UInt16
  rflags: u=a w=szp 0=oc
  gas: suffix=w
-----
INSTRUCTION: o32 23 /r | AND r32, r/m32 | INTEL386
  ops: rw=reg r=rm | UInt32
  rflags: u=a w=szp 0=oc
  gas: suffix=l
-----
INSTRUCTION: o64 23 /r | AND r64, r/m64 | X64
  ops: rw=reg r=rm | UInt64
  rflags: u=a w=szp 0=oc
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: 24 ib | AND AL, imm8 | INTEL8086
  ops: rw=r:al r=imm
  rflags: u=a w=szp 0=oc
  gas: suffix=b
-----
INSTRUCTION: o16 25 iw | AND AX, imm16 | INTEL8086
  ops: rw=r:ax r=imm
  rflags: u=a w=szp 0=oc
  gas: suffix=w
-----
INSTRUCTION: o32 25 id | AND EAX, imm32 | INTEL386
  ops: rw=r:eax r=imm
  rflags: u=a w=szp 0=oc
  gas: suffix=l
-----
INSTRUCTION: o64 25 id | AND RAX, imm32 | X64
  ops: rw=r:rax r=imm;64
  rflags: u=a w=szp 0=oc
  flags: 64
  gas: suffix=q
  nasm: sx
-----
INSTRUCTION: 27 | DAA | INTEL8086
  implied: rw=al
  rflags: r=ac u=o w=szacp
  flags: 16 32
-----
INSTRUCTION: 28 /r | SUB r/m8, r8 | INTEL8086
  ops: rw=rm r=reg | UInt8
  implied: zero-reg-rflags
  rflags: w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=b
-----
INSTRUCTION: o16 29 /r | SUB r/m16, r16 | INTEL8086
  ops: rw=rm r=reg | UInt16
  implied: zero-reg-rflags
  rflags: w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=w
-----
INSTRUCTION: o32 29 /r | SUB r/m32, r32 | INTEL386
  ops: rw=rm r=reg | UInt32
  implied: zero-reg-rflags
  rflags: w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=l
-----
INSTRUCTION: o64 29 /r | SUB r/m64, r64 | X64
  ops: rw=rm r=reg | UInt64
  implied: zero-reg-rflags
  rflags: w=oszacp
  flags: 64 lock xacquire xrelease
  gas: suffix=q
-----
INSTRUCTION: 2A /r | SUB r8, r/m8 | INTEL8086
  ops: rw=reg r=rm | UInt8
  implied: zero-reg-rflags
  rflags: w=oszacp
  gas: suffix=b
-----
INSTRUCTION: o16 2B /r | SUB r16, r/m16 | INTEL8086
  ops: rw=reg r=rm | UInt16
  implied: zero-reg-rflags
  rflags: w=oszacp
  gas: suffix=w
-----
INSTRUCTION: o32 2B /r | SUB r32, r/m32 | INTEL386
  ops: rw=reg r=rm | UInt32
  implied: zero-reg-rflags
  rflags: w=oszacp
  gas: suffix=l
-----
INSTRUCTION: o64 2B /r | SUB r64, r/m64 | X64
  ops: rw=reg r=rm | UInt64
  implied: zero-reg-rflags
  rflags: w=oszacp
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: 2C ib | SUB AL, imm8 | INTEL8086
  ops: rw=r:al r=imm
  rflags: w=oszacp
  gas: suffix=b
-----
INSTRUCTION: o16 2D iw | SUB AX, imm16 | INTEL8086
  ops: rw=r:ax r=imm
  rflags: w=oszacp
  gas: suffix=w
-----
INSTRUCTION: o32 2D id | SUB EAX, imm32 | INTEL386
  ops: rw=r:eax r=imm
  rflags: w=oszacp
  gas: suffix=l
-----
INSTRUCTION: o64 2D id | SUB RAX, imm32 | X64
  ops: rw=r:rax r=imm;64
  rflags: w=oszacp
  flags: 64
  gas: suffix=q
  nasm: sx
-----
INSTRUCTION: 2F | DAS | INTEL8086
  implied: rw=al
  rflags: r=ac u=o w=szacp
  flags: 16 32
-----
INSTRUCTION: 30 /r | XOR r/m8, r8 | INTEL8086
  ops: rw=rm r=reg | UInt8
  implied: zero-reg-rflags
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  gas: suffix=b
-----
INSTRUCTION: o16 31 /r | XOR r/m16, r16 | INTEL8086
  ops: rw=rm r=reg | UInt16
  implied: zero-reg-rflags
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  gas: suffix=w
-----
INSTRUCTION: o32 31 /r | XOR r/m32, r32 | INTEL386
  ops: rw=rm r=reg | UInt32
  implied: zero-reg-rflags
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  gas: suffix=l
-----
INSTRUCTION: o64 31 /r | XOR r/m64, r64 | X64
  ops: rw=rm r=reg | UInt64
  implied: zero-reg-rflags
  rflags: u=a w=szp 0=oc
  flags: 64 lock xacquire xrelease
  gas: suffix=q
-----
INSTRUCTION: 32 /r | XOR r8, r/m8 | INTEL8086
  ops: rw=reg r=rm | UInt8
  implied: zero-reg-rflags
  rflags: u=a w=szp 0=oc
  gas: suffix=b
-----
INSTRUCTION: o16 33 /r | XOR r16, r/m16 | INTEL8086
  ops: rw=reg r=rm | UInt16
  implied: zero-reg-rflags
  rflags: u=a w=szp 0=oc
  gas: suffix=w
-----
INSTRUCTION: o32 33 /r | XOR r32, r/m32 | INTEL386
  ops: rw=reg r=rm | UInt32
  implied: zero-reg-rflags
  rflags: u=a w=szp 0=oc
  gas: suffix=l
-----
INSTRUCTION: o64 33 /r | XOR r64, r/m64 | X64
  ops: rw=reg r=rm | UInt64
  implied: zero-reg-rflags
  rflags: u=a w=szp 0=oc
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: 34 ib | XOR AL, imm8 | INTEL8086
  ops: rw=r:al r=imm
  rflags: u=a w=szp 0=oc
  gas: suffix=b
-----
INSTRUCTION: o16 35 iw | XOR AX, imm16 | INTEL8086
  ops: rw=r:ax r=imm
  rflags: u=a w=szp 0=oc
  gas: suffix=w
-----
INSTRUCTION: o32 35 id | XOR EAX, imm32 | INTEL386
  ops: rw=r:eax r=imm
  rflags: u=a w=szp 0=oc
  gas: suffix=l
-----
INSTRUCTION: o64 35 id | XOR RAX, imm32 | X64
  ops: rw=r:rax r=imm;64
  rflags: u=a w=szp 0=oc
  flags: 64
  gas: suffix=q
  nasm: sx
-----
INSTRUCTION: 37 | AAA | INTEL8086
  implied: rw=ax
  rflags: r=a u=oszp w=ac
  flags: 16 32
-----
INSTRUCTION: 38 /r | CMP r/m8, r8 | INTEL8086
  ops: r=rm r=reg | UInt8
  rflags: w=oszacp
  gas: suffix=b
-----
INSTRUCTION: o16 39 /r | CMP r/m16, r16 | INTEL8086
  ops: r=rm r=reg | UInt16
  rflags: w=oszacp
  gas: suffix=w
-----
INSTRUCTION: o32 39 /r | CMP r/m32, r32 | INTEL386
  ops: r=rm r=reg | UInt32
  rflags: w=oszacp
  gas: suffix=l
-----
INSTRUCTION: o64 39 /r | CMP r/m64, r64 | X64
  ops: r=rm r=reg | UInt64
  rflags: w=oszacp
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: 3A /r | CMP r8, r/m8 | INTEL8086
  ops: r=reg r=rm | UInt8
  rflags: w=oszacp
  gas: suffix=b
-----
INSTRUCTION: o16 3B /r | CMP r16, r/m16 | INTEL8086
  ops: r=reg r=rm | UInt16
  rflags: w=oszacp
  gas: suffix=w
-----
INSTRUCTION: o32 3B /r | CMP r32, r/m32 | INTEL386
  ops: r=reg r=rm | UInt32
  rflags: w=oszacp
  gas: suffix=l
-----
INSTRUCTION: o64 3B /r | CMP r64, r/m64 | X64
  ops: r=reg r=rm | UInt64
  rflags: w=oszacp
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: 3C ib | CMP AL, imm8 | INTEL8086
  ops: r=r:al r=imm
  rflags: w=oszacp
  gas: suffix=b
-----
INSTRUCTION: o16 3D iw | CMP AX, imm16 | INTEL8086
  ops: r=r:ax r=imm
  rflags: w=oszacp
  gas: suffix=w
-----
INSTRUCTION: o32 3D id | CMP EAX, imm32 | INTEL386
  ops: r=r:eax r=imm
  rflags: w=oszacp
  gas: suffix=l
-----
INSTRUCTION: o64 3D id | CMP RAX, imm32 | X64
  ops: r=r:rax r=imm;64
  rflags: w=oszacp
  flags: 64
  gas: suffix=q
  nasm: sx
-----
INSTRUCTION: 3F | AAS | INTEL8086
  implied: rw=ax
  rflags: r=a u=oszp w=ac
  flags: 16 32
-----
INSTRUCTION: o16 40+rw | INC r16 | INTEL8086
  ops: rw=opcode
  rflags: w=oszap
  flags: 16 32
  gas: suffix=w
-----
INSTRUCTION: o32 40+rd | INC r32 | INTEL386
  ops: rw=opcode
  rflags: w=oszap
  flags: 16 32
  gas: suffix=l
-----
INSTRUCTION: o16 48+rw | DEC r16 | INTEL8086
  ops: rw=opcode
  rflags: w=oszap
  flags: 16 32
  gas: suffix=w
-----
INSTRUCTION: o32 48+rd | DEC r32 | INTEL386
  ops: rw=opcode
  rflags: w=oszap
  flags: 16 32
  gas: suffix=l
-----
INSTRUCTION: o16 50+rw | PUSH r16 | INTEL8086
  ops: r=opcode
  implied: push=1x2
  flags: sp=push;2
  gas: suffix=w
-----
INSTRUCTION: o32 50+rd | PUSH r32 | INTEL386
  ops: r=opcode
  implied: push=1x4
  flags: 16 32 sp=push;4
  gas: suffix=l
-----
INSTRUCTION: o64 50+ro | PUSH r64 | X64
  ops: r=opcode
  implied: push=1x8
  flags: 64 sp=push;8 do64
  gas: suffix=q
-----
INSTRUCTION: o16 58+rw | POP r16 | INTEL8086
  ops: w=opcode
  implied: pop=1x2
  flags: sp=pop;2
  gas: suffix=w
-----
INSTRUCTION: o32 58+rd | POP r32 | INTEL386
  ops: w=opcode
  implied: pop=1x4
  flags: 16 32 sp=pop;4
  gas: suffix=l
-----
INSTRUCTION: o64 58+ro | POP r64 | X64
  ops: w=opcode
  implied: pop=1x8
  flags: 64 sp=pop;8 do64
  gas: suffix=q
-----
INSTRUCTION: o16 60 | PUSHA | INTEL186
  implied: pusha=2
  code-mnemonic: pushaw
  flags: 16 32 sp=push;16 asm=pusha
  gas: osz-suffix-1
  masm: osz-suffix-1
  nasm: osz-suffix-1
-----
INSTRUCTION: o32 60 | PUSHAD | INTEL386
  implied: pusha=4
  flags: 16 32 sp=push;32 asm=pushad
  gas: mnemonic=pusha osz-suffix-1
  masm: mnemonic=pusha osz-suffix-1
  nasm: mnemonic=pusha osz-suffix-1
-----
INSTRUCTION: o16 61 | POPA | INTEL186
  implied: popa=2
  code-mnemonic: popaw
  flags: 16 32 sp=pop;16 asm=popa
  gas: osz-suffix-1
  masm: osz-suffix-1
  nasm: osz-suffix-1
-----
INSTRUCTION: o32 61 | POPAD | INTEL386
  implied: popa=4
  flags: 16 32 sp=pop;32 asm=popad
  gas: mnemonic=popa osz-suffix-1
  masm: mnemonic=popa osz-suffix-1
  nasm: mnemonic=popa osz-suffix-1
-----
INSTRUCTION: o16 62 /r | BOUND r16, m16&16 | INTEL186
  ops: r=reg r=rm | Bound16_WordWord
  code-memory-size: 1616
  flags: 16 32 intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: flags=keep-op-order suffix=w
  intel: flags=force-size=default
  masm: flags=force-size=default
-----
INSTRUCTION: o32 62 /r | BOUND r32, m32&32 | INTEL386
  ops: r=reg r=rm | Bound32_DwordDword
  code-memory-size: 3232
  flags: 16 32 intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: flags=keep-op-order suffix=l
  intel: flags=force-size=default
  masm: flags=force-size=default
-----
INSTRUCTION: o16 63 /r | ARPL r/m16, r16 | INTEL286
  ops: rcw=rm r=reg | UInt16
  implied: arpl
  rflags: w=z
  flags: 16 32 no-rm no-v86
  gas: reg16
  intel: reg16
  masm: reg16
  nasm: reg16
-----
INSTRUCTION: o32 63 /r | ARPL r32/m16, r32 | INTEL386
  ops: rcw=rm r=reg | UInt16
  implied: arpl
  rflags: w=z
  flags: 16 32 no-rm no-v86
  gas: reg16
  intel: reg16
  masm: reg16
  nasm: reg16
-----
INSTRUCTION: o16 63 /r | MOVSXD r16, r/m16 | X64
  ops: w=reg r=rm | Int16
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: o32 63 /r | MOVSXD r32, r/m32 | X64
  ops: w=reg r=rm | Int32
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: o64 63 /r | MOVSXD r64, r/m32 | X64
  ops: w=reg r=rm | Int32
  flags: 64
  gas: mnemonic=movslq
  masm: flags=force-size=default
-----
INSTRUCTION: o16 68 iw | PUSH imm16 | INTEL186
  ops: r=imm
  implied: push=1x2
  flags: sp=push;2
  gas: suffix=w osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: sx-push-imm
-----
INSTRUCTION: o32 68 id | PUSH imm32 | INTEL386
  ops: r=imm
  implied: push=1x4
  code-mnemonic: pushd
  flags: 16 32 sp=push;4
  gas: suffix=l osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: sx-push-imm
-----
INSTRUCTION: o64 68 id | PUSH imm32 | X64
  ops: r=imm;64
  implied: push=1x8
  code-mnemonic: pushq
  flags: 64 sp=push;8 do64
  gas: suffix=q osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: sx-push-imm
-----
INSTRUCTION: o16 69 /r iw | IMUL r16, r/m16, imm16 | INTEL186
  ops: w=reg r=rm r=imm | Int16
  rflags: u=szap w=oc
  gas: suffix=w imul
  intel: imul
  masm: imul
  nasm: imul
-----
INSTRUCTION: o32 69 /r id | IMUL r32, r/m32, imm32 | INTEL386
  ops: w=reg r=rm r=imm | Int32
  rflags: u=szap w=oc
  gas: suffix=l imul
  intel: imul
  masm: imul
  nasm: imul
-----
INSTRUCTION: o64 69 /r id | IMUL r64, r/m64, imm32 | X64
  ops: w=reg r=rm r=imm;64 | Int64
  rflags: u=szap w=oc
  flags: 64
  gas: suffix=q imul
  intel: imul
  masm: imul
  nasm: imul
-----
INSTRUCTION: o16 6A ib | PUSH imm8 | INTEL186
  ops: r=imm;16
  implied: push=1x2
  code-mnemonic: pushw
  flags: sp=push;2
  gas: suffix=w osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: sx-push-imm8
-----
INSTRUCTION: o32 6A ib | PUSH imm8 | INTEL386
  ops: r=imm;32
  implied: push=1x4
  code-mnemonic: pushd
  flags: 16 32 sp=push;4
  gas: suffix=l osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: sx-push-imm8
-----
INSTRUCTION: o64 6A ib | PUSH imm8 | X64
  ops: r=imm;64
  implied: push=1x8
  code-mnemonic: pushq
  flags: 64 sp=push;8 do64
  gas: suffix=q osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: sx-push-imm8
-----
INSTRUCTION: o16 6B /r ib | IMUL r16, r/m16, imm8 | INTEL186
  ops: w=reg r=rm r=imm;16 | Int16
  rflags: u=szap w=oc
  gas: suffix=w imul
  intel: imul
  masm: imul
  nasm: imul
-----
INSTRUCTION: o32 6B /r ib | IMUL r32, r/m32, imm8 | INTEL386
  ops: w=reg r=rm r=imm;32 | Int32
  rflags: u=szap w=oc
  gas: suffix=l imul
  intel: imul
  masm: imul
  nasm: imul
-----
INSTRUCTION: o64 6B /r ib | IMUL r64, r/m64, imm8 | X64
  ops: w=reg r=rm r=imm;64 | Int64
  rflags: u=szap w=oc
  flags: 64
  gas: suffix=q imul
  intel: imul
  masm: imul
  nasm: imul
-----
INSTRUCTION: 6C | INSB [m8], [DX] | INTEL186
  ops: w=es-rdi r=r:dx | UInt8
  implied: ins
  rflags: r=d
  flags: io privileged rep intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort is-string-op
  gas: mnemonic=ins flags=force-suffix suffix=b
  masm: mnemonic=ins asz-string-yd b
  nasm: asz-string
-----
INSTRUCTION: o16 6D | INSW [m16], [DX] | INTEL186
  ops: w=es-rdi r=r:dx | UInt16
  implied: ins
  rflags: r=d
  flags: io privileged rep intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort is-string-op
  gas: mnemonic=ins flags=force-suffix suffix=w
  masm: mnemonic=ins asz-string-yd w
  nasm: asz-string
-----
INSTRUCTION: o32 6D | INSD [m32], [DX] | INTEL386
  ops: w=es-rdi r=r:dx | UInt32
  implied: ins
  rflags: r=d
  flags: io privileged rep intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort is-string-op
  gas: mnemonic=ins flags=force-suffix suffix=l
  masm: mnemonic=ins asz-string-yd d
  nasm: asz-string
-----
INSTRUCTION: 6E | OUTSB [DX], [m8] | INTEL186
  ops: r=r:dx r=seg-rsi | UInt8
  implied: outs
  rflags: r=d
  flags: io privileged rep intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort is-string-op
  gas: mnemonic=outs flags=force-suffix suffix=b
  masm: mnemonic=outs asz-string-dx b
  nasm: asz-string
-----
INSTRUCTION: o16 6F | OUTSW [DX], [m16] | INTEL186
  ops: r=r:dx r=seg-rsi | UInt16
  implied: outs
  rflags: r=d
  flags: io privileged rep intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort is-string-op
  gas: mnemonic=outs flags=force-suffix suffix=w
  masm: mnemonic=outs asz-string-dx w
  nasm: asz-string
-----
INSTRUCTION: o32 6F | OUTSD [DX], [m32] | INTEL386
  ops: r=r:dx r=seg-rsi | UInt32
  implied: outs
  rflags: r=d
  flags: io privileged rep intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort is-string-op
  gas: mnemonic=outs flags=force-suffix suffix=l
  masm: mnemonic=outs asz-string-dx d
  nasm: asz-string
-----
INSTRUCTION: o16 70 cb | JO rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  rflags: r=o
  flags: bnd ht cc=j;o; br=jcc-short cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 70 cb | JO rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=o
  flags: 16 32 bnd ht cc=j;o; br=jcc-short cflow=br-cond
-----
INSTRUCTION: o64 70 cb | JO rel8 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=o
  flags: 64 bnd ht cc=j;o; br=jcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 71 cb | JNO rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  rflags: r=o
  flags: bnd ht cc=j;no; br=jcc-short cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 71 cb | JNO rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=o
  flags: 16 32 bnd ht cc=j;no; br=jcc-short cflow=br-cond
-----
INSTRUCTION: o64 71 cb | JNO rel8 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=o
  flags: 64 bnd ht cc=j;no; br=jcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 72 cb | JB rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  rflags: r=c
  flags: bnd ht cc=j;b; br=jcc-short cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 72 cb | JB rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=c
  flags: 16 32 bnd ht cc=j;b; br=jcc-short cflow=br-cond
-----
INSTRUCTION: o64 72 cb | JB rel8 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=c
  flags: 64 bnd ht cc=j;b; br=jcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 73 cb | JAE rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  rflags: r=c
  flags: bnd ht cc=j;ae; br=jcc-short cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 73 cb | JAE rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=c
  flags: 16 32 bnd ht cc=j;ae; br=jcc-short cflow=br-cond
-----
INSTRUCTION: o64 73 cb | JAE rel8 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=c
  flags: 64 bnd ht cc=j;ae; br=jcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 74 cb | JE rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  rflags: r=z
  flags: bnd ht cc=j;e; br=jcc-short cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 74 cb | JE rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=z
  flags: 16 32 bnd ht cc=j;e; br=jcc-short cflow=br-cond
-----
INSTRUCTION: o64 74 cb | JE rel8 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=z
  flags: 64 bnd ht cc=j;e; br=jcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 75 cb | JNE rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  rflags: r=z
  flags: bnd ht cc=j;ne; br=jcc-short cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 75 cb | JNE rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=z
  flags: 16 32 bnd ht cc=j;ne; br=jcc-short cflow=br-cond
-----
INSTRUCTION: o64 75 cb | JNE rel8 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=z
  flags: 64 bnd ht cc=j;ne; br=jcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 76 cb | JBE rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  rflags: r=zc
  flags: bnd ht cc=j;be; br=jcc-short cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 76 cb | JBE rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=zc
  flags: 16 32 bnd ht cc=j;be; br=jcc-short cflow=br-cond
-----
INSTRUCTION: o64 76 cb | JBE rel8 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=zc
  flags: 64 bnd ht cc=j;be; br=jcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 77 cb | JA rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  rflags: r=zc
  flags: bnd ht cc=j;a; br=jcc-short cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 77 cb | JA rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=zc
  flags: 16 32 bnd ht cc=j;a; br=jcc-short cflow=br-cond
-----
INSTRUCTION: o64 77 cb | JA rel8 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=zc
  flags: 64 bnd ht cc=j;a; br=jcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 78 cb | JS rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  rflags: r=s
  flags: bnd ht cc=j;s; br=jcc-short cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 78 cb | JS rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=s
  flags: 16 32 bnd ht cc=j;s; br=jcc-short cflow=br-cond
-----
INSTRUCTION: o64 78 cb | JS rel8 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=s
  flags: 64 bnd ht cc=j;s; br=jcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 79 cb | JNS rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  rflags: r=s
  flags: bnd ht cc=j;ns; br=jcc-short cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 79 cb | JNS rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=s
  flags: 16 32 bnd ht cc=j;ns; br=jcc-short cflow=br-cond
-----
INSTRUCTION: o64 79 cb | JNS rel8 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=s
  flags: 64 bnd ht cc=j;ns; br=jcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 7A cb | JP rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  rflags: r=p
  flags: bnd ht cc=j;p; br=jcc-short cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 7A cb | JP rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=p
  flags: 16 32 bnd ht cc=j;p; br=jcc-short cflow=br-cond
-----
INSTRUCTION: o64 7A cb | JP rel8 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=p
  flags: 64 bnd ht cc=j;p; br=jcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 7B cb | JNP rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  rflags: r=p
  flags: bnd ht cc=j;np; br=jcc-short cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 7B cb | JNP rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=p
  flags: 16 32 bnd ht cc=j;np; br=jcc-short cflow=br-cond
-----
INSTRUCTION: o64 7B cb | JNP rel8 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=p
  flags: 64 bnd ht cc=j;np; br=jcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 7C cb | JL rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  rflags: r=os
  flags: bnd ht cc=j;l; br=jcc-short cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 7C cb | JL rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=os
  flags: 16 32 bnd ht cc=j;l; br=jcc-short cflow=br-cond
-----
INSTRUCTION: o64 7C cb | JL rel8 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=os
  flags: 64 bnd ht cc=j;l; br=jcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 7D cb | JGE rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  rflags: r=os
  flags: bnd ht cc=j;ge; br=jcc-short cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 7D cb | JGE rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=os
  flags: 16 32 bnd ht cc=j;ge; br=jcc-short cflow=br-cond
-----
INSTRUCTION: o64 7D cb | JGE rel8 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=os
  flags: 64 bnd ht cc=j;ge; br=jcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 7E cb | JLE rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  rflags: r=osz
  flags: bnd ht cc=j;le; br=jcc-short cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 7E cb | JLE rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=osz
  flags: 16 32 bnd ht cc=j;le; br=jcc-short cflow=br-cond
-----
INSTRUCTION: o64 7E cb | JLE rel8 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=osz
  flags: 64 bnd ht cc=j;le; br=jcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 7F cb | JG rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  rflags: r=osz
  flags: bnd ht cc=j;g; br=jcc-short cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 7F cb | JG rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=osz
  flags: 16 32 bnd ht cc=j;g; br=jcc-short cflow=br-cond
-----
INSTRUCTION: o64 7F cb | JG rel8 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=osz
  flags: 64 bnd ht cc=j;g; br=jcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: 80 /0 ib | ADD r/m8, imm8 | INTEL8086
  ops: rw=rm r=imm | UInt8
  rflags: w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 80 /1 ib | OR r/m8, imm8 | INTEL8086
  ops: rw=rm r=imm | UInt8
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 80 /2 ib | ADC r/m8, imm8 | INTEL8086
  ops: rw=rm r=imm | UInt8
  rflags: r=c w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 80 /3 ib | SBB r/m8, imm8 | INTEL8086
  ops: rw=rm r=imm | UInt8
  rflags: r=c w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 80 /4 ib | AND r/m8, imm8 | INTEL8086
  ops: rw=rm r=imm | UInt8
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 80 /5 ib | SUB r/m8, imm8 | INTEL8086
  ops: rw=rm r=imm | UInt8
  rflags: w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 80 /6 ib | XOR r/m8, imm8 | INTEL8086
  ops: rw=rm r=imm | UInt8
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 80 /7 ib | CMP r/m8, imm8 | INTEL8086
  ops: r=rm r=imm | UInt8
  rflags: w=oszacp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 81 /0 iw | ADD r/m16, imm16 | INTEL8086
  ops: rw=rm r=imm | UInt16
  rflags: w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 81 /0 id | ADD r/m32, imm32 | INTEL386
  ops: rw=rm r=imm | UInt32
  rflags: w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 81 /0 id | ADD r/m64, imm32 | X64
  ops: rw=rm r=imm;64 | UInt64
  rflags: w=oszacp
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o16 81 /1 iw | OR r/m16, imm16 | INTEL8086
  ops: rw=rm r=imm | UInt16
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 81 /1 id | OR r/m32, imm32 | INTEL386
  ops: rw=rm r=imm | UInt32
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 81 /1 id | OR r/m64, imm32 | X64
  ops: rw=rm r=imm;64 | UInt64
  rflags: u=a w=szp 0=oc
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o16 81 /2 iw | ADC r/m16, imm16 | INTEL8086
  ops: rw=rm r=imm | UInt16
  rflags: r=c w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 81 /2 id | ADC r/m32, imm32 | INTEL386
  ops: rw=rm r=imm | UInt32
  rflags: r=c w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 81 /2 id | ADC r/m64, imm32 | X64
  ops: rw=rm r=imm;64 | UInt64
  rflags: r=c w=oszacp
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o16 81 /3 iw | SBB r/m16, imm16 | INTEL8086
  ops: rw=rm r=imm | UInt16
  rflags: r=c w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 81 /3 id | SBB r/m32, imm32 | INTEL386
  ops: rw=rm r=imm | UInt32
  rflags: r=c w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 81 /3 id | SBB r/m64, imm32 | X64
  ops: rw=rm r=imm;64 | UInt64
  rflags: r=c w=oszacp
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o16 81 /4 iw | AND r/m16, imm16 | INTEL8086
  ops: rw=rm r=imm | UInt16
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 81 /4 id | AND r/m32, imm32 | INTEL386
  ops: rw=rm r=imm | UInt32
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 81 /4 id | AND r/m64, imm32 | X64
  ops: rw=rm r=imm;64 | UInt64
  rflags: u=a w=szp 0=oc
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o16 81 /5 iw | SUB r/m16, imm16 | INTEL8086
  ops: rw=rm r=imm | UInt16
  rflags: w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 81 /5 id | SUB r/m32, imm32 | INTEL386
  ops: rw=rm r=imm | UInt32
  rflags: w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 81 /5 id | SUB r/m64, imm32 | X64
  ops: rw=rm r=imm;64 | UInt64
  rflags: w=oszacp
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o16 81 /6 iw | XOR r/m16, imm16 | INTEL8086
  ops: rw=rm r=imm | UInt16
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 81 /6 id | XOR r/m32, imm32 | INTEL386
  ops: rw=rm r=imm | UInt32
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 81 /6 id | XOR r/m64, imm32 | X64
  ops: rw=rm r=imm;64 | UInt64
  rflags: u=a w=szp 0=oc
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o16 81 /7 iw | CMP r/m16, imm16 | INTEL8086
  ops: r=rm r=imm | UInt16
  rflags: w=oszacp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 81 /7 id | CMP r/m32, imm32 | INTEL386
  ops: r=rm r=imm | UInt32
  rflags: w=oszacp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 81 /7 id | CMP r/m64, imm32 | X64
  ops: r=rm r=imm;64 | UInt64
  rflags: w=oszacp
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: 82 /0 ib | ADD r/m8, imm8 | INTEL8086
  ops: rw=rm r=imm | UInt8
  code-suffix: 82
  rflags: w=oszacp
  flags: 16 32 lock xacquire xrelease asm-ig
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 82 /1 ib | OR r/m8, imm8 | INTEL8086
  ops: rw=rm r=imm | UInt8
  code-suffix: 82
  rflags: u=a w=szp 0=oc
  flags: 16 32 lock xacquire xrelease asm-ig
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 82 /2 ib | ADC r/m8, imm8 | INTEL8086
  ops: rw=rm r=imm | UInt8
  code-suffix: 82
  rflags: r=c w=oszacp
  flags: 16 32 lock xacquire xrelease asm-ig
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 82 /3 ib | SBB r/m8, imm8 | INTEL8086
  ops: rw=rm r=imm | UInt8
  code-suffix: 82
  rflags: r=c w=oszacp
  flags: 16 32 lock xacquire xrelease asm-ig
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 82 /4 ib | AND r/m8, imm8 | INTEL8086
  ops: rw=rm r=imm | UInt8
  code-suffix: 82
  rflags: u=a w=szp 0=oc
  flags: 16 32 lock xacquire xrelease asm-ig
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 82 /5 ib | SUB r/m8, imm8 | INTEL8086
  ops: rw=rm r=imm | UInt8
  code-suffix: 82
  rflags: w=oszacp
  flags: 16 32 lock xacquire xrelease asm-ig
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 82 /6 ib | XOR r/m8, imm8 | INTEL8086
  ops: rw=rm r=imm | UInt8
  code-suffix: 82
  rflags: u=a w=szp 0=oc
  flags: 16 32 lock xacquire xrelease asm-ig
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 82 /7 ib | CMP r/m8, imm8 | INTEL8086
  ops: r=rm r=imm | UInt8
  code-suffix: 82
  rflags: w=oszacp
  flags: 16 32 asm-ig
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 83 /0 ib | ADD r/m16, imm8 | INTEL8086
  ops: rw=rm r=imm;16 | UInt16
  rflags: w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o32 83 /0 ib | ADD r/m32, imm8 | INTEL386
  ops: rw=rm r=imm;32 | UInt32
  rflags: w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o64 83 /0 ib | ADD r/m64, imm8 | X64
  ops: rw=rm r=imm;64 | UInt64
  rflags: w=oszacp
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o16 83 /1 ib | OR r/m16, imm8 | INTEL8086
  ops: rw=rm r=imm;16 | UInt16
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o32 83 /1 ib | OR r/m32, imm8 | INTEL386
  ops: rw=rm r=imm;32 | UInt32
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o64 83 /1 ib | OR r/m64, imm8 | X64
  ops: rw=rm r=imm;64 | UInt64
  rflags: u=a w=szp 0=oc
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o16 83 /2 ib | ADC r/m16, imm8 | INTEL8086
  ops: rw=rm r=imm;16 | UInt16
  rflags: r=c w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o32 83 /2 ib | ADC r/m32, imm8 | INTEL386
  ops: rw=rm r=imm;32 | UInt32
  rflags: r=c w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o64 83 /2 ib | ADC r/m64, imm8 | X64
  ops: rw=rm r=imm;64 | UInt64
  rflags: r=c w=oszacp
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o16 83 /3 ib | SBB r/m16, imm8 | INTEL8086
  ops: rw=rm r=imm;16 | UInt16
  rflags: r=c w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o32 83 /3 ib | SBB r/m32, imm8 | INTEL386
  ops: rw=rm r=imm;32 | UInt32
  rflags: r=c w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o64 83 /3 ib | SBB r/m64, imm8 | X64
  ops: rw=rm r=imm;64 | UInt64
  rflags: r=c w=oszacp
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o16 83 /4 ib | AND r/m16, imm8 | INTEL8086
  ops: rw=rm r=imm;16 | UInt16
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o32 83 /4 ib | AND r/m32, imm8 | INTEL386
  ops: rw=rm r=imm;32 | UInt32
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o64 83 /4 ib | AND r/m64, imm8 | X64
  ops: rw=rm r=imm;64 | UInt64
  rflags: u=a w=szp 0=oc
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o16 83 /5 ib | SUB r/m16, imm8 | INTEL8086
  ops: rw=rm r=imm;16 | UInt16
  rflags: w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o32 83 /5 ib | SUB r/m32, imm8 | INTEL386
  ops: rw=rm r=imm;32 | UInt32
  rflags: w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o64 83 /5 ib | SUB r/m64, imm8 | X64
  ops: rw=rm r=imm;64 | UInt64
  rflags: w=oszacp
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o16 83 /6 ib | XOR r/m16, imm8 | INTEL8086
  ops: rw=rm r=imm;16 | UInt16
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o32 83 /6 ib | XOR r/m32, imm8 | INTEL386
  ops: rw=rm r=imm;32 | UInt32
  rflags: u=a w=szp 0=oc
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o64 83 /6 ib | XOR r/m64, imm8 | X64
  ops: rw=rm r=imm;64 | UInt64
  rflags: u=a w=szp 0=oc
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o16 83 /7 ib | CMP r/m16, imm8 | INTEL8086
  ops: r=rm r=imm;16 | UInt16
  rflags: w=oszacp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o32 83 /7 ib | CMP r/m32, imm8 | INTEL386
  ops: r=rm r=imm;32 | UInt32
  rflags: w=oszacp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: o64 83 /7 ib | CMP r/m64, imm8 | X64
  ops: r=rm r=imm;64 | UInt64
  rflags: w=oszacp
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx
-----
INSTRUCTION: 84 /r | TEST r/m8, r8 | INTEL8086
  ops: r=rm r=reg | UInt8
  rflags: u=a w=szp 0=oc
  gas: suffix=b
-----
INSTRUCTION: o16 85 /r | TEST r/m16, r16 | INTEL8086
  ops: r=rm r=reg | UInt16
  rflags: u=a w=szp 0=oc
  gas: suffix=w
-----
INSTRUCTION: o32 85 /r | TEST r/m32, r32 | INTEL386
  ops: r=rm r=reg | UInt32
  rflags: u=a w=szp 0=oc
  gas: suffix=l
-----
INSTRUCTION: o64 85 /r | TEST r/m64, r64 | X64
  ops: r=rm r=reg | UInt64
  rflags: u=a w=szp 0=oc
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: 86 /r | XCHG r/m8, r8 | INTEL8086
  ops: rw=rm rw=reg | UInt8
  flags: lock xacquire xrelease atomic
  gas: suffix=b
  masm: reverse
  nasm: reverse
-----
INSTRUCTION: o16 87 /r | XCHG r/m16, r16 | INTEL8086
  ops: rw=rm rw=reg | UInt16
  flags: lock xacquire xrelease atomic
  gas: suffix=w
  masm: reverse
  nasm: reverse
-----
INSTRUCTION: o32 87 /r | XCHG r/m32, r32 | INTEL386
  ops: rw=rm rw=reg | UInt32
  flags: lock xacquire xrelease atomic
  gas: suffix=l
  masm: reverse
  nasm: reverse
-----
INSTRUCTION: o64 87 /r | XCHG r/m64, r64 | X64
  ops: rw=rm rw=reg | UInt64
  flags: 64 lock xacquire xrelease atomic
  gas: suffix=q
  masm: reverse
  nasm: reverse
-----
INSTRUCTION: 88 /r | MOV r/m8, r8 | INTEL8086
  ops: w=rm r=reg | UInt8
  flags: xrelease
  gas: suffix=b
-----
INSTRUCTION: o16 89 /r | MOV r/m16, r16 | INTEL8086
  ops: w=rm r=reg | UInt16
  flags: xrelease
  gas: suffix=w
-----
INSTRUCTION: o32 89 /r | MOV r/m32, r32 | INTEL386
  ops: w=rm r=reg | UInt32
  flags: xrelease
  gas: suffix=l
-----
INSTRUCTION: o64 89 /r | MOV r/m64, r64 | X64
  ops: w=rm r=reg | UInt64
  flags: 64 xrelease
  gas: suffix=q
-----
INSTRUCTION: 8A /r | MOV r8, r/m8 | INTEL8086
  ops: w=reg r=rm | UInt8
  gas: suffix=b
-----
INSTRUCTION: o16 8B /r | MOV r16, r/m16 | INTEL8086
  ops: w=reg r=rm | UInt16
  gas: suffix=w
-----
INSTRUCTION: o32 8B /r | MOV r32, r/m32 | INTEL386
  ops: w=reg r=rm | UInt32
  gas: suffix=l
-----
INSTRUCTION: o64 8B /r | MOV r64, r/m64 | X64
  ops: w=reg r=rm | UInt64
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: o16 8C /r | MOV r/m16, Sreg | INTEL8086
  ops: w=rm r=reg | UInt16
  gas: suffix=w mem16
  nasm: osz-mem-1
-----
INSTRUCTION: o32 8C /r | MOV r32/m16, Sreg | INTEL386
  ops: w=rm r=reg | UInt16
  gas: suffix=l mem16
  nasm: osz-mem-1
-----
INSTRUCTION: o64 8C /r | MOV r64/m16, Sreg | X64
  ops: w=rm r=reg | UInt16
  flags: 64
  gas: suffix=q mem16
  nasm: osz-mem-1
-----
INSTRUCTION: o16 8D /r | LEA r16, m | INTEL8086
  ops: w=reg nma=rm
  implied: lea
  flags: ignores-seg
  gas: suffix=w
-----
INSTRUCTION: o32 8D /r | LEA r32, m | INTEL386
  ops: w=reg nma=rm
  implied: lea
  flags: ignores-seg
  gas: suffix=l
-----
INSTRUCTION: o64 8D /r | LEA r64, m | X64
  ops: w=reg nma=rm
  implied: lea
  flags: 64 ignores-seg
  gas: suffix=q
-----
INSTRUCTION: o16 8E /r | MOV Sreg, r/m16 | INTEL8086
  ops: w=reg r=rm | UInt16
  flags: no-in-sgx tsx-impl-abort
  gas: suffix=w mem16
  nasm: osz-mem-1
-----
INSTRUCTION: o32 8E /r | MOV Sreg, r32/m16 | INTEL386
  ops: w=reg r=rm | UInt16
  implied: last-gpr-16
  flags: no-in-sgx tsx-impl-abort
  gas: suffix=l mem16
  intel: reg16
  nasm: osz-mem-1
-----
INSTRUCTION: o64 8E /r | MOV Sreg, r64/m16 | X64
  ops: w=reg r=rm | UInt16
  implied: last-gpr-16
  flags: 64 no-in-sgx tsx-impl-abort
  gas: suffix=q mem16
  intel: reg16
  nasm: osz-mem-1
-----
INSTRUCTION: o16 8F /0 | POP r/m16 | INTEL8086
  ops: w=rm | UInt16
  implied: pop-rm=2
  flags: sp=pop;2
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 8F /0 | POP r/m32 | INTEL386
  ops: w=rm | UInt32
  implied: pop-rm=4
  flags: 16 32 sp=pop;4
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 8F /0 | POP r/m64 | X64
  ops: w=rm | UInt64
  implied: pop-rm=8
  flags: 64 sp=pop;8 do64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 90 | NOP | INTEL8086
  code-mnemonic: nopw
  flags: nop
  gas: nop
  intel: nop
  masm: nop
  nasm: nop
-----
INSTRUCTION: o32 90 | NOP | INTEL8086
  code-mnemonic: nopd
  flags: nop
  gas: nop
  intel: nop
  masm: nop
  nasm: nop
-----
INSTRUCTION: o64 90 | NOP | INTEL8086
  code-mnemonic: nopq
  flags: 64 nop asm-ig
  gas: nop
  intel: nop
  masm: nop
  nasm: nop
-----
INSTRUCTION: o16 90+rw | XCHG r16, AX | INTEL8086
  ops: rw=opcode rw=r:ax
  gas: suffix=w
-----
INSTRUCTION: o32 90+rd | XCHG r32, EAX | INTEL386
  ops: rw=opcode rw=r:eax
  gas: suffix=l
-----
INSTRUCTION: o64 90+ro | XCHG r64, RAX | X64
  ops: rw=opcode rw=r:rax
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: F3 90 | PAUSE | PAUSE
  flags: intel-may-vm-exit amd-may-vm-exit tsx-abort
-----
INSTRUCTION: o16 98 | CBW | INTEL8086
  implied: r=al w=ah
  gas: mnemonic=cbtw
-----
INSTRUCTION: o32 98 | CWDE | INTEL386
  implied: r=ax w=eax
  gas: mnemonic=cwtl
-----
INSTRUCTION: o64 98 | CDQE | X64
  implied: rw=eax
  flags: 64
  gas: mnemonic=cltq
-----
INSTRUCTION: o16 99 | CWD | INTEL8086
  implied: r=ax w=dx
  gas: mnemonic=cwtd
-----
INSTRUCTION: o32 99 | CDQ | INTEL386
  implied: r=eax w=edx
  gas: mnemonic=cltd
-----
INSTRUCTION: o64 99 | CQO | X64
  implied: r=rax w=rdx
  flags: 64
  gas: mnemonic=cqto
-----
INSTRUCTION: o16 9A cd | CALL ptr16:16 | INTEL8086
  ops: r=br-far
  implied: push=2x2
  flags: 16 32 sp=push;4 br=call-far cflow=call intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort asm-ig
  gas: mnemonic=lcall suffix=w osz-suffix-4
  intel: flags=far osz
  nasm: far
-----
INSTRUCTION: o32 9A cp | CALL ptr16:32 | INTEL386
  ops: r=br-far
  implied: push=2x4
  flags: 16 32 sp=push;8 br=call-far cflow=call intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort asm-ig
  gas: mnemonic=lcall suffix=l osz-suffix-4
  intel: flags=far osz
  nasm: far
-----
INSTRUCTION: 9B | WAIT | INTEL8086
  flags: tsx-impl-abort
  gas: mnemonic=fwait
  intel: mnemonic=fwait
-----
INSTRUCTION: o16 9C | PUSHF | INTEL8086
  implied: push=1x2
  code-mnemonic: pushfw
  rflags: r=oszacpdi
  flags: sp=push;2 amd-may-vm-exit asm=pushf
  gas: osz-suffix-1
  nasm: osz-suffix-1
-----
INSTRUCTION: o32 9C | PUSHFD | INTEL386
  implied: push=1x4
  rflags: r=oszacpdiA
  flags: 16 32 sp=push;4 amd-may-vm-exit asm=pushfd
  gas: mnemonic=pushf osz-suffix-1
  nasm: mnemonic=pushf osz-suffix-1
-----
INSTRUCTION: o64 9C | PUSHFQ | X64
  implied: push=1x8
  rflags: r=oszacpdiA
  flags: 64 sp=push;8 do64 amd-may-vm-exit asm=pushfq
  gas: mnemonic=pushf osz-suffix-1
  nasm: mnemonic=pushf osz-suffix-1
-----
INSTRUCTION: o16 9D | POPF | INTEL8086
  implied: pop=1x2
  code-mnemonic: popfw
  rflags: w=oszacpdi
  flags: sp=pop;2 amd-may-vm-exit tsx-impl-abort asm=popf
  gas: osz-suffix-1
  nasm: osz-suffix-1
-----
INSTRUCTION: o32 9D | POPFD | INTEL386
  implied: pop=1x4
  rflags: w=oszacpdiA
  flags: 16 32 sp=pop;4 amd-may-vm-exit tsx-impl-abort asm=popfd
  gas: mnemonic=popf osz-suffix-1
  nasm: mnemonic=popf osz-suffix-1
-----
INSTRUCTION: o64 9D | POPFQ | X64
  implied: pop=1x8
  rflags: w=oszacpdiA
  flags: 64 sp=pop;8 do64 amd-may-vm-exit tsx-impl-abort asm=popfq
  gas: mnemonic=popf osz-suffix-1
  nasm: mnemonic=popf osz-suffix-1
-----
INSTRUCTION: 9E | SAHF | INTEL8086
  implied: r=ah
  rflags: w=szacp
-----
INSTRUCTION: 9F | LAHF | INTEL8086
  implied: w=ah
  rflags: r=szacp
-----
INSTRUCTION: A0 mo | MOV AL, moffs8 | INTEL8086
  ops: w=r:al r=moffs | UInt8
  gas: suffix=b movabs
  intel: movabs
  nasm: movabs
-----
INSTRUCTION: o16 A1 mo | MOV AX, moffs16 | INTEL8086
  ops: w=r:ax r=moffs | UInt16
  gas: suffix=w movabs
  intel: movabs
  nasm: movabs
-----
INSTRUCTION: o32 A1 mo | MOV EAX, moffs32 | INTEL386
  ops: w=r:eax r=moffs | UInt32
  gas: suffix=l movabs
  intel: movabs
  nasm: movabs
-----
INSTRUCTION: o64 A1 mo | MOV RAX, moffs64 | X64
  ops: w=r:rax r=moffs | UInt64
  flags: 64
  gas: suffix=q movabs
  intel: movabs
  nasm: movabs
-----
INSTRUCTION: A2 mo | MOV moffs8, AL | INTEL8086
  ops: w=moffs r=r:al | UInt8
  gas: suffix=b movabs
  intel: movabs
  nasm: movabs
-----
INSTRUCTION: o16 A3 mo | MOV moffs16, AX | INTEL8086
  ops: w=moffs r=r:ax | UInt16
  gas: suffix=w movabs
  intel: movabs
  nasm: movabs
-----
INSTRUCTION: o32 A3 mo | MOV moffs32, EAX | INTEL386
  ops: w=moffs r=r:eax | UInt32
  gas: suffix=l movabs
  intel: movabs
  nasm: movabs
-----
INSTRUCTION: o64 A3 mo | MOV moffs64, RAX | X64
  ops: w=moffs r=r:rax | UInt64
  flags: 64
  gas: suffix=q movabs
  intel: movabs
  nasm: movabs
-----
INSTRUCTION: A4 | MOVSB [m8], [m8] | INTEL8086
  ops: w=es-rdi r=seg-rsi | UInt8
  implied: movs
  rflags: r=d
  flags: rep is-string-op
  gas: mnemonic=movs flags=force-suffix suffix=b
  masm: mnemonic=movs asz-string-yx b
  nasm: asz-string
-----
INSTRUCTION: o16 A5 | MOVSW [m16], [m16] | INTEL8086
  ops: w=es-rdi r=seg-rsi | UInt16
  implied: movs
  rflags: r=d
  flags: rep is-string-op
  gas: mnemonic=movs flags=force-suffix suffix=w
  masm: mnemonic=movs asz-string-yx w
  nasm: asz-string
-----
INSTRUCTION: o32 A5 | MOVSD [m32], [m32] | INTEL386
  ops: w=es-rdi r=seg-rsi | UInt32
  implied: movs
  rflags: r=d
  flags: rep is-string-op
  gas: mnemonic=movs flags=force-suffix suffix=l
  masm: mnemonic=movs asz-string-yx d
  nasm: asz-string
-----
INSTRUCTION: o64 A5 | MOVSQ [m64], [m64] | X64
  ops: w=es-rdi r=seg-rsi | UInt64
  implied: movs
  rflags: r=d
  flags: 64 rep is-string-op
  gas: mnemonic=movs flags=force-suffix suffix=q
  masm: mnemonic=movs asz-string-yx q
  nasm: asz-string
-----
INSTRUCTION: A6 | CMPSB [m8], [m8] | INTEL8086
  ops: r=seg-rsi r=es-rdi | UInt8
  implied: cmps
  rflags: r=d w=oszacp
  flags: repe repne is-string-op
  gas: mnemonic=cmps flags=force-suffix suffix=b
  masm: mnemonic=cmps asz-string-xy b
  nasm: asz-string
-----
INSTRUCTION: o16 A7 | CMPSW [m16], [m16] | INTEL8086
  ops: r=seg-rsi r=es-rdi | UInt16
  implied: cmps
  rflags: r=d w=oszacp
  flags: repe repne is-string-op
  gas: mnemonic=cmps flags=force-suffix suffix=w
  masm: mnemonic=cmps asz-string-xy w
  nasm: asz-string
-----
INSTRUCTION: o32 A7 | CMPSD [m32], [m32] | INTEL386
  ops: r=seg-rsi r=es-rdi | UInt32
  implied: cmps
  rflags: r=d w=oszacp
  flags: repe repne is-string-op
  gas: mnemonic=cmps flags=force-suffix suffix=l
  masm: mnemonic=cmps asz-string-xy d
  nasm: asz-string
-----
INSTRUCTION: o64 A7 | CMPSQ [m64], [m64] | X64
  ops: r=seg-rsi r=es-rdi | UInt64
  implied: cmps
  rflags: r=d w=oszacp
  flags: 64 repe repne is-string-op
  gas: mnemonic=cmps flags=force-suffix suffix=q
  masm: mnemonic=cmps asz-string-xy q
  nasm: asz-string
-----
INSTRUCTION: A8 ib | TEST AL, imm8 | INTEL8086
  ops: r=r:al r=imm
  rflags: u=a w=szp 0=oc
  gas: suffix=b
-----
INSTRUCTION: o16 A9 iw | TEST AX, imm16 | INTEL8086
  ops: r=r:ax r=imm
  rflags: u=a w=szp 0=oc
  gas: suffix=w
-----
INSTRUCTION: o32 A9 id | TEST EAX, imm32 | INTEL386
  ops: r=r:eax r=imm
  rflags: u=a w=szp 0=oc
  gas: suffix=l
-----
INSTRUCTION: o64 A9 id | TEST RAX, imm32 | X64
  ops: r=r:rax r=imm;64
  rflags: u=a w=szp 0=oc
  flags: 64
  gas: suffix=q
  nasm: flags=no-sx sx
-----
INSTRUCTION: AA | STOSB [m8], [AL] | INTEL8086
  ops: w=es-rdi r=r:al | UInt8
  implied: stos
  rflags: r=d
  flags: rep is-string-op
  gas: mnemonic=stos suffix=b
  intel: ignore-last
  masm: mnemonic=stos asz-string-ya b
  nasm: asz-string
-----
INSTRUCTION: o16 AB | STOSW [m16], [AX] | INTEL8086
  ops: w=es-rdi r=r:ax | UInt16
  implied: stos
  rflags: r=d
  flags: rep is-string-op
  gas: mnemonic=stos suffix=w
  intel: ignore-last
  masm: mnemonic=stos asz-string-ya w
  nasm: asz-string
-----
INSTRUCTION: o32 AB | STOSD [m32], [EAX] | INTEL386
  ops: w=es-rdi r=r:eax | UInt32
  implied: stos
  rflags: r=d
  flags: rep is-string-op
  gas: mnemonic=stos suffix=l
  intel: ignore-last
  masm: mnemonic=stos asz-string-ya d
  nasm: asz-string
-----
INSTRUCTION: o64 AB | STOSQ [m64], [RAX] | X64
  ops: w=es-rdi r=r:rax | UInt64
  implied: stos
  rflags: r=d
  flags: 64 rep is-string-op
  gas: mnemonic=stos suffix=q
  intel: ignore-last
  masm: mnemonic=stos asz-string-ya q
  nasm: asz-string
-----
INSTRUCTION: AC | LODSB [AL], [m8] | INTEL8086
  ops: w=r:al r=seg-rsi | UInt8
  implied: lods
  rflags: r=d
  flags: rep is-string-op
  gas: mnemonic=lods suffix=b
  intel: ignore-first
  masm: mnemonic=lods asz-string-ax b
  nasm: asz-string
-----
INSTRUCTION: o16 AD | LODSW [AX], [m16] | INTEL8086
  ops: w=r:ax r=seg-rsi | UInt16
  implied: lods
  rflags: r=d
  flags: rep is-string-op
  gas: mnemonic=lods suffix=w
  intel: ignore-first
  masm: mnemonic=lods asz-string-ax w
  nasm: asz-string
-----
INSTRUCTION: o32 AD | LODSD [EAX], [m32] | INTEL386
  ops: w=r:eax r=seg-rsi | UInt32
  implied: lods
  rflags: r=d
  flags: rep is-string-op
  gas: mnemonic=lods suffix=l
  intel: ignore-first
  masm: mnemonic=lods asz-string-ax d
  nasm: asz-string
-----
INSTRUCTION: o64 AD | LODSQ [RAX], [m64] | X64
  ops: w=r:rax r=seg-rsi | UInt64
  implied: lods
  rflags: r=d
  flags: 64 rep is-string-op
  gas: mnemonic=lods suffix=q
  intel: ignore-first
  masm: mnemonic=lods asz-string-ax q
  nasm: asz-string
-----
INSTRUCTION: AE | SCASB [AL], [m8] | INTEL8086
  ops: r=r:al r=es-rdi | UInt8
  implied: scas
  rflags: r=d w=oszacp
  flags: repe repne is-string-op
  gas: mnemonic=scas suffix=b
  intel: ignore-first
  masm: mnemonic=scas asz-string-ay b
  nasm: asz-string
-----
INSTRUCTION: o16 AF | SCASW [AX], [m16] | INTEL8086
  ops: r=r:ax r=es-rdi | UInt16
  implied: scas
  rflags: r=d w=oszacp
  flags: repe repne is-string-op
  gas: mnemonic=scas suffix=w
  intel: ignore-first
  masm: mnemonic=scas asz-string-ay w
  nasm: asz-string
-----
INSTRUCTION: o32 AF | SCASD [EAX], [m32] | INTEL386
  ops: r=r:eax r=es-rdi | UInt32
  implied: scas
  rflags: r=d w=oszacp
  flags: repe repne is-string-op
  gas: mnemonic=scas suffix=l
  intel: ignore-first
  masm: mnemonic=scas asz-string-ay d
  nasm: asz-string
-----
INSTRUCTION: o64 AF | SCASQ [RAX], [m64] | X64
  ops: r=r:rax r=es-rdi | UInt64
  implied: scas
  rflags: r=d w=oszacp
  flags: 64 repe repne is-string-op
  gas: mnemonic=scas suffix=q
  intel: ignore-first
  masm: mnemonic=scas asz-string-ay q
  nasm: asz-string
-----
INSTRUCTION: B0+rb ib | MOV r8, imm8 | INTEL8086
  ops: w=opcode r=imm
  gas: suffix=b
-----
INSTRUCTION: o16 B8+rw iw | MOV r16, imm16 | INTEL8086
  ops: w=opcode r=imm
  gas: suffix=w
-----
INSTRUCTION: o32 B8+rd id | MOV r32, imm32 | INTEL386
  ops: w=opcode r=imm
  gas: suffix=l
-----
INSTRUCTION: o64 B8+ro io | MOV r64, imm64 | X64
  ops: w=opcode r=imm
  flags: 64
  gas: mnemonic=movabs suffix=q
-----
INSTRUCTION: C0 /0 ib | ROL r/m8, imm8 | INTEL186
  ops: rw=rm r=imm | UInt8
  implied: shift-mask=0x1F
  rflags: u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: C0 /1 ib | ROR r/m8, imm8 | INTEL186
  ops: rw=rm r=imm | UInt8
  implied: shift-mask=0x1F
  rflags: u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: C0 /2 ib | RCL r/m8, imm8 | INTEL186
  ops: rw=rm r=imm | UInt8
  implied: shift-mask-1F-mod=9
  rflags: r=c u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: C0 /3 ib | RCR r/m8, imm8 | INTEL186
  ops: rw=rm r=imm | UInt8
  implied: shift-mask-1F-mod=9
  rflags: r=c u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: C0 /4 ib | SHL r/m8, imm8 | INTEL186
  ops: rw=rm r=imm | UInt8
  implied: shift-mask=0x1F
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: C0 /5 ib | SHR r/m8, imm8 | INTEL186
  ops: rw=rm r=imm | UInt8
  implied: shift-mask=0x1F
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: C0 /6 ib | SAL r/m8, imm8 | INTEL186
  ops: rw=rm r=imm | UInt8
  implied: shift-mask=0x1F
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: mnemonic=shl flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: C0 /7 ib | SAR r/m8, imm8 | INTEL186
  ops: rw=rm r=imm | Int8
  implied: shift-mask=0x1F
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 C1 /0 ib | ROL r/m16, imm8 | INTEL186
  ops: rw=rm r=imm | UInt16
  implied: shift-mask=0x1F
  rflags: u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 C1 /0 ib | ROL r/m32, imm8 | INTEL386
  ops: rw=rm r=imm | UInt32
  implied: shift-mask=0x1F
  rflags: u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 C1 /0 ib | ROL r/m64, imm8 | X64
  ops: rw=rm r=imm | UInt64
  implied: shift-mask=0x3F
  rflags: u=o w=c
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 C1 /1 ib | ROR r/m16, imm8 | INTEL186
  ops: rw=rm r=imm | UInt16
  implied: shift-mask=0x1F
  rflags: u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 C1 /1 ib | ROR r/m32, imm8 | INTEL386
  ops: rw=rm r=imm | UInt32
  implied: shift-mask=0x1F
  rflags: u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 C1 /1 ib | ROR r/m64, imm8 | X64
  ops: rw=rm r=imm | UInt64
  implied: shift-mask=0x3F
  rflags: u=o w=c
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 C1 /2 ib | RCL r/m16, imm8 | INTEL186
  ops: rw=rm r=imm | UInt16
  implied: shift-mask-1F-mod=17
  rflags: r=c u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 C1 /2 ib | RCL r/m32, imm8 | INTEL386
  ops: rw=rm r=imm | UInt32
  implied: shift-mask=0x1F
  rflags: r=c u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 C1 /2 ib | RCL r/m64, imm8 | X64
  ops: rw=rm r=imm | UInt64
  implied: shift-mask=0x3F
  rflags: r=c u=o w=c
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 C1 /3 ib | RCR r/m16, imm8 | INTEL186
  ops: rw=rm r=imm | UInt16
  implied: shift-mask-1F-mod=17
  rflags: r=c u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 C1 /3 ib | RCR r/m32, imm8 | INTEL386
  ops: rw=rm r=imm | UInt32
  implied: shift-mask=0x1F
  rflags: r=c u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 C1 /3 ib | RCR r/m64, imm8 | X64
  ops: rw=rm r=imm | UInt64
  implied: shift-mask=0x3F
  rflags: r=c u=o w=c
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 C1 /4 ib | SHL r/m16, imm8 | INTEL186
  ops: rw=rm r=imm | UInt16
  implied: shift-mask=0x1F
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 C1 /4 ib | SHL r/m32, imm8 | INTEL386
  ops: rw=rm r=imm | UInt32
  implied: shift-mask=0x1F
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 C1 /4 ib | SHL r/m64, imm8 | X64
  ops: rw=rm r=imm | UInt64
  implied: shift-mask=0x3F
  rflags: u=oa w=szcp
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 C1 /5 ib | SHR r/m16, imm8 | INTEL186
  ops: rw=rm r=imm | UInt16
  implied: shift-mask=0x1F
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 C1 /5 ib | SHR r/m32, imm8 | INTEL386
  ops: rw=rm r=imm | UInt32
  implied: shift-mask=0x1F
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 C1 /5 ib | SHR r/m64, imm8 | X64
  ops: rw=rm r=imm | UInt64
  implied: shift-mask=0x3F
  rflags: u=oa w=szcp
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 C1 /6 ib | SAL r/m16, imm8 | INTEL186
  ops: rw=rm r=imm | UInt16
  implied: shift-mask=0x1F
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: mnemonic=shl flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 C1 /6 ib | SAL r/m32, imm8 | INTEL386
  ops: rw=rm r=imm | UInt32
  implied: shift-mask=0x1F
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: mnemonic=shl flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 C1 /6 ib | SAL r/m64, imm8 | X64
  ops: rw=rm r=imm | UInt64
  implied: shift-mask=0x3F
  rflags: u=oa w=szcp
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: mnemonic=shl flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 C1 /7 ib | SAR r/m16, imm8 | INTEL186
  ops: rw=rm r=imm | Int16
  implied: shift-mask=0x1F
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 C1 /7 ib | SAR r/m32, imm8 | INTEL386
  ops: rw=rm r=imm | Int32
  implied: shift-mask=0x1F
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 C1 /7 ib | SAR r/m64, imm8 | X64
  ops: rw=rm r=imm | Int64
  implied: shift-mask=0x3F
  rflags: u=oa w=szcp
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 C2 iw | RET imm16 | INTEL8086
  ops: r=imm
  implied: pop=1x2
  code-mnemonic: retnw
  flags: sp=pop_imm16;2 bnd cflow=ret no-intel-dec64
  gas: osz-suffix-2 ret retw retw
  intel: osz-bnd
  masm: osz-suffix-2 ret retw retw
  nasm: osz-suffix-2 ret retw retw
-----
INSTRUCTION: o32 C2 iw | RET imm16 | INTEL386
  ops: r=imm
  implied: pop=1x4
  code-mnemonic: retnd
  flags: 16 32 sp=pop_imm16;4 bnd cflow=ret
  gas: osz-suffix-2 retl ret retl
  intel: osz-bnd
  masm: osz-suffix-2 retnd ret retnd
  nasm: osz-suffix-2 retd ret retd
-----
INSTRUCTION: o64 C2 iw | RET imm16 | X64
  ops: r=imm
  implied: pop=1x8
  code-mnemonic: retnq
  flags: 64 sp=pop_imm16;8 bnd cflow=ret intel-fo64 do64
  gas: suffix=q bnd
  intel: bnd
  masm: bnd
  nasm: bnd
-----
INSTRUCTION: o16 C3 | RET | INTEL8086
  implied: pop=1x2
  code-mnemonic: retnw
  flags: sp=pop;2 bnd cflow=ret no-intel-dec64
  gas: osz-suffix-2 ret retw retw
  intel: osz-bnd
  masm: osz-suffix-2 ret retw retw
  nasm: osz-suffix-2 ret retw retw
-----
INSTRUCTION: o32 C3 | RET | INTEL386
  implied: pop=1x4
  code-mnemonic: retnd
  flags: 16 32 sp=pop;4 bnd cflow=ret
  gas: osz-suffix-2 retl ret retl
  intel: osz-bnd
  masm: osz-suffix-2 retnd ret retnd
  nasm: osz-suffix-2 retd ret retd
-----
INSTRUCTION: o64 C3 | RET | X64
  implied: pop=1x8
  code-mnemonic: retnq
  flags: 64 sp=pop;8 bnd cflow=ret intel-fo64 do64
  gas: suffix=q bnd
  intel: bnd
  masm: bnd
  nasm: bnd
-----
INSTRUCTION: o16 C4 /r | LES r16, m16:16 | INTEL8086
  ops: w=reg r=rm | SegPtr16
  implied: w=es
  code-memory-size: 1616
  flags: 16 32 no-in-sgx tsx-impl-abort
  gas: suffix=w
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: o32 C4 /r | LES r32, m16:32 | INTEL386
  ops: w=reg r=rm | SegPtr32
  implied: w=es
  code-memory-size: 1632
  flags: 16 32 no-in-sgx tsx-impl-abort
  gas: suffix=l
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: o16 C5 /r | LDS r16, m16:16 | INTEL8086
  ops: w=reg r=rm | SegPtr16
  implied: w=ds
  code-memory-size: 1616
  flags: 16 32 no-in-sgx tsx-impl-abort
  gas: suffix=w
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: o32 C5 /r | LDS r32, m16:32 | INTEL386
  ops: w=reg r=rm | SegPtr32
  implied: w=ds
  code-memory-size: 1632
  flags: 16 32 no-in-sgx tsx-impl-abort
  gas: suffix=l
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: C6 /0 ib | MOV r/m8, imm8 | INTEL8086
  ops: w=rm r=imm | UInt8
  flags: xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: C6 F8 ib | XABORT imm8 | RTM
  ops: r=imm
  flags: save-restore tsx-abort
-----
INSTRUCTION: o16 C7 /0 iw | MOV r/m16, imm16 | INTEL8086
  ops: w=rm r=imm | UInt16
  flags: xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 C7 /0 id | MOV r/m32, imm32 | INTEL386
  ops: w=rm r=imm | UInt32
  flags: xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 C7 /0 id | MOV r/m64, imm32 | X64
  ops: w=rm r=imm;64 | UInt64
  flags: 64 xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always sx2
-----
INSTRUCTION: o16 C7 F8 cw | XBEGIN rel16 | RTM
  ops: r=br-x
  implied: cw=eax
  flags: br=xbegin cflow=tsx tsx-may-abort
-----
INSTRUCTION: o32 C7 F8 cd | XBEGIN rel32 | RTM
  ops: r=br-x
  implied: cw=eax
  flags: br=xbegin cflow=tsx tsx-may-abort
-----
INSTRUCTION: o16 C8 iw ib | ENTER imm16, imm8 | INTEL186
  ops: r=imm r=imm
  implied: enter=2
  code-mnemonic: enterw
  flags: sp=enter;2
  gas: flags=keep-op-order suffix=w osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o32 C8 iw ib | ENTER imm16, imm8 | INTEL386
  ops: r=imm r=imm
  implied: enter=4
  code-mnemonic: enterd
  flags: 16 32 sp=enter;4
  gas: flags=keep-op-order suffix=l osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o64 C8 iw ib | ENTER imm16, imm8 | X64
  ops: r=imm r=imm
  implied: enter=8
  code-mnemonic: enterq
  flags: 64 sp=enter;8 do64
  gas: flags=keep-op-order suffix=q osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o16 C9 | LEAVE | INTEL186
  implied: leave=2
  code-mnemonic: leavew
  flags: stack
  gas: suffix=w osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o32 C9 | LEAVE | INTEL386
  implied: leave=4
  code-mnemonic: leaved
  flags: 16 32 stack
  gas: suffix=l osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o64 C9 | LEAVE | X64
  implied: leave=8
  code-mnemonic: leaveq
  flags: 64 stack do64
  gas: suffix=q osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o16 CA iw | RETF imm16 | INTEL8086
  ops: r=imm
  implied: pop=2x2
  code-mnemonic: retfw
  flags: sp=pop_imm16;4 cflow=ret no-in-sgx tsx-impl-abort
  gas: mnemonic=lret suffix=w osz-suffix-3 16
  intel: mnemonic=ret flags=far osz
  masm: osz-suffix-2 retf retfw retfw
  nasm: osz-suffix-3
-----
INSTRUCTION: o32 CA iw | RETF imm16 | INTEL386
  ops: r=imm
  implied: pop=2x4
  code-mnemonic: retfd
  flags: sp=pop_imm16;8 cflow=ret no-in-sgx tsx-impl-abort
  gas: mnemonic=lret suffix=l osz-suffix-3 32
  intel: mnemonic=ret flags=far osz
  masm: osz-suffix-2 retfd retf retf
  nasm: osz-suffix-3
-----
INSTRUCTION: o64 CA iw | RETF imm16 | X64
  ops: r=imm
  implied: pop=2x8
  code-mnemonic: retfq
  flags: 64 sp=pop_imm16;16 cflow=ret no-in-sgx tsx-impl-abort
  fast: mnemonic=retfq
  gas: mnemonic=lret suffix=q osz-suffix-3 0
  intel: mnemonic=ret flags=far;o64
  masm: mnemonic=retfq osz-suffix-2 retf retf retfq
  nasm: osz-suffix-3
-----
INSTRUCTION: o16 CB | RETF | INTEL8086
  implied: pop=2x2
  code-mnemonic: retfw
  flags: sp=pop;4 cflow=ret no-in-sgx tsx-impl-abort
  gas: mnemonic=lret suffix=w osz-suffix-3 16
  intel: mnemonic=ret flags=far osz
  masm: osz-suffix-2 retf retfw retfw
  nasm: osz-suffix-3
-----
INSTRUCTION: o32 CB | RETF | INTEL386
  implied: pop=2x4
  code-mnemonic: retfd
  flags: sp=pop;8 cflow=ret no-in-sgx tsx-impl-abort
  gas: mnemonic=lret suffix=l osz-suffix-3 32
  intel: mnemonic=ret flags=far osz
  masm: osz-suffix-2 retfd retf retf
  nasm: osz-suffix-3
-----
INSTRUCTION: o64 CB | RETF | X64
  implied: pop=2x8
  code-mnemonic: retfq
  flags: 64 sp=pop;16 cflow=ret no-in-sgx tsx-impl-abort
  fast: mnemonic=retfq
  gas: mnemonic=lret suffix=q osz-suffix-3 0
  intel: mnemonic=ret flags=far;o64
  masm: mnemonic=retfq osz-suffix-2 retf retf retfq
  nasm: osz-suffix-3
-----
INSTRUCTION: CC | INT3 | INTEL8086
  flags: cflow=int intel-vm-exit amd-may-vm-exit tsx-abort asm=int3
  masm: mnemonic=int int3
-----
INSTRUCTION: CD ib | INT imm8 | INTEL8086
  ops: r=imm
  flags: cflow=int intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: CE | INTO | INTEL8086
  rflags: r=o
  flags: 16 32 cflow=int intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: o16 CF | IRET | INTEL8086
  implied: pop;!64=3x2 pop;64=5x2 w;64=ss
  code-mnemonic: iretw
  rflags: w=oszacpdi
  flags: sp=iret;2 cflow=ret serialize-intel serialize-amd intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort asm=iret
  gas: suffix=w osz-suffix-3 16
  nasm: osz-suffix-3
-----
INSTRUCTION: o32 CF | IRETD | INTEL386
  implied: pop;!64=3x4 pop;64=5x4 w;64=ss
  rflags: w=oszacpdiA
  flags: sp=iret;4 cflow=ret serialize-intel serialize-amd intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort asm=iretd
  gas: mnemonic=iret suffix=l osz-suffix-3 32
  nasm: mnemonic=iret osz-suffix-3
-----
INSTRUCTION: o64 CF | IRETQ | X64
  implied: pop=5x8 w=ss
  rflags: w=oszacpdiA
  flags: 64 sp=pop;40 cflow=ret serialize-intel serialize-amd intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort asm=iretq
  gas: mnemonic=iret suffix=q osz-suffix-3 0
  nasm: mnemonic=iret osz-suffix-3
-----
INSTRUCTION: D0 /0 | ROL r/m8, 1 | INTEL8086
  ops: rw=rm r=c:1 | UInt8
  rflags: w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D0 /1 | ROR r/m8, 1 | INTEL8086
  ops: rw=rm r=c:1 | UInt8
  rflags: w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D0 /2 | RCL r/m8, 1 | INTEL8086
  ops: rw=rm r=c:1 | UInt8
  rflags: r=c w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D0 /3 | RCR r/m8, 1 | INTEL8086
  ops: rw=rm r=c:1 | UInt8
  rflags: r=c w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D0 /4 | SHL r/m8, 1 | INTEL8086
  ops: rw=rm r=c:1 | UInt8
  rflags: u=a w=oszcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D0 /5 | SHR r/m8, 1 | INTEL8086
  ops: rw=rm r=c:1 | UInt8
  rflags: u=a w=oszcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D0 /6 | SAL r/m8, 1 | INTEL8086
  ops: rw=rm r=c:1 | UInt8
  rflags: u=a w=oszcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: mnemonic=shl flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D0 /7 | SAR r/m8, 1 | INTEL8086
  ops: rw=rm r=c:1 | Int8
  rflags: u=a w=oszcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D1 /0 | ROL r/m16, 1 | INTEL8086
  ops: rw=rm r=c:1 | UInt16
  rflags: w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 D1 /0 | ROL r/m32, 1 | INTEL386
  ops: rw=rm r=c:1 | UInt32
  rflags: w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 D1 /0 | ROL r/m64, 1 | X64
  ops: rw=rm r=c:1 | UInt64
  rflags: w=oc
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D1 /1 | ROR r/m16, 1 | INTEL8086
  ops: rw=rm r=c:1 | UInt16
  rflags: w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 D1 /1 | ROR r/m32, 1 | INTEL386
  ops: rw=rm r=c:1 | UInt32
  rflags: w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 D1 /1 | ROR r/m64, 1 | X64
  ops: rw=rm r=c:1 | UInt64
  rflags: w=oc
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D1 /2 | RCL r/m16, 1 | INTEL8086
  ops: rw=rm r=c:1 | UInt16
  rflags: r=c w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 D1 /2 | RCL r/m32, 1 | INTEL386
  ops: rw=rm r=c:1 | UInt32
  rflags: r=c w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 D1 /2 | RCL r/m64, 1 | X64
  ops: rw=rm r=c:1 | UInt64
  rflags: r=c w=oc
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D1 /3 | RCR r/m16, 1 | INTEL8086
  ops: rw=rm r=c:1 | UInt16
  rflags: r=c w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 D1 /3 | RCR r/m32, 1 | INTEL386
  ops: rw=rm r=c:1 | UInt32
  rflags: r=c w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 D1 /3 | RCR r/m64, 1 | X64
  ops: rw=rm r=c:1 | UInt64
  rflags: r=c w=oc
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D1 /4 | SHL r/m16, 1 | INTEL8086
  ops: rw=rm r=c:1 | UInt16
  rflags: u=a w=oszcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 D1 /4 | SHL r/m32, 1 | INTEL386
  ops: rw=rm r=c:1 | UInt32
  rflags: u=a w=oszcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 D1 /4 | SHL r/m64, 1 | X64
  ops: rw=rm r=c:1 | UInt64
  rflags: u=a w=oszcp
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D1 /5 | SHR r/m16, 1 | INTEL8086
  ops: rw=rm r=c:1 | UInt16
  rflags: u=a w=oszcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 D1 /5 | SHR r/m32, 1 | INTEL386
  ops: rw=rm r=c:1 | UInt32
  rflags: u=a w=oszcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 D1 /5 | SHR r/m64, 1 | X64
  ops: rw=rm r=c:1 | UInt64
  rflags: u=a w=oszcp
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D1 /6 | SAL r/m16, 1 | INTEL8086
  ops: rw=rm r=c:1 | UInt16
  rflags: u=a w=oszcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: mnemonic=shl flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 D1 /6 | SAL r/m32, 1 | INTEL386
  ops: rw=rm r=c:1 | UInt32
  rflags: u=a w=oszcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: mnemonic=shl flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 D1 /6 | SAL r/m64, 1 | X64
  ops: rw=rm r=c:1 | UInt64
  rflags: u=a w=oszcp
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: mnemonic=shl flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D1 /7 | SAR r/m16, 1 | INTEL8086
  ops: rw=rm r=c:1 | Int16
  rflags: u=a w=oszcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 D1 /7 | SAR r/m32, 1 | INTEL386
  ops: rw=rm r=c:1 | Int32
  rflags: u=a w=oszcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 D1 /7 | SAR r/m64, 1 | X64
  ops: rw=rm r=c:1 | Int64
  rflags: u=a w=oszcp
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D2 /0 | ROL r/m8, CL | INTEL8086
  ops: rw=rm r=r:cl | UInt8
  rflags: u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D2 /1 | ROR r/m8, CL | INTEL8086
  ops: rw=rm r=r:cl | UInt8
  rflags: u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D2 /2 | RCL r/m8, CL | INTEL8086
  ops: rw=rm r=r:cl | UInt8
  rflags: r=c u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D2 /3 | RCR r/m8, CL | INTEL8086
  ops: rw=rm r=r:cl | UInt8
  rflags: r=c u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D2 /4 | SHL r/m8, CL | INTEL8086
  ops: rw=rm r=r:cl | UInt8
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D2 /5 | SHR r/m8, CL | INTEL8086
  ops: rw=rm r=r:cl | UInt8
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D2 /6 | SAL r/m8, CL | INTEL8086
  ops: rw=rm r=r:cl | UInt8
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: mnemonic=shl flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D2 /7 | SAR r/m8, CL | INTEL8086
  ops: rw=rm r=r:cl | Int8
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D3 /0 | ROL r/m16, CL | INTEL8086
  ops: rw=rm r=r:cl | UInt16
  rflags: u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 D3 /0 | ROL r/m32, CL | INTEL386
  ops: rw=rm r=r:cl | UInt32
  rflags: u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 D3 /0 | ROL r/m64, CL | X64
  ops: rw=rm r=r:cl | UInt64
  rflags: u=o w=c
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D3 /1 | ROR r/m16, CL | INTEL8086
  ops: rw=rm r=r:cl | UInt16
  rflags: u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 D3 /1 | ROR r/m32, CL | INTEL386
  ops: rw=rm r=r:cl | UInt32
  rflags: u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 D3 /1 | ROR r/m64, CL | X64
  ops: rw=rm r=r:cl | UInt64
  rflags: u=o w=c
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D3 /2 | RCL r/m16, CL | INTEL8086
  ops: rw=rm r=r:cl | UInt16
  rflags: r=c u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 D3 /2 | RCL r/m32, CL | INTEL386
  ops: rw=rm r=r:cl | UInt32
  rflags: r=c u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 D3 /2 | RCL r/m64, CL | X64
  ops: rw=rm r=r:cl | UInt64
  rflags: r=c u=o w=c
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D3 /3 | RCR r/m16, CL | INTEL8086
  ops: rw=rm r=r:cl | UInt16
  rflags: r=c u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 D3 /3 | RCR r/m32, CL | INTEL386
  ops: rw=rm r=r:cl | UInt32
  rflags: r=c u=o w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 D3 /3 | RCR r/m64, CL | X64
  ops: rw=rm r=r:cl | UInt64
  rflags: r=c u=o w=c
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D3 /4 | SHL r/m16, CL | INTEL8086
  ops: rw=rm r=r:cl | UInt16
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 D3 /4 | SHL r/m32, CL | INTEL386
  ops: rw=rm r=r:cl | UInt32
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 D3 /4 | SHL r/m64, CL | X64
  ops: rw=rm r=r:cl | UInt64
  rflags: u=oa w=szcp
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D3 /5 | SHR r/m16, CL | INTEL8086
  ops: rw=rm r=r:cl | UInt16
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 D3 /5 | SHR r/m32, CL | INTEL386
  ops: rw=rm r=r:cl | UInt32
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 D3 /5 | SHR r/m64, CL | X64
  ops: rw=rm r=r:cl | UInt64
  rflags: u=oa w=szcp
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D3 /6 | SAL r/m16, CL | INTEL8086
  ops: rw=rm r=r:cl | UInt16
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: mnemonic=shl flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 D3 /6 | SAL r/m32, CL | INTEL386
  ops: rw=rm r=r:cl | UInt32
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: mnemonic=shl flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 D3 /6 | SAL r/m64, CL | X64
  ops: rw=rm r=r:cl | UInt64
  rflags: u=oa w=szcp
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: mnemonic=shl flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D3 /7 | SAR r/m16, CL | INTEL8086
  ops: rw=rm r=r:cl | Int16
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 D3 /7 | SAR r/m32, CL | INTEL386
  ops: rw=rm r=r:cl | Int32
  rflags: u=oa w=szcp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 D3 /7 | SAR r/m64, CL | X64
  ops: rw=rm r=r:cl | Int64
  rflags: u=oa w=szcp
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D4 ib | AAM imm8 | INTEL8086
  ops: r=imm
  implied: r=al w=ax
  rflags: u=oac w=szp
  flags: 16 32
  gas: ignore-const10
  masm: ignore-const10
  nasm: ignore-const10
-----
INSTRUCTION: D5 ib | AAD imm8 | INTEL8086
  ops: r=imm
  implied: rw=ax
  rflags: u=oac w=szp
  flags: 16 32
  gas: ignore-const10
  masm: ignore-const10
  nasm: ignore-const10
-----
INSTRUCTION: D6 | SALC | INTEL8086
  implied: w=al
  rflags: r=c
  flags: 16 32
-----
INSTRUCTION: D7 | XLATB [m8] | INTEL8086
  ops: r=seg-rbx-al | UInt8
  implied: rw=al
  code-mnemonic: xlat
  flags: asm-ig
  fast: mnemonic=xlat
  gas: mnemonic=xlat flags=ignore-index suffix=b
  intel: mnemonic=xlat flags=ignore-index
  masm: mnemonic=xlat xlat
  nasm: xlat
-----
INSTRUCTION: D8 /0 | FADD m32fp | FPU
  ops: r=rm | Float32
  implied: rw=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D8 /1 | FMUL m32fp | FPU
  ops: r=rm | Float32
  implied: rw=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D8 /2 | FCOM m32fp | FPU
  ops: r=rm | Float32
  implied: r=st0
  code-memory-size-suffix: fp
  rflags: 0=1 w=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D8 /3 | FCOMP m32fp | FPU
  ops: r=rm | Float32
  implied: r=st0
  code-memory-size-suffix: fp
  rflags: 0=1 w=023
  flags: fpu-pop=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D8 /4 | FSUB m32fp | FPU
  ops: r=rm | Float32
  implied: rw=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D8 /5 | FSUBR m32fp | FPU
  ops: r=rm | Float32
  implied: rw=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D8 /6 | FDIV m32fp | FPU
  ops: r=rm | Float32
  implied: rw=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D8 /7 | FDIVR m32fp | FPU
  ops: r=rm | Float32
  implied: rw=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D8 C0+i | FADD ST(0), ST(i) | FPU
  ops: rw=r:st0 r=opcode
  rflags: w=1 u=023
  flags: tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: D8 C8+i | FMUL ST(0), ST(i) | FPU
  ops: rw=r:st0 r=opcode
  rflags: w=1 u=023
  flags: tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: D8 D0+i | FCOM [ST(0)], ST(i) | FPU
  ops: r=r:st0 r=opcode
  rflags: 0=1 w=023
  flags: tsx-impl-abort
  gas: st1-ignore-st1 pseudo
  intel: st1 pseudo
  masm: st1-ignore-st1 pseudo
  nasm: st1 pseudo
-----
INSTRUCTION: D8 D8+i | FCOMP [ST(0)], ST(i) | FPU
  ops: r=r:st0 r=opcode
  rflags: 0=1 w=023
  flags: fpu-pop=1 tsx-impl-abort
  gas: st1-ignore-st1 pseudo
  intel: st1 pseudo
  masm: st1-ignore-st1 pseudo
  nasm: st1 pseudo
-----
INSTRUCTION: D8 E0+i | FSUB ST(0), ST(i) | FPU
  ops: rw=r:st0 r=opcode
  rflags: w=1 u=023
  flags: tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: D8 E8+i | FSUBR ST(0), ST(i) | FPU
  ops: rw=r:st0 r=opcode
  rflags: w=1 u=023
  flags: tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: D8 F0+i | FDIV ST(0), ST(i) | FPU
  ops: rw=r:st0 r=opcode
  rflags: w=1 u=023
  flags: tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: D8 F8+i | FDIVR ST(0), ST(i) | FPU
  ops: rw=r:st0 r=opcode
  rflags: w=1 u=023
  flags: tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: D9 /0 | FLD m32fp | FPU
  ops: r=rm | Float32
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: fpu-push=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1 load
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D9 /2 | FST m32fp | FPU
  ops: w=rm | Float32
  implied: r=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st2
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: D9 /3 | FSTP m32fp | FPU
  ops: w=rm | Float32
  implied: r=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st2
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 D9 /4 | FLDENV m14byte | FPU
  ops: r=rm | FpuEnv14
  code-memory-size: 14byte
  rflags: w=0123
  flags: writes-fpu-top tsx-impl-abort
  fast: flags=force-size=always
  gas: suffix=s osz-mem-2
  intel: osz-mem-2 16
  masm: osz-mem-2 16
  nasm: flags=mem-size=ignore osz-mem-2
-----
INSTRUCTION: o32 D9 /4 | FLDENV m28byte | FPU387
  ops: r=rm | FpuEnv28
  code-memory-size: 28byte
  rflags: w=0123
  flags: writes-fpu-top tsx-impl-abort
  fast: flags=force-size=always
  gas: suffix=l osz-mem-2
  intel: osz-mem-2
  masm: osz-mem-2
  nasm: flags=mem-size=ignore osz-mem-2
-----
INSTRUCTION: D9 /5 | FLDCW m2byte | FPU
  ops: r=rm | UInt16
  code-memory-size: 2byte
  rflags: u=0123
  flags: tsx-impl-abort
  gas: suffix=w
-----
INSTRUCTION: o16 D9 /6 | FNSTENV m14byte | FPU
  ops: w=rm | FpuEnv14
  code-memory-size: 14byte
  rflags: r=0123 u=0123
  flags: tsx-impl-abort no-wait
  fast: flags=force-size=always
  gas: suffix=s osz-mem-2
  intel: osz-mem-2 16
  masm: osz-mem-2 16
  nasm: flags=mem-size=ignore osz-mem-2
-----
INSTRUCTION: 9B o16 D9 /6 | FSTENV m14byte | FPU
  ops: w=rm | FpuEnv14
  code-memory-size: 14byte
  rflags: r=0123 u=0123
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: suffix=s osz-mem-2
  intel: osz-mem-2 16
  masm: osz-mem-2 16
  nasm: flags=mem-size=ignore osz-mem-2
-----
INSTRUCTION: o32 D9 /6 | FNSTENV m28byte | FPU387
  ops: w=rm | FpuEnv28
  code-memory-size: 28byte
  rflags: r=0123 u=0123
  flags: tsx-impl-abort no-wait
  fast: flags=force-size=always
  gas: suffix=l osz-mem-2
  intel: osz-mem-2
  masm: osz-mem-2
  nasm: flags=mem-size=ignore osz-mem-2
-----
INSTRUCTION: 9B o32 D9 /6 | FSTENV m28byte | FPU387
  ops: w=rm | FpuEnv28
  code-memory-size: 28byte
  rflags: r=0123 u=0123
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: suffix=l osz-mem-2
  intel: osz-mem-2
  masm: osz-mem-2
  nasm: flags=mem-size=ignore osz-mem-2
-----
INSTRUCTION: D9 /7 | FNSTCW m2byte | FPU
  ops: w=rm | UInt16
  code-memory-size: 2byte
  rflags: u=0123
  flags: tsx-impl-abort no-wait
  gas: suffix=w
-----
INSTRUCTION: 9B D9 /7 | FSTCW m2byte | FPU
  ops: w=rm | UInt16
  code-memory-size: 2byte
  rflags: u=0123
  flags: tsx-impl-abort
  gas: suffix=w
-----
INSTRUCTION: D9 C0+i | FLD ST(i) | FPU
  ops: r=opcode
  rflags: w=1 u=023
  flags: fpu-push=1 tsx-impl-abort
  intel: add-st1 load
-----
INSTRUCTION: D9 C8+i | FXCH [ST(0)], ST(i) | FPU
  ops: rw=r:st0 rw=opcode
  rflags: 0=1 u=023
  flags: tsx-impl-abort
  gas: st1-ignore-st1 pseudo
  intel: st1 pseudo
  masm: st1-ignore-st1 pseudo
  nasm: st1 pseudo
-----
INSTRUCTION: D9 D0 | FNOP | FPU
  flags: tsx-impl-abort
-----
INSTRUCTION: D9 D8+i | FSTPNCE ST(i) | FPU
  ops: w=opcode
  implied: r=st0
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  fast: mnemonic=fstp
  gas: mnemonic=fstp
  intel: add-st2
  masm: mnemonic=fstp
-----
INSTRUCTION: D9 E0 | FCHS | FPU
  implied: rw=st0
  rflags: 0=1 u=023
  flags: tsx-impl-abort
-----
INSTRUCTION: D9 E1 | FABS | FPU
  implied: rw=st0
  rflags: 0=1 u=023
  flags: tsx-impl-abort
-----
INSTRUCTION: D9 E4 | FTST | FPU
  implied: r=st0
  rflags: 0=1 w=023
  flags: tsx-impl-abort
-----
INSTRUCTION: D9 E5 | FXAM | FPU
  implied: r=st0
  rflags: w=0123
  flags: tsx-impl-abort
-----
INSTRUCTION: D9 E8 | FLD1 | FPU
  rflags: w=1 u=023
  flags: fpu-push=1 tsx-impl-abort
-----
INSTRUCTION: D9 E9 | FLDL2T | FPU
  rflags: w=1 u=023
  flags: fpu-push=1 tsx-impl-abort
-----
INSTRUCTION: D9 EA | FLDL2E | FPU
  rflags: w=1 u=023
  flags: fpu-push=1 tsx-impl-abort
-----
INSTRUCTION: D9 EB | FLDPI | FPU
  rflags: w=1 u=023
  flags: fpu-push=1 tsx-impl-abort
-----
INSTRUCTION: D9 EC | FLDLG2 | FPU
  rflags: w=1 u=023
  flags: fpu-push=1 tsx-impl-abort
-----
INSTRUCTION: D9 ED | FLDLN2 | FPU
  rflags: w=1 u=023
  flags: fpu-push=1 tsx-impl-abort
-----
INSTRUCTION: D9 EE | FLDZ | FPU
  rflags: w=1 u=023
  flags: fpu-push=1 tsx-impl-abort
-----
INSTRUCTION: D9 F0 | F2XM1 | FPU
  implied: rw=st0
  rflags: w=1 u=023
  flags: tsx-impl-abort
-----
INSTRUCTION: D9 F1 | FYL2X | FPU
  implied: r=st0 rw=st1
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
-----
INSTRUCTION: D9 F2 | FPTAN | FPU
  implied: rcw=st0
  rflags: w=12 u=03
  flags: fpu-cond-push=1 tsx-impl-abort
-----
INSTRUCTION: D9 F3 | FPATAN | FPU
  implied: r=st0 rw=st1
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
-----
INSTRUCTION: D9 F4 | FXTRACT | FPU
  implied: rw=st0
  rflags: w=1 u=023
  flags: fpu-push=1 tsx-impl-abort
-----
INSTRUCTION: D9 F5 | FPREM1 | FPU387
  implied: rw=st0 r=st1
  rflags: w=0123
  flags: tsx-impl-abort
-----
INSTRUCTION: D9 F6 | FDECSTP | FPU
  rflags: 0=1 u=023
  flags: fpu-stack=-1 tsx-impl-abort
-----
INSTRUCTION: D9 F7 | FINCSTP | FPU
  rflags: 0=1 u=023
  flags: fpu-stack=1 tsx-impl-abort
-----
INSTRUCTION: D9 F8 | FPREM | FPU
  implied: rw=st0 r=st1
  rflags: w=0123
  flags: tsx-impl-abort
-----
INSTRUCTION: D9 F9 | FYL2XP1 | FPU
  implied: r=st0 rw=st1
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
-----
INSTRUCTION: D9 FA | FSQRT | FPU
  implied: rw=st0
  rflags: w=1 u=023
  flags: tsx-impl-abort
-----
INSTRUCTION: D9 FB | FSINCOS | FPU387
  implied: rcw=st0
  rflags: w=12 u=03
  flags: fpu-cond-push=1 tsx-impl-abort
-----
INSTRUCTION: D9 FC | FRNDINT | FPU
  implied: rw=st0
  rflags: w=1 u=023
  flags: tsx-impl-abort
-----
INSTRUCTION: D9 FD | FSCALE | FPU
  implied: rw=st0 r=st1
  rflags: w=1 u=023
  flags: tsx-impl-abort
-----
INSTRUCTION: D9 FE | FSIN | FPU387
  implied: rcw=st0
  rflags: w=12 u=03
  flags: tsx-impl-abort
-----
INSTRUCTION: D9 FF | FCOS | FPU387
  implied: rcw=st0
  rflags: w=12 u=03
  flags: tsx-impl-abort
-----
INSTRUCTION: DA /0 | FIADD m32int | FPU
  ops: r=rm | Int32
  implied: rw=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DA /1 | FIMUL m32int | FPU
  ops: r=rm | Int32
  implied: rw=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DA /2 | FICOM m32int | FPU
  ops: r=rm | Int32
  implied: r=st0
  code-memory-size-suffix: int
  rflags: 0=1 w=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DA /3 | FICOMP m32int | FPU
  ops: r=rm | Int32
  implied: r=st0
  code-memory-size-suffix: int
  rflags: 0=1 w=023
  flags: fpu-pop=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DA /4 | FISUB m32int | FPU
  ops: r=rm | Int32
  implied: rw=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DA /5 | FISUBR m32int | FPU
  ops: r=rm | Int32
  implied: rw=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DA /6 | FIDIV m32int | FPU
  ops: r=rm | Int32
  implied: rw=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DA /7 | FIDIVR m32int | FPU
  ops: r=rm | Int32
  implied: rw=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DA C0+i | FCMOVB ST(0), ST(i) | FPU CMOV
  ops: cw=r:st0 cr=opcode
  rflags: r=c 0=1 u=023
  flags: tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: DA C8+i | FCMOVE ST(0), ST(i) | FPU CMOV
  ops: cw=r:st0 cr=opcode
  rflags: r=z 0=1 u=023
  flags: tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: DA D0+i | FCMOVBE ST(0), ST(i) | FPU CMOV
  ops: cw=r:st0 cr=opcode
  rflags: r=zc 0=1 u=023
  flags: tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: DA D8+i | FCMOVU ST(0), ST(i) | FPU CMOV
  ops: cw=r:st0 cr=opcode
  rflags: r=p 0=1 u=023
  flags: tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: DA E9 | FUCOMPP | FPU387
  implied: r=st0;st1
  rflags: 0=1 w=023
  flags: fpu-pop=2 tsx-impl-abort
-----
INSTRUCTION: DB /0 | FILD m32int | FPU
  ops: r=rm | Int32
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: fpu-push=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1 load
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DB /1 | FISTTP m32int | FPU SSE3
  ops: w=rm | Int32
  implied: r=st0
  code-memory-size-suffix: int
  rflags: 0=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st2
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DB /2 | FIST m32int | FPU
  ops: w=rm | Int32
  implied: r=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st2
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DB /3 | FISTP m32int | FPU
  ops: w=rm | Int32
  implied: r=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st2
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DB /5 | FLD m80fp | FPU
  ops: r=rm | Float80
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: fpu-push=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=t
  intel: flags=force-size=always add-st1 load
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DB /7 | FSTP m80fp | FPU
  ops: w=rm | Float80
  implied: r=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=t
  intel: flags=force-size=always add-st2
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DB C0+i | FCMOVNB ST(0), ST(i) | FPU CMOV
  ops: cw=r:st0 cr=opcode
  rflags: r=c 0=1 u=023
  flags: tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: DB C8+i | FCMOVNE ST(0), ST(i) | FPU CMOV
  ops: cw=r:st0 cr=opcode
  rflags: r=z 0=1 u=023
  flags: tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: DB D0+i | FCMOVNBE ST(0), ST(i) | FPU CMOV
  ops: cw=r:st0 cr=opcode
  rflags: r=zc 0=1 u=023
  flags: tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: DB D8+i | FCMOVNU ST(0), ST(i) | FPU CMOV
  ops: cw=r:st0 cr=opcode
  rflags: r=p 0=1 u=023
  flags: tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: DB E0 | FNENI | FPU
  flags: tsx-impl-abort no-wait
-----
INSTRUCTION: 9B DB E0 | FENI | FPU
  flags: tsx-impl-abort
-----
INSTRUCTION: DB E1 | FNDISI | FPU
  flags: tsx-impl-abort no-wait
-----
INSTRUCTION: 9B DB E1 | FDISI | FPU
  flags: tsx-impl-abort
-----
INSTRUCTION: DB E2 | FNCLEX | FPU
  rflags: u=0123
  flags: tsx-impl-abort no-wait
-----
INSTRUCTION: 9B DB E2 | FCLEX | FPU
  rflags: u=0123
  flags: tsx-impl-abort
-----
INSTRUCTION: DB E3 | FNINIT | FPU
  rflags: 0=0123
  flags: writes-fpu-top tsx-impl-abort no-wait
-----
INSTRUCTION: 9B DB E3 | FINIT | FPU
  rflags: 0=0123
  flags: writes-fpu-top tsx-impl-abort
-----
INSTRUCTION: DB E4 | FNSETPM | FPU287
  flags: tsx-impl-abort no-wait
-----
INSTRUCTION: 9B DB E4 | FSETPM | FPU287
  flags: tsx-impl-abort
-----
INSTRUCTION: DB E5 | FRSTPM | FPU287XL_ONLY
  #TODO: assume c0,c1,c2,c3 == undefined
  rflags: u=0123
  flags: 16 32 dec-opt=OldFpu tsx-impl-abort
-----
INSTRUCTION: DB E8+i | FUCOMI ST, ST(i) | FPU CMOV
  ops: r=r:st0 r=opcode
  rflags: w=zcp 0=osa 0=1
  flags: tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: DB F0+i | FCOMI ST, ST(i) | FPU CMOV
  ops: r=r:st0 r=opcode
  rflags: w=zcp 0=osa 0=1
  flags: tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: DC /0 | FADD m64fp | FPU
  ops: r=rm | Float64
  implied: rw=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DC /1 | FMUL m64fp | FPU
  ops: r=rm | Float64
  implied: rw=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DC /2 | FCOM m64fp | FPU
  ops: r=rm | Float64
  implied: r=st0
  code-memory-size-suffix: fp
  rflags: 0=1 w=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DC /3 | FCOMP m64fp | FPU
  ops: r=rm | Float64
  implied: r=st0
  code-memory-size-suffix: fp
  rflags: 0=1 w=023
  flags: fpu-pop=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DC /4 | FSUB m64fp | FPU
  ops: r=rm | Float64
  implied: rw=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DC /5 | FSUBR m64fp | FPU
  ops: r=rm | Float64
  implied: rw=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DC /6 | FDIV m64fp | FPU
  ops: r=rm | Float64
  implied: rw=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DC /7 | FDIVR m64fp | FPU
  ops: r=rm | Float64
  implied: rw=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DC C0+i | FADD ST(i), ST(0) | FPU
  ops: rw=opcode r=r:st0
  rflags: w=1 u=023
  flags: tsx-impl-abort
  gas: st2
  intel: st2
  masm: st2
  nasm: st2 to
-----
INSTRUCTION: DC C8+i | FMUL ST(i), ST(0) | FPU
  ops: rw=opcode r=r:st0
  rflags: w=1 u=023
  flags: tsx-impl-abort
  gas: st2
  intel: st2
  masm: st2
  nasm: st2 to
-----
INSTRUCTION: DC D0+i | FCOM [ST(0)], ST(i) | FPU
  ops: r=r:st0 r=opcode
  code-suffix: DCD0
  rflags: 0=1 w=023
  flags: tsx-impl-abort asm-ig
  gas: st1-ignore-st1 pseudo
  intel: st1 pseudo
  masm: st1-ignore-st1 pseudo
  nasm: st1 pseudo
-----
INSTRUCTION: DC D8+i | FCOMP [ST(0)], ST(i) | FPU
  ops: r=r:st0 r=opcode
  code-suffix: DCD8
  rflags: 0=1 w=023
  flags: fpu-pop=1 tsx-impl-abort asm-ig
  gas: st1-ignore-st1 pseudo
  intel: st1 pseudo
  masm: st1-ignore-st1 pseudo
  nasm: st1 pseudo
-----
INSTRUCTION: DC E0+i | FSUBR ST(i), ST(0) | FPU
  ops: rw=opcode r=r:st0
  gas: mnemonic=fsub st2
  rflags: w=1 u=023
  flags: tsx-impl-abort
  intel: st2
  masm: st2
  nasm: st2 to
-----
INSTRUCTION: DC E8+i | FSUB ST(i), ST(0) | FPU
  ops: rw=opcode r=r:st0
  gas: mnemonic=fsubr st2
  rflags: w=1 u=023
  flags: tsx-impl-abort
  intel: st2
  masm: st2
  nasm: st2 to
-----
INSTRUCTION: DC F0+i | FDIVR ST(i), ST(0) | FPU
  ops: rw=opcode r=r:st0
  gas: mnemonic=fdiv st2
  rflags: w=1 u=023
  flags: tsx-impl-abort
  intel: st2
  masm: st2
  nasm: st2 to
-----
INSTRUCTION: DC F8+i | FDIV ST(i), ST(0) | FPU
  ops: rw=opcode r=r:st0
  rflags: w=1 u=023
  flags: tsx-impl-abort
  gas: mnemonic=fdivr st2
  intel: st2
  masm: st2
  nasm: st2 to
-----
INSTRUCTION: DD /0 | FLD m64fp | FPU
  ops: r=rm | Float64
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: fpu-push=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st1 load
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DD /1 | FISTTP m64int | FPU SSE3
  ops: w=rm | Int64
  implied: r=st0
  code-memory-size-suffix: int
  rflags: 0=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: mnemonic=fisttpll
  intel: flags=force-size=always add-st2
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DD /2 | FST m64fp | FPU
  ops: w=rm | Float64
  implied: r=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st2
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DD /3 | FSTP m64fp | FPU
  ops: w=rm | Float64
  implied: r=st0
  code-memory-size-suffix: fp
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=l
  intel: flags=force-size=always add-st2
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 DD /4 | FRSTOR m94byte | FPU
  ops: r=rm | FpuState94
  implied: w=st0-st7;mm0-mm7
  code-memory-size: 94byte
  rflags: w=0123
  flags: writes-fpu-top tsx-impl-abort
  fast: flags=force-size=always
  gas: suffix=s osz-mem-2
  intel: osz-mem-2 16
  masm: osz-mem-2 16
  nasm: flags=mem-size=ignore osz-mem-2
-----
INSTRUCTION: o32 DD /4 | FRSTOR m108byte | FPU387
  ops: r=rm | FpuState108
  implied: w=st0-st7;mm0-mm7
  code-memory-size: 108byte
  rflags: w=0123
  flags: writes-fpu-top tsx-impl-abort
  fast: flags=force-size=always
  gas: suffix=l osz-mem-2
  intel: osz-mem-2
  masm: osz-mem-2
  nasm: flags=mem-size=ignore osz-mem-2
-----
INSTRUCTION: o16 DD /6 | FNSAVE m94byte | FPU
  ops: w=rm | FpuState94
  implied: r=st0-st7;mm0-mm7
  code-memory-size: 94byte
  rflags: r=0123 0=0123
  flags: writes-fpu-top tsx-impl-abort no-wait
  fast: flags=force-size=always
  gas: suffix=s osz-mem-2
  intel: osz-mem-2 16
  masm: osz-mem-2 16
  nasm: flags=mem-size=ignore osz-mem-2
-----
INSTRUCTION: 9B o16 DD /6 | FSAVE m94byte | FPU
  ops: w=rm | FpuState94
  implied: r=st0-st7;mm0-mm7
  code-memory-size: 94byte
  rflags: r=0123 0=0123
  flags: writes-fpu-top tsx-impl-abort
  fast: flags=force-size=always
  gas: suffix=s osz-mem-2
  intel: osz-mem-2 16
  masm: osz-mem-2 16
  nasm: flags=mem-size=ignore osz-mem-2
-----
INSTRUCTION: o32 DD /6 | FNSAVE m108byte | FPU387
  ops: w=rm | FpuState108
  implied: r=st0-st7;mm0-mm7
  code-memory-size: 108byte
  rflags: r=0123 0=0123
  flags: writes-fpu-top tsx-impl-abort no-wait
  fast: flags=force-size=always
  gas: suffix=l osz-mem-2
  intel: osz-mem-2
  masm: osz-mem-2
  nasm: flags=mem-size=ignore osz-mem-2
-----
INSTRUCTION: 9B o32 DD /6 | FSAVE m108byte | FPU387
  ops: w=rm | FpuState108
  implied: r=st0-st7;mm0-mm7
  code-memory-size: 108byte
  rflags: r=0123 0=0123
  flags: writes-fpu-top tsx-impl-abort
  fast: flags=force-size=always
  gas: suffix=l osz-mem-2
  intel: osz-mem-2
  masm: osz-mem-2
  nasm: flags=mem-size=ignore osz-mem-2
-----
INSTRUCTION: DD /7 | FNSTSW m2byte | FPU
  ops: w=rm | UInt16
  code-memory-size: 2byte
  rflags: r=0123 u=0123
  flags: tsx-impl-abort no-wait
  gas: suffix=w
-----
INSTRUCTION: 9B DD /7 | FSTSW m2byte | FPU
  ops: w=rm | UInt16
  code-memory-size: 2byte
  rflags: r=0123 u=0123
  flags: tsx-impl-abort
  gas: suffix=w
-----
INSTRUCTION: DD C0+i | FFREE ST(i) | FPU
  ops: n=opcode
  rflags: u=0123
  flags: tsx-impl-abort
-----
INSTRUCTION: DD C8+i | FXCH [ST(0)], ST(i) | FPU
  ops: rw=r:st0 rw=opcode
  code-suffix: DDC8
  rflags: 0=1 u=023
  flags: tsx-impl-abort asm-ig
  gas: st1-ignore-st1 pseudo
  intel: st1 pseudo
  masm: st1-ignore-st1 pseudo
  nasm: st1 pseudo
-----
INSTRUCTION: DD D0+i | FST ST(i) | FPU
  ops: w=opcode
  implied: r=st0
  rflags: w=1 u=023
  flags: tsx-impl-abort
  intel: add-st2
-----
INSTRUCTION: DD D8+i | FSTP ST(i) | FPU
  ops: w=opcode
  implied: r=st0
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  intel: add-st2
-----
INSTRUCTION: DD E0+i | FUCOM [ST(0)], ST(i) | FPU
  ops: r=r:st0 r=opcode
  rflags: 0=1 w=023
  flags: tsx-impl-abort
  gas: st1-ignore-st1 pseudo
  intel: st1 pseudo
  masm: st1-ignore-st1 pseudo
  nasm: st1 pseudo
-----
INSTRUCTION: DD E8+i | FUCOMP [ST(0)], ST(i) | FPU
  ops: r=r:st0 r=opcode
  rflags: 0=1 w=023
  flags: fpu-pop=1 tsx-impl-abort
  gas: st1-ignore-st1 pseudo
  intel: st1 pseudo
  masm: st1-ignore-st1 pseudo
  nasm: st1 pseudo
-----
INSTRUCTION: DE /0 | FIADD m16int | FPU
  ops: r=rm | Int16
  implied: rw=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DE /1 | FIMUL m16int | FPU
  ops: r=rm | Int16
  implied: rw=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DE /2 | FICOM m16int | FPU
  ops: r=rm | Int16
  implied: r=st0
  code-memory-size-suffix: int
  rflags: 0=1 w=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DE /3 | FICOMP m16int | FPU
  ops: r=rm | Int16
  implied: r=st0
  code-memory-size-suffix: int
  rflags: 0=1 w=023
  flags: fpu-pop=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DE /4 | FISUB m16int | FPU
  ops: r=rm | Int16
  implied: rw=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DE /5 | FISUBR m16int | FPU
  ops: r=rm | Int16
  implied: rw=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DE /6 | FIDIV m16int | FPU
  ops: r=rm | Int16
  implied: rw=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DE /7 | FIDIVR m16int | FPU
  ops: r=rm | Int16
  implied: rw=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DE C0+i | FADDP ST(i), ST(0) | FPU
  ops: rw=opcode r=r:st0
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  gas: st2 pseudo
  intel: st2 pseudo
  masm: st2 pseudo
  nasm: st2 pseudo
-----
INSTRUCTION: DE C8+i | FMULP ST(i), ST(0) | FPU
  ops: rw=opcode r=r:st0
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  gas: st2 pseudo
  intel: st2 pseudo
  masm: st2 pseudo
  nasm: st2 pseudo
-----
INSTRUCTION: DE D0+i | FCOMP [ST(0)], ST(i) | FPU
  ops: r=r:st0 r=opcode
  code-suffix: DED0
  rflags: 0=1 w=023
  flags: fpu-pop=1 tsx-impl-abort asm-ig
  gas: st1-ignore-st1 pseudo
  intel: st1 pseudo
  masm: st1-ignore-st1 pseudo
  nasm: st1 pseudo
-----
INSTRUCTION: DE D9 | FCOMPP | FPU
  implied: r=st0;st1
  rflags: 0=1 w=023
  flags: fpu-pop=2 tsx-impl-abort
-----
INSTRUCTION: DE E0+i | FSUBRP ST(i), ST(0) | FPU
  ops: rw=opcode r=r:st0
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  gas: mnemonic=fsubp st2 pseudo
  intel: st2 pseudo
  masm: st2 pseudo
  nasm: st2 pseudo
-----
INSTRUCTION: DE E8+i | FSUBP ST(i), ST(0) | FPU
  ops: rw=opcode r=r:st0
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  gas: mnemonic=fsubrp st2 pseudo
  intel: st2 pseudo
  masm: st2 pseudo
  nasm: st2 pseudo
-----
INSTRUCTION: DE F0+i | FDIVRP ST(i), ST(0) | FPU
  ops: rw=opcode r=r:st0
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  gas: mnemonic=fdivp st2 pseudo
  intel: st2 pseudo
  masm: st2 pseudo
  nasm: st2 pseudo
-----
INSTRUCTION: DE F8+i | FDIVP ST(i), ST(0) | FPU
  ops: rw=opcode r=r:st0
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  gas: mnemonic=fdivrp st2 pseudo
  intel: st2 pseudo
  masm: st2 pseudo
  nasm: st2 pseudo
-----
INSTRUCTION: DF /0 | FILD m16int | FPU
  ops: r=rm | Int16
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: fpu-push=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st1 load
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DF /1 | FISTTP m16int | FPU SSE3
  ops: w=rm | Int16
  implied: r=st0
  code-memory-size-suffix: int
  rflags: 0=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st2
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DF /2 | FIST m16int | FPU
  ops: w=rm | Int16
  implied: r=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st2
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DF /3 | FISTP m16int | FPU
  ops: w=rm | Int16
  implied: r=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: flags=force-suffix suffix=s
  intel: flags=force-size=always add-st2
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DF /4 | FBLD m80bcd | FPU
  ops: r=rm | Bcd
  code-memory-size-suffix: bcd
  rflags: w=1 u=023
  flags: fpu-push=1 tsx-impl-abort
  fast: flags=force-size=always
  intel: flags=force-size=default add-st1 load
  masm: flags=force-size=default
  nasm: flags=force-size=default
-----
INSTRUCTION: DF /5 | FILD m64int | FPU
  ops: r=rm | Int64
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: fpu-push=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: mnemonic=fildll
  intel: flags=force-size=always add-st1 load
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DF /6 | FBSTP m80bcd | FPU
  ops: w=rm | Bcd
  implied: r=st0
  code-memory-size-suffix: bcd
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  fast: flags=force-size=always
  intel: flags=force-size=default add-st2
  masm: flags=force-size=default
  nasm: flags=force-size=default
-----
INSTRUCTION: DF /7 | FISTP m64int | FPU
  ops: w=rm | Int64
  implied: r=st0
  code-memory-size-suffix: int
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort
  fast: flags=force-size=always
  gas: mnemonic=fistpll
  intel: flags=force-size=always add-st2
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: DF C0+i | FFREEP ST(i) | FPU
  ops: n=opcode
  rflags: u=0123
  flags: fpu-pop=1 tsx-impl-abort
-----
INSTRUCTION: DF C8+i | FXCH [ST(0)], ST(i) | FPU
  ops: rw=r:st0 rw=opcode
  code-suffix: DFC8
  rflags: 0=1 u=023
  flags: tsx-impl-abort asm-ig
  gas: st1-ignore-st1 pseudo
  intel: st1 pseudo
  masm: st1-ignore-st1 pseudo
  nasm: st1 pseudo
-----
INSTRUCTION: DF D0+i | FSTP ST(i) | FPU
  ops: w=opcode
  implied: r=st0
  code-suffix: DFD0
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort asm-ig
  intel: add-st2
-----
INSTRUCTION: DF D8+i | FSTP ST(i) | FPU
  ops: w=opcode
  implied: r=st0
  code-suffix: DFD8
  rflags: w=1 u=023
  flags: fpu-pop=1 tsx-impl-abort asm-ig
  intel: add-st2
-----
INSTRUCTION: DF E0 | FNSTSW AX | FPU287
  ops: w=r:ax
  rflags: r=0123 u=0123
  flags: tsx-impl-abort no-wait
-----
INSTRUCTION: 9B DF E0 | FSTSW AX | FPU287
  ops: w=r:ax
  rflags: r=0123 u=0123
  flags: tsx-impl-abort
-----
INSTRUCTION: 9B DF E1 | FSTDW AX | FPU387SL_ONLY
  ops: w=r:ax
  #TODO: assume c0,c1,c2,c3 == undefined
  rflags: u=0123
  flags: 16 32 dec-opt=OldFpu tsx-impl-abort
-----
INSTRUCTION: 9B DF E2 | FSTSG AX | FPU387SL_ONLY
  ops: w=r:ax
  #TODO: assume c0,c1,c2,c3 == undefined
  rflags: u=0123
  flags: 16 32 dec-opt=OldFpu tsx-impl-abort
-----
INSTRUCTION: DF E8+i | FUCOMIP ST, ST(i) | FPU CMOV
  ops: r=r:st0 r=opcode
  rflags: w=zcp 0=osa 0=1
  flags: fpu-pop=1 tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: DF F0+i | FCOMIP ST, ST(i) | FPU CMOV
  ops: r=r:st0 r=opcode
  rflags: w=zcp 0=osa 0=1
  flags: fpu-pop=1 tsx-impl-abort
  gas: st1
  intel: st1
  masm: st1
  nasm: st1
-----
INSTRUCTION: a16 o16 E0 cb | LOOPNE rel8 | INTEL8086
  ops: r=br
  implied: rw=cx
  code-suffix: 16_CX
  rflags: r=z
  flags: 16 32 cc=loop;ne; br=loop cflow=br-cond
  gas: suffix=w loop
  intel: loop
  masm: loop2
  nasm: loop
-----
INSTRUCTION: a16 o32 E0 cb | LOOPNE rel8 | INTEL386
  ops: r=br
  implied: rw=cx
  code-suffix: 32_CX
  rflags: r=z
  flags: 16 32 cc=loop;ne; br=loop cflow=br-cond asm-ig
  gas: suffix=w loop
  intel: loop
  masm: loop2
  nasm: loop
-----
INSTRUCTION: a32 o16 E0 cb | LOOPNE rel8 | INTEL386
  ops: r=br
  implied: rw=ecx
  code-suffix: 16_ECX
  rflags: r=z
  flags: cc=loop;ne; br=loop no-intel-dec64 cflow=br-cond asm-ig
  gas: suffix=l loop
  intel: loop
  masm: loop2
  nasm: loop
-----
INSTRUCTION: a32 o32 E0 cb | LOOPNE rel8 | INTEL386
  ops: r=br
  implied: rw=ecx
  code-suffix: 32_ECX
  rflags: r=z
  flags: 16 32 cc=loop;ne; br=loop cflow=br-cond
  gas: suffix=l loop
  intel: loop
  masm: loop2
  nasm: loop
-----
INSTRUCTION: a32 o64 E0 cb | LOOPNE rel8 | X64
  ops: r=br
  implied: rw=ecx
  code-suffix: 64_ECX
  rflags: r=z
  flags: 64 cc=loop;ne; br=loop cflow=br-cond intel-fo64 do64 asm-ig
  fast: mnemonic=loopned
  gas: suffix=l loop
  intel: loop
  masm: mnemonic=loopned loop1 d
  nasm: loop
-----
INSTRUCTION: a64 o16 E0 cb | LOOPNE rel8 | X64
  ops: r=br
  implied: rw=rcx
  code-suffix: 16_RCX
  rflags: r=z
  flags: 64 cc=loop;ne; br=loop cflow=br-cond no-intel-dec asm-ig
  gas: suffix=q loop
  intel: loop
  masm: loop1
  nasm: loop
-----
INSTRUCTION: a64 o64 E0 cb | LOOPNE rel8 | X64
  ops: r=br
  implied: rw=rcx
  code-suffix: 64_RCX
  rflags: r=z
  flags: 64 cc=loop;ne; br=loop cflow=br-cond intel-fo64 do64
  gas: suffix=q loop
  intel: loop
  masm: loop1
  nasm: loop
-----
INSTRUCTION: a16 o16 E1 cb | LOOPE rel8 | INTEL8086
  ops: r=br
  implied: rw=cx
  code-suffix: 16_CX
  rflags: r=z
  flags: 16 32 cc=loop;e; br=loop cflow=br-cond
  gas: suffix=w loop
  intel: loop
  masm: loop2
  nasm: loop
-----
INSTRUCTION: a16 o32 E1 cb | LOOPE rel8 | INTEL386
  ops: r=br
  implied: rw=cx
  code-suffix: 32_CX
  rflags: r=z
  flags: 16 32 cc=loop;e; br=loop cflow=br-cond asm-ig
  gas: suffix=w loop
  intel: loop
  masm: loop2
  nasm: loop
-----
INSTRUCTION: a32 o16 E1 cb | LOOPE rel8 | INTEL386
  ops: r=br
  implied: rw=ecx
  code-suffix: 16_ECX
  rflags: r=z
  flags: cc=loop;e; br=loop cflow=br-cond no-intel-dec64 asm-ig
  gas: suffix=l loop
  intel: loop
  masm: loop2
  nasm: loop
-----
INSTRUCTION: a32 o32 E1 cb | LOOPE rel8 | INTEL386
  ops: r=br
  implied: rw=ecx
  code-suffix: 32_ECX
  rflags: r=z
  flags: 16 32 cc=loop;e; br=loop cflow=br-cond
  gas: suffix=l loop
  intel: loop
  masm: loop2
  nasm: loop
-----
INSTRUCTION: a32 o64 E1 cb | LOOPE rel8 | X64
  ops: r=br
  implied: rw=ecx
  code-suffix: 64_ECX
  rflags: r=z
  flags: 64 cc=loop;e; br=loop cflow=br-cond intel-fo64 do64 asm-ig
  fast: mnemonic=looped
  gas: suffix=l loop
  intel: loop
  masm: mnemonic=looped loop1 d
  nasm: loop
-----
INSTRUCTION: a64 o16 E1 cb | LOOPE rel8 | X64
  ops: r=br
  implied: rw=rcx
  code-suffix: 16_RCX
  rflags: r=z
  flags: 64 cc=loop;e; br=loop cflow=br-cond no-intel-dec asm-ig
  gas: suffix=q loop
  intel: loop
  masm: loop1
  nasm: loop
-----
INSTRUCTION: a64 o64 E1 cb | LOOPE rel8 | X64
  ops: r=br
  implied: rw=rcx
  code-suffix: 64_RCX
  rflags: r=z
  flags: 64 cc=loop;e; br=loop cflow=br-cond intel-fo64 do64
  gas: suffix=q loop
  intel: loop
  masm: loop1
  nasm: loop
-----
INSTRUCTION: a16 o16 E2 cb | LOOP rel8 | INTEL8086
  ops: r=br
  implied: rw=cx
  code-suffix: 16_CX
  flags: 16 32 br=loop cflow=br-cond
  gas: suffix=w loop
  intel: loop
  masm: osz-suffix-1-loop
  nasm: loop
-----
INSTRUCTION: a16 o32 E2 cb | LOOP rel8 | INTEL386
  ops: r=br
  implied: rw=cx
  code-suffix: 32_CX
  flags: 16 32 br=loop cflow=br-cond asm-ig
  gas: suffix=w loop
  intel: loop
  masm: osz-suffix-1-loop
  nasm: loop
-----
INSTRUCTION: a32 o16 E2 cb | LOOP rel8 | INTEL386
  ops: r=br
  implied: rw=ecx
  code-suffix: 16_ECX
  flags: br=loop cflow=br-cond no-intel-dec64 asm-ig
  gas: suffix=l loop
  intel: loop
  masm: osz-suffix-1-loop
  nasm: loop
-----
INSTRUCTION: a32 o32 E2 cb | LOOP rel8 | INTEL386
  ops: r=br
  implied: rw=ecx
  code-suffix: 32_ECX
  flags: 16 32 br=loop cflow=br-cond
  gas: suffix=l loop
  intel: loop
  masm: osz-suffix-1-loop
  nasm: loop
-----
INSTRUCTION: a32 o64 E2 cb | LOOP rel8 | X64
  ops: r=br
  implied: rw=ecx
  code-suffix: 64_ECX
  flags: 64 br=loop cflow=br-cond intel-fo64 do64 asm-ig
  fast: mnemonic=loopd
  gas: suffix=l loop
  intel: loop
  masm: mnemonic=loopd
  nasm: loop
-----
INSTRUCTION: a64 o16 E2 cb | LOOP rel8 | X64
  ops: r=br
  implied: rw=rcx
  code-suffix: 16_RCX
  flags: 64 br=loop cflow=br-cond no-intel-dec asm-ig
  gas: suffix=q loop
  intel: loop
  nasm: loop
-----
INSTRUCTION: a64 o64 E2 cb | LOOP rel8 | X64
  ops: r=br
  implied: rw=rcx
  code-suffix: 64_RCX
  flags: 64 br=loop cflow=br-cond intel-fo64 do64
  gas: suffix=q loop
  intel: loop
  nasm: loop
-----
INSTRUCTION: a16 o16 E3 cb | JCXZ rel8 | INTEL8086
  ops: r=br
  implied: r=cx
  code-suffix: 16
  flags: 16 32 br=jrcxz cflow=br-cond
  gas: flags=osz-is-byte-directive osz
  intel: osz
  nasm: osz
-----
INSTRUCTION: a16 o32 E3 cb | JCXZ rel8 | INTEL386
  ops: r=br
  implied: r=cx
  code-suffix: 32
  flags: 16 32 br=jrcxz cflow=br-cond asm-ig
  gas: flags=osz-is-byte-directive osz
  intel: osz
  nasm: osz
-----
INSTRUCTION: a32 o16 E3 cb | JECXZ rel8 | INTEL386
  ops: r=br
  implied: r=ecx
  code-suffix: 16
  flags: br=jrcxz cflow=br-cond no-intel-dec64 asm-ig
  gas: flags=osz-is-byte-directive osz
  intel: osz
  nasm: osz
-----
INSTRUCTION: a32 o32 E3 cb | JECXZ rel8 | INTEL386
  ops: r=br
  implied: r=ecx
  code-suffix: 32
  flags: 16 32 br=jrcxz cflow=br-cond
  gas: flags=osz-is-byte-directive osz
  intel: osz
  nasm: osz
-----
INSTRUCTION: a32 o64 E3 cb | JECXZ rel8 | X64
  ops: r=br
  implied: r=ecx
  code-suffix: 64
  flags: 64 br=jrcxz cflow=br-cond intel-fo64 do64 asm-ig
  gas: osz
  intel: osz
  nasm: osz
-----
INSTRUCTION: a64 o16 E3 cb | JRCXZ rel8 | X64
  ops: r=br
  implied: r=rcx
  code-suffix: 16
  flags: 64 br=jrcxz cflow=br-cond no-intel-dec asm-ig
  gas: flags=osz-is-byte-directive osz
  intel: osz
  nasm: osz
-----
INSTRUCTION: a64 o64 E3 cb | JRCXZ rel8 | X64
  ops: r=br
  implied: r=rcx
  code-suffix: 64
  flags: 64 br=jrcxz cflow=br-cond intel-fo64 do64
  gas: osz
  intel: osz
  nasm: osz
-----
INSTRUCTION: E4 ib | IN AL, imm8 | INTEL8086
  ops: w=r:al r=imm
  flags: io privileged intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
  gas: suffix=b
-----
INSTRUCTION: o16 E5 ib | IN AX, imm8 | INTEL8086
  ops: w=r:ax r=imm
  flags: io privileged intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
  gas: suffix=w
-----
INSTRUCTION: o32 E5 ib | IN EAX, imm8 | INTEL386
  ops: w=r:eax r=imm
  flags: io privileged intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
  gas: suffix=l
-----
INSTRUCTION: E6 ib | OUT imm8, AL | INTEL8086
  ops: r=imm r=r:al
  flags: io privileged intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
  gas: suffix=b
-----
INSTRUCTION: o16 E7 ib | OUT imm8, AX | INTEL8086
  ops: r=imm r=r:ax
  flags: io privileged intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
  gas: suffix=w
-----
INSTRUCTION: o32 E7 ib | OUT imm8, EAX | INTEL386
  ops: r=imm r=r:eax
  flags: io privileged intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
  gas: suffix=l
-----
INSTRUCTION: o16 E8 cw | CALL rel16 | INTEL8086
  ops: r=br
  implied: push=1x2
  flags: sp=push;2 br=call-near cflow=call bnd no-intel-dec64
  gas: suffix=w osz-suffix-4
  intel: osz-bnd
  masm: bnd
  nasm: osz-call
-----
INSTRUCTION: o32 E8 cd | CALL rel32 | INTEL386
  ops: r=br
  implied: push=1x4
  code-suffix: 32
  flags: 16 32 sp=push;4 br=call-near cflow=call bnd
  gas: suffix=l osz-suffix-4
  intel: osz-bnd
  masm: bnd
  nasm: osz-call
-----
INSTRUCTION: o64 E8 cd | CALL rel32 | X64
  ops: r=br
  implied: push=1x8
  code-suffix: 64
  flags: 64 sp=push;8 br=call-near cflow=call bnd intel-fo64 do64
  gas: suffix=q osz-suffix-4
  intel: osz-bnd
  masm: bnd
  nasm: osz-call
-----
INSTRUCTION: o16 E9 cw | JMP rel16 | INTEL8086
  ops: r=br
  flags: br=jmp-near cflow=br bnd no-intel-dec64
  gas: osz
  intel: osz-bnd
  masm: bnd
  nasm: osz-call
-----
INSTRUCTION: o32 E9 cd | JMP rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  flags: 16 32 br=jmp-near cflow=br bnd
  gas: osz
  intel: osz-bnd
  masm: bnd
  nasm: osz-call
-----
INSTRUCTION: o64 E9 cd | JMP rel32 | X64
  ops: r=br
  code-suffix: 64
  flags: 64 br=jmp-near cflow=br bnd intel-fo64 do64
  gas: osz
  intel: osz-bnd
  masm: bnd
  nasm: osz-call
-----
INSTRUCTION: o16 EA cd | JMP ptr16:16 | INTEL8086
  ops: r=br-far
  flags: 16 32 br=jmp-far cflow=br intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort asm-ig
  gas: mnemonic=ljmp suffix=w osz-suffix-4
  intel: flags=far osz
  nasm: far
-----
INSTRUCTION: o32 EA cp | JMP ptr16:32 | INTEL386
  ops: r=br-far
  flags: 16 32 br=jmp-far cflow=br intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort asm-ig
  gas: mnemonic=ljmp suffix=l osz-suffix-4
  intel: flags=far osz
  nasm: far
-----
INSTRUCTION: o16 EB cb | JMP rel8 | INTEL8086
  ops: r=br
  code-suffix: 16
  flags: br=jmp-short cflow=br no-intel-dec64
  gas: osz
  intel: flags=short osz
  nasm: flags=short osz
-----
INSTRUCTION: o32 EB cb | JMP rel8 | INTEL386
  ops: r=br
  code-suffix: 32
  flags: 16 32 br=jmp-short cflow=br
  gas: osz
  intel: flags=short osz
  nasm: flags=short osz
-----
INSTRUCTION: o64 EB cb | JMP rel8 | X64
  ops: r=br
  code-suffix: 64
  flags: 64 br=jmp-short cflow=br intel-fo64 do64
  gas: osz
  intel: flags=short osz
  nasm: flags=short osz
-----
INSTRUCTION: EC | IN AL, DX | INTEL8086
  ops: w=r:al r=r:dx
  flags: io privileged intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
  gas: suffix=b
-----
INSTRUCTION: o16 ED | IN AX, DX | INTEL8086
  ops: w=r:ax r=r:dx
  flags: io privileged intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
  gas: suffix=w
-----
INSTRUCTION: o32 ED | IN EAX, DX | INTEL386
  ops: w=r:eax r=r:dx
  flags: io privileged intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
  gas: suffix=l
-----
INSTRUCTION: EE | OUT DX, AL | INTEL8086
  ops: r=r:dx r=r:al
  flags: io privileged intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
  gas: suffix=b
-----
INSTRUCTION: o16 EF | OUT DX, AX | INTEL8086
  ops: r=r:dx r=r:ax
  flags: io privileged intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
  gas: suffix=w
-----
INSTRUCTION: o32 EF | OUT DX, EAX | INTEL386
  ops: r=r:dx r=r:eax
  flags: io privileged intel-may-vm-exit no-in-sgx tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
  gas: suffix=l
-----
INSTRUCTION: F1 | INT1 | INTEL386
  flags: cflow=int intel-vm-exit amd-may-vm-exit tsx-abort
-----
INSTRUCTION: F4 | HLT | INTEL8086
  flags: cpl0 intel-may-vm-exit tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: F5 | CMC | INTEL8086
  rflags: r=c w=c
-----
INSTRUCTION: F6 /0 ib | TEST r/m8, imm8 | INTEL8086
  ops: r=rm r=imm | UInt8
  rflags: u=a w=szp 0=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: F6 /1 ib | TEST r/m8, imm8 | INTEL8086
  ops: r=rm r=imm | UInt8
  code-suffix: F6r1
  rflags: u=a w=szp 0=oc
  flags: asm-ig
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: F6 /2 | NOT r/m8 | INTEL8086
  ops: rw=rm | UInt8
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: F6 /3 | NEG r/m8 | INTEL8086
  ops: rw=rm | Int8
  rflags: w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: F6 /4 | MUL r/m8 | INTEL8086
  ops: r=rm | UInt8
  implied: r=al w=ax
  rflags: u=szap w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: F6 /5 | IMUL r/m8 | INTEL8086
  ops: r=rm | Int8
  implied: r=al w=ax
  rflags: u=szap w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: F6 /6 | DIV r/m8 | INTEL8086
  ops: r=rm | UInt8
  implied: rw=ax
  rflags: u=oszacp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: F6 /7 | IDIV r/m8 | INTEL8086
  ops: r=rm | Int8
  implied: rw=ax
  rflags: u=oszacp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 F7 /0 iw | TEST r/m16, imm16 | INTEL8086
  ops: r=rm r=imm | UInt16
  rflags: u=a w=szp 0=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 F7 /0 id | TEST r/m32, imm32 | INTEL386
  ops: r=rm r=imm | UInt32
  rflags: u=a w=szp 0=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 F7 /0 id | TEST r/m64, imm32 | X64
  ops: r=rm r=imm;64 | UInt64
  rflags: u=a w=szp 0=oc
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always;no-sx sx
-----
INSTRUCTION: o16 F7 /1 iw | TEST r/m16, imm16 | INTEL8086
  ops: r=rm r=imm | UInt16
  code-suffix: F7r1
  rflags: u=a w=szp 0=oc
  flags: asm-ig
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 F7 /1 id | TEST r/m32, imm32 | INTEL386
  ops: r=rm r=imm | UInt32
  code-suffix: F7r1
  rflags: u=a w=szp 0=oc
  flags: asm-ig
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 F7 /1 id | TEST r/m64, imm32 | X64
  ops: r=rm r=imm;64 | UInt64
  code-suffix: F7r1
  rflags: u=a w=szp 0=oc
  flags: 64 asm-ig
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always;no-sx sx
-----
INSTRUCTION: o16 F7 /2 | NOT r/m16 | INTEL8086
  ops: rw=rm | UInt16
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 F7 /2 | NOT r/m32 | INTEL386
  ops: rw=rm | UInt32
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 F7 /2 | NOT r/m64 | X64
  ops: rw=rm | UInt64
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 F7 /3 | NEG r/m16 | INTEL8086
  ops: rw=rm | Int16
  rflags: w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 F7 /3 | NEG r/m32 | INTEL386
  ops: rw=rm | Int32
  rflags: w=oszacp
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 F7 /3 | NEG r/m64 | X64
  ops: rw=rm | Int64
  rflags: w=oszacp
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 F7 /4 | MUL r/m16 | INTEL8086
  ops: r=rm | UInt16
  implied: rw=ax w=dx
  rflags: u=szap w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 F7 /4 | MUL r/m32 | INTEL386
  ops: r=rm | UInt32
  implied: rw=eax w=edx
  rflags: u=szap w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 F7 /4 | MUL r/m64 | X64
  ops: r=rm | UInt64
  implied: rw=rax w=rdx
  rflags: u=szap w=oc
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 F7 /5 | IMUL r/m16 | INTEL8086
  ops: r=rm | Int16
  implied: rw=ax w=dx
  rflags: u=szap w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 F7 /5 | IMUL r/m32 | INTEL386
  ops: r=rm | Int32
  implied: rw=eax w=edx
  rflags: u=szap w=oc
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 F7 /5 | IMUL r/m64 | X64
  ops: r=rm | Int64
  implied: rw=rax w=rdx
  rflags: u=szap w=oc
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 F7 /6 | DIV r/m16 | INTEL8086
  ops: r=rm | UInt16
  implied: rw=ax;dx
  rflags: u=oszacp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 F7 /6 | DIV r/m32 | INTEL386
  ops: r=rm | UInt32
  implied: rw=eax;edx
  rflags: u=oszacp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 F7 /6 | DIV r/m64 | X64
  ops: r=rm | UInt64
  implied: rw=rax;rdx
  rflags: u=oszacp
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 F7 /7 | IDIV r/m16 | INTEL8086
  ops: r=rm | Int16
  implied: rw=ax;dx
  rflags: u=oszacp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 F7 /7 | IDIV r/m32 | INTEL386
  ops: r=rm | Int32
  implied: rw=eax;edx
  rflags: u=oszacp
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 F7 /7 | IDIV r/m64 | X64
  ops: r=rm | Int64
  implied: rw=rax;rdx
  rflags: u=oszacp
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: F8 | CLC | INTEL8086
  rflags: 0=c
-----
INSTRUCTION: F9 | STC | INTEL8086
  rflags: 1=c
-----
INSTRUCTION: FA | CLI | INTEL8086
  rflags: 0=i
  flags: privileged tsx-impl-abort
-----
INSTRUCTION: FB | STI | INTEL8086
  rflags: 1=i
  flags: privileged tsx-impl-abort
-----
INSTRUCTION: FC | CLD | INTEL8086
  rflags: 0=d
  flags: tsx-impl-abort
-----
INSTRUCTION: FD | STD | INTEL8086
  rflags: 1=d
  flags: tsx-impl-abort
-----
INSTRUCTION: FE /0 | INC r/m8 | INTEL8086
  ops: rw=rm | UInt8
  rflags: w=oszap
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: FE /1 | DEC r/m8 | INTEL8086
  ops: rw=rm | UInt8
  rflags: w=oszap
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 FF /0 | INC r/m16 | INTEL8086
  ops: rw=rm | UInt16
  rflags: w=oszap
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 FF /0 | INC r/m32 | INTEL386
  ops: rw=rm | UInt32
  rflags: w=oszap
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 FF /0 | INC r/m64 | X64
  ops: rw=rm | UInt64
  rflags: w=oszap
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 FF /1 | DEC r/m16 | INTEL8086
  ops: rw=rm | UInt16
  rflags: w=oszap
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 FF /1 | DEC r/m32 | INTEL386
  ops: rw=rm | UInt32
  rflags: w=oszap
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 FF /1 | DEC r/m64 | X64
  ops: rw=rm | UInt64
  rflags: w=oszap
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 FF /2 | CALL r/m16 | INTEL8086
  ops: r=rm | WordOffset
  implied: push=1x2
  flags: sp=push;2 br=call-near-indirect cflow=call-ind bnd notrack cet-tracked no-intel-dec64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix;indirect suffix=w bnd
  intel: flags=force-size=always bnd
  masm: flags=force-size=always bnd
  nasm: flags=force-size=always bnd
-----
INSTRUCTION: o32 FF /2 | CALL r/m32 | INTEL386
  ops: r=rm | DwordOffset
  implied: push=1x4
  flags: 16 32 sp=push;4 br=call-near-indirect cflow=call-ind bnd notrack cet-tracked
  fast: flags=force-size=always
  gas: flags=force-mem-suffix;indirect suffix=l bnd
  intel: flags=force-size=always bnd
  masm: flags=force-size=always bnd
  nasm: flags=force-size=always bnd
-----
INSTRUCTION: o64 FF /2 | CALL r/m64 | X64
  ops: r=rm | QwordOffset
  implied: push=1x8
  flags: 64 sp=push;8 br=call-near-indirect cflow=call-ind bnd notrack cet-tracked intel-fo64 do64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix;indirect suffix=q bnd
  intel: flags=force-size=always bnd
  masm: flags=force-size=always bnd
  nasm: flags=force-size=always bnd
-----
INSTRUCTION: o16 FF /3 | CALL m16:16 | INTEL8086
  ops: r=rm | SegPtr16
  implied: push=2x2
  code-memory-size: 1616
  flags: sp=push;4 br=call-far-indirect cflow=call-ind cet-tracked intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  fast: mnemonic=callf flags=force-size=always
  gas: mnemonic=lcall suffix=w far
  intel: flags=force-size=always;far
  masm: flags=force-size=always
  nasm: far-mem
-----
INSTRUCTION: o32 FF /3 | CALL m16:32 | INTEL386
  ops: r=rm | SegPtr32
  implied: push=2x4
  code-memory-size: 1632
  flags: sp=push;8 br=call-far-indirect cflow=call-ind cet-tracked intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  fast: mnemonic=callf flags=force-size=always
  gas: mnemonic=lcall suffix=l far
  intel: flags=force-size=always;far
  masm: flags=force-size=always
  nasm: far-mem
-----
INSTRUCTION: o64 FF /3 | CALL m16:64 | X64
  ops: r=rm | SegPtr64
  implied: push=2x8
  code-memory-size: 1664
  flags: 64 sp=push;16 br=call-far-indirect cflow=call-ind cet-tracked no-amd-dec intel-may-vm-exit no-in-sgx tsx-impl-abort
  fast: mnemonic=callf flags=force-size=always
  gas: mnemonic=lcall far
  intel: flags=force-size=always;far
  masm: flags=force-size=always
  nasm: far-mem
-----
INSTRUCTION: o16 FF /4 | JMP r/m16 | INTEL8086
  ops: r=rm | WordOffset
  flags: bnd notrack br=jmp-near-indirect cflow=br-ind cet-tracked no-intel-dec64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix;indirect suffix=w bnd
  intel: flags=force-size=always bnd
  masm: flags=force-size=always bnd
  nasm: flags=force-size=always bnd
-----
INSTRUCTION: o32 FF /4 | JMP r/m32 | INTEL386
  ops: r=rm | DwordOffset
  flags: 16 32 br=jmp-near-indirect cflow=br-ind bnd notrack cet-tracked
  fast: flags=force-size=always
  gas: flags=force-mem-suffix;indirect suffix=l bnd
  intel: flags=force-size=always bnd
  masm: flags=force-size=always bnd
  nasm: flags=force-size=always bnd
-----
INSTRUCTION: o64 FF /4 | JMP r/m64 | X64
  ops: r=rm | QwordOffset
  flags: 64 br=jmp-near-indirect cflow=br-ind bnd notrack cet-tracked intel-fo64 do64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix;indirect suffix=q bnd
  intel: flags=force-size=always bnd
  masm: flags=force-size=always bnd
  nasm: flags=force-size=always bnd
-----
INSTRUCTION: o16 FF /5 | JMP m16:16 | INTEL8086
  ops: r=rm | SegPtr16
  code-memory-size: 1616
  flags: br=jmp-far-indirect cflow=br-ind cet-tracked intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  fast: mnemonic=jmpf flags=force-size=always
  gas: mnemonic=ljmp suffix=w far
  intel: flags=force-size=always;far
  masm: flags=force-size=always
  nasm: far-mem
-----
INSTRUCTION: o32 FF /5 | JMP m16:32 | INTEL386
  ops: r=rm | SegPtr32
  code-memory-size: 1632
  flags: br=jmp-far-indirect cflow=br-ind cet-tracked intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  fast: mnemonic=jmpf flags=force-size=always
  gas: mnemonic=ljmp suffix=l far
  intel: flags=force-size=always;far
  masm: flags=force-size=always
  nasm: far-mem
-----
INSTRUCTION: o64 FF /5 | JMP m16:64 | X64
  ops: r=rm | SegPtr64
  code-memory-size: 1664
  flags: 64 br=jmp-far-indirect cflow=br-ind no-amd-dec cet-tracked intel-may-vm-exit no-in-sgx tsx-impl-abort
  fast: mnemonic=jmpf flags=force-size=always
  gas: mnemonic=ljmp far
  intel: flags=force-size=always;far
  masm: flags=force-size=always
  nasm: far-mem
-----
INSTRUCTION: o16 FF /6 | PUSH r/m16 | INTEL8086
  ops: r=rm | UInt16
  implied: push=1x2
  flags: sp=push;2
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 FF /6 | PUSH r/m32 | INTEL386
  ops: r=rm | UInt32
  implied: push=1x4
  flags: 16 32 sp=push;4
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 FF /6 | PUSH r/m64 | X64
  ops: r=rm | UInt64
  implied: push=1x8
  flags: 64 sp=push;8 do64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 0F 00 /0 | SLDT r/m16 | INTEL286
  ops: w=rm | UInt16
  flags: no-rm no-v86 may-require-cpl0 intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  gas: suffix=w mem16
  masm: flags=force-size=default
  nasm: osz-mem-1
-----
INSTRUCTION: o32 0F 00 /0 | SLDT r32/m16 | INTEL386
  ops: w=rm | UInt16
  flags: no-rm no-v86 may-require-cpl0 intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  gas: suffix=l mem16
  masm: flags=force-size=default
  nasm: osz-mem-1
-----
INSTRUCTION: o64 0F 00 /0 | SLDT r64/m16 | X64
  ops: w=rm | UInt16
  flags: 64 no-rm no-v86 may-require-cpl0 intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  gas: suffix=q mem16
  masm: flags=force-size=default
  nasm: osz-mem-1
-----
INSTRUCTION: o16 0F 00 /1 | STR r/m16 | INTEL286
  ops: w=rm | UInt16
  flags: no-rm no-v86 may-require-cpl0 intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  gas: suffix=w mem16
  masm: flags=force-size=default
  nasm: osz-mem-1
-----
INSTRUCTION: o32 0F 00 /1 | STR r32/m16 | INTEL386
  ops: w=rm | UInt16
  flags: no-rm no-v86 may-require-cpl0 intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  gas: suffix=l mem16
  masm: flags=force-size=default
  nasm: osz-mem-1
-----
INSTRUCTION: o64 0F 00 /1 | STR r64/m16 | X64
  ops: w=rm | UInt16
  flags: 64 no-rm no-v86 may-require-cpl0 intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  gas: suffix=q mem16
  masm: flags=force-size=default
  nasm: osz-mem-1
-----
INSTRUCTION: o16 0F 00 /2 | LLDT r/m16 | INTEL286
  ops: r=rm | UInt16
  flags: cpl0 no-rm no-v86 serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: reg16
  masm: flags=force-size=default
  nasm: osz-reg16
-----
INSTRUCTION: o32 0F 00 /2 | LLDT r32/m16 | INTEL386
  ops: r=rm | UInt16
  implied: last-gpr-16
  flags: cpl0 no-rm no-v86 serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: reg16
  intel: reg16
  masm: flags=force-size=default reg16
  nasm: osz-reg16
-----
INSTRUCTION: o64 0F 00 /2 | LLDT r64/m16 | X64
  ops: r=rm | UInt16
  implied: last-gpr-16
  flags: 64 cpl0 no-rm no-v86 serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: reg16
  intel: reg16
  masm: flags=force-size=default reg16
  nasm: osz-reg16
-----
INSTRUCTION: o16 0F 00 /3 | LTR r/m16 | INTEL286
  ops: r=rm | UInt16
  flags: cpl0 no-rm no-v86 serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: reg16
  masm: flags=force-size=default
  nasm: osz-reg16
-----
INSTRUCTION: o32 0F 00 /3 | LTR r32/m16 | INTEL386
  ops: r=rm | UInt16
  implied: last-gpr-16
  flags: cpl0 no-rm no-v86 serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: reg16
  intel: reg16
  masm: flags=force-size=default reg16
  nasm: osz-reg16
-----
INSTRUCTION: o64 0F 00 /3 | LTR r64/m16 | X64
  ops: r=rm | UInt16
  implied: last-gpr-16
  flags: 64 cpl0 no-rm no-v86 serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: reg16
  intel: reg16
  masm: flags=force-size=default reg16
  nasm: osz-reg16
-----
INSTRUCTION: o16 0F 00 /4 | VERR r/m16 | INTEL286
  ops: r=rm | UInt16
  rflags: w=z
  flags: no-rm no-v86
  gas: reg16
  masm: flags=force-size=default
  nasm: osz-reg16
-----
INSTRUCTION: o32 0F 00 /4 | VERR r32/m16 | INTEL386
  ops: r=rm | UInt16
  implied: last-gpr-16
  rflags: w=z
  flags: no-rm no-v86
  gas: reg16
  intel: reg16
  masm: flags=force-size=default reg16
  nasm: osz-reg16
-----
INSTRUCTION: o64 0F 00 /4 | VERR r64/m16 | X64
  ops: r=rm | UInt16
  implied: last-gpr-16
  rflags: w=z
  flags: 64 no-rm no-v86
  gas: reg16
  intel: reg16
  masm: flags=force-size=default reg16
  nasm: osz-reg16
-----
INSTRUCTION: o16 0F 00 /5 | VERW r/m16 | INTEL286
  ops: r=rm | UInt16
  rflags: w=z
  flags: no-rm no-v86
  gas: reg16
  masm: flags=force-size=default
  nasm: osz-reg16
-----
INSTRUCTION: o32 0F 00 /5 | VERW r32/m16 | INTEL386
  ops: r=rm | UInt16
  implied: last-gpr-16
  rflags: w=z
  flags: no-rm no-v86
  gas: reg16
  intel: reg16
  masm: flags=force-size=default reg16
  nasm: osz-reg16
-----
INSTRUCTION: o64 0F 00 /5 | VERW r64/m16 | X64
  ops: r=rm | UInt16
  implied: last-gpr-16
  rflags: w=z
  flags: 64 no-rm no-v86
  gas: reg16
  intel: reg16
  masm: flags=force-size=default reg16
  nasm: osz-reg16
-----
INSTRUCTION: o16 0F 00 /6 | JMPE r/m16 | IA64
  ops: r=rm | WordOffset
  flags: 16 32 dec-opt=Jmpe br=jmpe-near-indirect cflow=br-ind
  fast: flags=force-size=always
  gas: flags=indirect suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 0F 00 /6 | JMPE r/m32 | IA64
  ops: r=rm | DwordOffset
  flags: 16 32 dec-opt=Jmpe br=jmpe-near-indirect cflow=br-ind
  fast: flags=force-size=always
  gas: flags=indirect suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 0F 01 /0 | SGDT m | INTEL286
  ops: w=rm | Fword6
  code-memory-size: 1632
  code-suffix: 16
  flags: 16 32 may-require-cpl0 intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  gas: suffix=w osz-suffix-4
  masm: gidt
  nasm: osz-mem-1
-----
INSTRUCTION: o32 0F 01 /0 | SGDT m | INTEL386
  ops: w=rm | Fword6
  code-memory-size: 1632
  flags: 16 32 may-require-cpl0 intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  gas: suffix=l osz-suffix-4
  masm: gidt
  nasm: osz-mem-1
-----
INSTRUCTION: 0F 01 /0 | SGDT m | X64
  ops: w=rm | Fword10
  code-memory-size: 1664
  flags: 64 fo64 may-require-cpl0 intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  gas: suffix=q osz-suffix-4
  masm: gidt
-----
INSTRUCTION: o16 0F 01 /1 | SIDT m | INTEL286
  ops: w=rm | Fword6
  code-memory-size: 1632
  code-suffix: 16
  flags: 16 32 may-require-cpl0 intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  gas: suffix=w osz-suffix-4
  masm: gidt
  nasm: osz-mem-1
-----
INSTRUCTION: o32 0F 01 /1 | SIDT m | INTEL386
  ops: w=rm | Fword6
  code-memory-size: 1632
  flags: 16 32 may-require-cpl0 intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  gas: suffix=l osz-suffix-4
  masm: gidt
  nasm: osz-mem-1
-----
INSTRUCTION: 0F 01 /1 | SIDT m | X64
  ops: w=rm | Fword10
  code-memory-size: 1664
  flags: 64 fo64 may-require-cpl0 intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  gas: suffix=q osz-suffix-4
  masm: gidt
-----
INSTRUCTION: o16 0F 01 /2 | LGDT m16&32 | INTEL286
  ops: r=rm | Fword6
  code-memory-size: 1632
  code-suffix: 16
  flags: 16 32 cpl0 serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: suffix=w osz-suffix-4
  masm: flags=force-size=default gidt
  nasm: osz-mem-1
-----
INSTRUCTION: o32 0F 01 /2 | LGDT m16&32 | INTEL386
  ops: r=rm | Fword6
  code-memory-size: 1632
  flags: 16 32 cpl0 serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: suffix=l osz-suffix-4
  masm: flags=force-size=default gidt
  nasm: osz-mem-1
-----
INSTRUCTION: 0F 01 /2 | LGDT m16&64 | X64
  ops: r=rm | Fword10
  code-memory-size: 1664
  flags: 64 cpl0 fo64 serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: suffix=q osz-suffix-4
  masm: flags=force-size=default gidt
-----
INSTRUCTION: o16 0F 01 /3 | LIDT m16&32 | INTEL286
  ops: r=rm | Fword6
  code-memory-size: 1632
  code-suffix: 16
  flags: 16 32 cpl0 serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: suffix=w osz-suffix-4
  masm: flags=force-size=default gidt
  nasm: osz-mem-1
-----
INSTRUCTION: o32 0F 01 /3 | LIDT m16&32 | INTEL386
  ops: r=rm | Fword6
  code-memory-size: 1632
  flags: 16 32 cpl0 serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: suffix=l osz-suffix-4
  masm: flags=force-size=default gidt
  nasm: osz-mem-1
-----
INSTRUCTION: 0F 01 /3 | LIDT m16&64 | X64
  ops: r=rm | Fword10
  code-memory-size: 1664
  flags: 64 cpl0 fo64 serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: suffix=q osz-suffix-4
  masm: flags=force-size=default gidt
-----
INSTRUCTION: o16 0F 01 /4 | SMSW r/m16 | INTEL286
  ops: w=rm | UInt16
  implied: r=cr0
  flags: may-require-cpl0 intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  gas: suffix=w mem16
  masm: flags=force-size=default
  nasm: osz-mem-1
-----
INSTRUCTION: o32 0F 01 /4 | SMSW r32/m16 | INTEL386
  ops: w=rm | UInt16
  implied: r=cr0
  flags: may-require-cpl0 intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  gas: suffix=l mem16
  masm: flags=force-size=default
  nasm: osz-mem-1
-----
INSTRUCTION: o64 0F 01 /4 | SMSW r64/m16 | X64
  ops: w=rm | UInt16
  implied: r=cr0
  flags: 64 may-require-cpl0 intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
  gas: suffix=q mem16
  masm: flags=force-size=default
  nasm: osz-mem-1
-----
INSTRUCTION: F3 0F 01 /5 | RSTORSSP m64 | CET_SS
  ops: rw=rm | UInt64
  rflags: w=c 0=oszap
  flags: no-rm no-v86
  masm: flags=force-size=default
-----
INSTRUCTION: o16 0F 01 /6 | LMSW r/m16 | INTEL286
  ops: r=rm | UInt16
  implied: rw=cr0
  flags: cpl0 serialize-intel intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: reg16
  masm: flags=force-size=default
  nasm: osz-reg16
-----
INSTRUCTION: o32 0F 01 /6 | LMSW r32/m16 | INTEL386
  ops: r=rm | UInt16
  implied: rw=cr0 last-gpr-16
  flags: cpl0 serialize-intel intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: reg16
  intel: reg16
  masm: flags=force-size=default reg16
  nasm: osz-reg16
-----
INSTRUCTION: o64 0F 01 /6 | LMSW r64/m16 | X64
  ops: r=rm | UInt16
  implied: rw=cr0 last-gpr-16
  flags: 64 cpl0 serialize-intel intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: reg16
  intel: reg16
  masm: flags=force-size=default reg16
  nasm: osz-reg16
-----
INSTRUCTION: 0F 01 /7 | INVLPG m | INTEL486
  ops: nma=rm
  flags: cpl0 serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  intel: flags=mem-size=ignore
-----
INSTRUCTION: NP 0F 01 C0 | ENCLV | OSS
  implied: rcw=eax crcw;!64=ecx;edx;ebx crcw;64=rcx;rdx;rbx cr;!64=ds
  rflags: w=oszacp
  flags: cpl0 no-rm no-v86 no-in-smm vmx=op intel-may-vm-exit tdx-non-root-ud tsx-abort
-----
INSTRUCTION: NP 0F 01 C1 | VMCALL | VMX
  rflags: w=zc 0=osap
  #TODO: #UD if (v86 or compat) && VMX root operation
  flags: cpl0 no-privileged cflow=call vmx=op intel-vm-exit intel-smm-vm-exit no-in-sgx tdx-non-root-ve tsx-impl-abort
-----
INSTRUCTION: NP 0F 01 C2 | VMLAUNCH | VMX
  rflags: w=zc 0=osap
  flags: cpl0 no-rm no-v86 no-cm cflow=call vmx=op intel-vm-exit tdx-non-root-ud tsx-impl-abort
-----
INSTRUCTION: NP 0F 01 C3 | VMRESUME | VMX
  rflags: w=zc 0=osap
  flags: cpl0 no-rm no-v86 no-cm cflow=call vmx=op intel-vm-exit tdx-non-root-ud tsx-impl-abort
-----
INSTRUCTION: NP 0F 01 C4 | VMXOFF | VMX
  rflags: w=zc 0=osap
  flags: cpl0 no-rm no-v86 no-cm vmx=op intel-vm-exit tdx-non-root-ud tsx-impl-abort
-----
INSTRUCTION: NP 0F 01 C5 | PCONFIG | PCONFIG
  implied: rw=eax cr;!64=ecx;edx;ebx cr;64=rcx;rdx;rbx cw=ecx;edx;ebx cr;!64=ds
  rflags: w=z 0=osacp
  flags: cpl0 no-v86 intel-may-vm-exit tdx-non-root-ud tdx-non-root-ve tsx-impl-abort
-----
INSTRUCTION: a16 NP 0F 01 C8 | MONITOR | MONITOR
  implied: r=seg;ax;ecx;edx
  code-mnemonic: monitorw
  # Intel: MISC_FEATURES_ENABLES[1]=1 (MSR=140h) enables it in CPL0-3 and v86 mode (Knights Landing CPUs only)
  # AMD: C001_0015h[MonMwaitUserEn]=1 enables it in CPL0-3 and v86 mode
  flags: 16 32 may-require-cpl0 intel-may-vm-exit tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
  gas: asz
  intel: asz
  masm: monitor
  nasm: asz
-----
INSTRUCTION: a32 NP 0F 01 C8 | MONITOR | MONITOR
  implied: r=seg;eax;ecx;edx
  code-mnemonic: monitord
  # Intel: MISC_FEATURES_ENABLES[1]=1 (MSR=140h) enables it in CPL0-3 and v86 mode (Knights Landing CPUs only)
  # AMD: C001_0015h[MonMwaitUserEn]=1 enables it in CPL0-3 and v86 mode
  flags: may-require-cpl0 intel-may-vm-exit tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
  gas: asz
  intel: asz
  masm: monitor
  nasm: asz
-----
INSTRUCTION: a64 NP 0F 01 C8 | MONITOR | MONITOR
  implied: r=seg;rax;ecx;edx
  code-mnemonic: monitorq
  # Intel: MISC_FEATURES_ENABLES[1]=1 (MSR=140h) enables it in CPL0-3 and v86 mode (Knights Landing CPUs only)
  # AMD: C001_0015h[MonMwaitUserEn]=1 enables it in CPL0-3 and v86 mode
  flags: 64 may-require-cpl0 intel-may-vm-exit tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
  gas: asz
  intel: asz
  masm: monitor
  nasm: asz
-----
INSTRUCTION: NP 0F 01 C9 | MWAIT | MONITOR
  implied: r=eax;ecx
  # Intel: MISC_FEATURES_ENABLES[1]=1 (MSR=140h) enables it in CPL0-3 and v86 mode (Knights Landing CPUs only)
  # AMD: C001_0015h[MonMwaitUserEn]=1 enables it in CPL0-3 and v86 mode
  flags: may-require-cpl0 intel-may-vm-exit tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
  masm: mwait
-----
INSTRUCTION: NP 0F 01 CA | CLAC | SMAP
  rflags: 0=A
  flags: cpl0 no-v86 tsx-impl-abort
-----
INSTRUCTION: NP 0F 01 CB | STAC | SMAP
  rflags: 1=A
  flags: cpl0 no-v86 tsx-impl-abort
-----
INSTRUCTION: NP 0F 01 CF | ENCLS | SGX1
  implied: rcw=eax crcw;!64=ecx;edx;ebx crcw;64=rcx;rdx;rbx cr;!64=ds
  rflags: w=oszacp
  flags: cpl0 no-rm no-v86 no-in-smm intel-may-vm-exit tdx-non-root-ud tsx-abort
-----
INSTRUCTION: NP 0F 01 D0 | XGETBV | XSAVE
  implied: r=ecx w=eax;edx
-----
INSTRUCTION: NP 0F 01 D1 | XSETBV | XSAVE
  implied: r=eax;ecx;edx
  flags: cpl0 intel-vm-exit amd-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: NP 0F 01 D4 | VMFUNC | VMX
  implied: r=eax;ecx
  #TODO: should be cond-write
  rflags: w=oszacp
  flags: vmx=non-root intel-may-vm-exit no-in-sgx tdx-non-root-ud tsx-impl-abort
-----
INSTRUCTION: NP 0F 01 D5 | XEND | RTM
  flags: tsx-may-abort
-----
INSTRUCTION: NP 0F 01 D6 | XTEST | HLE_or_RTM
  rflags: w=z 0=osacp
-----
INSTRUCTION: NP 0F 01 D7 | ENCLU | SGX1
  implied: rcw=eax crcw;!64=ecx;edx;ebx crcw;64=rcx;rdx;rbx cr;!64=ds
  rflags: w=oszacp
  flags: cpl3 no-rm no-v86 no-in-smm tsx-abort
-----
INSTRUCTION: a16 0F 01 D8 | VMRUN | SVM
  implied: r=ax
  code-mnemonic: vmrunw
  rflags: r=oszacpdiA
  # Not supported in SMM: undefined behavior
  flags: 16 32 cpl0 save-restore no-rm no-v86 cflow=call amd-may-vm-exit
  gas: asz
  intel: reg ax
  masm: reg ax
  nasm: asz
-----
INSTRUCTION: a32 0F 01 D8 | VMRUN | SVM
  implied: r=eax
  code-mnemonic: vmrund
  rflags: r=oszacpdiA
  # Not supported in SMM: undefined behavior
  flags: cpl0 save-restore no-rm no-v86 cflow=call amd-may-vm-exit
  gas: asz
  intel: reg eax
  masm: reg eax
  nasm: asz
-----
INSTRUCTION: a64 0F 01 D8 | VMRUN | SVM
  implied: r=rax
  code-mnemonic: vmrunq
  rflags: r=oszacpdiA
  # Not supported in SMM: undefined behavior
  flags: 64 cpl0 save-restore no-rm no-v86 cflow=call amd-may-vm-exit
  gas: asz
  intel: reg rax
  masm: reg rax
  nasm: asz
-----
INSTRUCTION: 0F 01 D9 | VMMCALL | SVM
  flags: cflow=call amd-may-vm-exit
-----
INSTRUCTION: a16 0F 01 DA | VMLOAD | SVM
  implied: r=ax w=fs;gs
  code-mnemonic: vmloadw
  flags: 16 32 cpl0 no-rm no-v86 amd-may-vm-exit
  gas: asz
  intel: reg ax
  masm: reg ax
  nasm: asz
-----
INSTRUCTION: a32 0F 01 DA | VMLOAD | SVM
  implied: r=eax w=fs;gs
  code-mnemonic: vmloadd
  flags: cpl0 no-rm no-v86 amd-may-vm-exit
  gas: asz
  intel: reg eax
  masm: reg eax
  nasm: asz
-----
INSTRUCTION: a64 0F 01 DA | VMLOAD | SVM
  implied: r=rax w=fs;gs
  code-mnemonic: vmloadq
  flags: 64 cpl0 no-rm no-v86 amd-may-vm-exit
  gas: asz
  intel: reg rax
  masm: reg rax
  nasm: asz
-----
INSTRUCTION: a16 0F 01 DB | VMSAVE | SVM
  implied: r=ax;fs;gs
  code-mnemonic: vmsavew
  flags: 16 32 cpl0 no-rm no-v86 amd-may-vm-exit
  gas: asz
  intel: reg ax
  masm: reg ax
  nasm: asz
-----
INSTRUCTION: a32 0F 01 DB | VMSAVE | SVM
  implied: r=eax;fs;gs
  code-mnemonic: vmsaved
  flags: cpl0 no-rm no-v86 amd-may-vm-exit
  gas: asz
  intel: reg eax
  masm: reg eax
  nasm: asz
-----
INSTRUCTION: a64 0F 01 DB | VMSAVE | SVM
  implied: r=rax;fs;gs
  code-mnemonic: vmsaveq
  flags: 64 cpl0 no-rm no-v86 amd-may-vm-exit
  gas: asz
  intel: reg rax
  masm: reg rax
  nasm: asz
-----
INSTRUCTION: 0F 01 DC | STGI | SKINIT_or_SVM
  flags: cpl0 no-rm no-v86 amd-may-vm-exit
-----
INSTRUCTION: 0F 01 DD | CLGI | SVM
  flags: cpl0 no-rm no-v86 amd-may-vm-exit
-----
INSTRUCTION: 0F 01 DE | SKINIT | SKINIT_or_SVM
  implied: w=cr0;cr2-cr4 w=dr0-dr3;dr6;dr7 w=es-gs r=eax w;!64=eax-edi w;64=rax-r15
  rflags: 0=oszacpdiA
  flags: cpl0 no-rm no-v86 cflow=ret amd-may-vm-exit
  intel: reg eax
  masm: reg eax
-----
INSTRUCTION: a16 0F 01 DF | INVLPGA | SVM
  implied: r=ax;ecx
  code-mnemonic: invlpgaw
  flags: 16 32 cpl0 no-rm no-v86 serialize-amd amd-may-vm-exit
  gas: asz
  intel: invlpga
  masm: invlpga
  nasm: invlpga
-----
INSTRUCTION: a32 0F 01 DF | INVLPGA | SVM
  implied: r=eax;ecx
  code-mnemonic: invlpgad
  flags: cpl0 no-rm no-v86 serialize-amd amd-may-vm-exit
  gas: asz
  intel: invlpga
  masm: invlpga
  nasm: invlpga
-----
INSTRUCTION: a64 0F 01 DF | INVLPGA | SVM
  implied: r=rax;ecx
  code-mnemonic: invlpgaq
  flags: 64 cpl0 no-rm no-v86 serialize-amd amd-may-vm-exit
  gas: asz
  intel: invlpga
  masm: invlpga
  nasm: invlpga
-----
INSTRUCTION: F3 0F 01 E8 | SETSSBSY | CET_SS
  flags: cpl0 no-rm no-v86
-----
INSTRUCTION: F3 0F 01 EA | SAVEPREVSSP | CET_SS
  rflags: r=c
  flags: no-rm no-v86
-----
INSTRUCTION: NP 0F 01 EE | RDPKRU | PKU
  implied: r=ecx w=eax;edx
-----
INSTRUCTION: NP 0F 01 EF | WRPKRU | PKU
  implied: r=eax;ecx;edx
  flags: tsx-impl-abort
-----
INSTRUCTION: 0F 01 F8 | SWAPGS | X64
  flags: 64 cpl0 serialize-amd tsx-impl-abort
-----
INSTRUCTION: 0F 01 F9 | RDTSCP | RDTSCP
  implied: w=eax;ecx;edx
  flags: may-require-cpl0 intel-may-vm-exit no-in-sgx1 amd-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: a16 NP 0F 01 FA | MONITORX | MONITORX
  implied: r=seg;ax;ecx;edx
  code-mnemonic: monitorxw
  flags: 16 32 amd-may-vm-exit
  gas: asz
  intel: asz
  masm: monitor
  nasm: asz
-----
INSTRUCTION: a32 NP 0F 01 FA | MONITORX | MONITORX
  implied: r=seg;eax;ecx;edx
  code-mnemonic: monitorxd
  flags: amd-may-vm-exit
  gas: asz
  intel: asz
  masm: monitor
  nasm: asz
-----
INSTRUCTION: a64 NP 0F 01 FA | MONITORX | MONITORX
  implied: r=seg;rax;ecx;edx
  code-mnemonic: monitorxq
  flags: 64 amd-may-vm-exit
  gas: asz
  intel: asz
  masm: monitor
  nasm: asz
-----
INSTRUCTION: F3 0F 01 FA | MCOMMIT | MCOMMIT
  rflags: w=c 0=oszap
  flags: amd-may-vm-exit
-----
INSTRUCTION: NP 0F 01 FB | MWAITX | MONITORX
  implied: r=eax;ecx cr=ebx
  flags: amd-may-vm-exit
  masm: mwaitx
-----
INSTRUCTION: a16 0F 01 FC | CLZERO | CLZERO
  implied: r=seg r=ax
  code-mnemonic: clzerow
  flags: 16 32 non-temporal
  gas: asz
  intel: reg ax
  nasm: asz
-----
INSTRUCTION: a32 0F 01 FC | CLZERO | CLZERO
  implied: r=seg r=eax
  code-mnemonic: clzerod
  flags: non-temporal
  gas: asz
  intel: reg eax
  nasm: asz
-----
INSTRUCTION: a64 0F 01 FC | CLZERO | CLZERO
  implied: r=seg r=rax
  code-mnemonic: clzeroq
  flags: 64 non-temporal
  gas: asz
  intel: reg rax
  nasm: asz
-----
INSTRUCTION: NP 0F 01 FD | RDPRU | RDPRU
  implied: r=ecx w=eax;edx
  rflags: w=c 0=oszap
  flags: may-require-cpl0 amd-may-vm-exit
-----
INSTRUCTION: o16 0F 02 /r | LAR r16, r/m16 | INTEL286
  ops: cw=reg r=rm | UInt16
  rflags: w=z
  flags: no-rm no-v86
  gas: suffix=w
  masm: flags=force-size=default
-----
INSTRUCTION: o32 0F 02 /r | LAR r32, r32/m16 | INTEL386
  ops: cw=reg r=rm | UInt16
  implied: last-gpr-16
  rflags: w=z
  flags: no-rm no-v86
  gas: suffix=l
  masm: flags=force-size=default
-----
INSTRUCTION: o64 0F 02 /r | LAR r64, r64/m16 | X64
  ops: cw=reg r=rm | UInt16
  implied: last-gpr-16
  rflags: w=z
  flags: 64 no-rm no-v86
  gas: suffix=q
  masm: flags=force-size=default
-----
INSTRUCTION: o16 0F 03 /r | LSL r16, r/m16 | INTEL286
  ops: cw=reg r=rm | UInt16
  rflags: w=z
  flags: no-rm no-v86
  gas: suffix=w
  masm: flags=force-size=default
-----
INSTRUCTION: o32 0F 03 /r | LSL r32, r32/m16 | INTEL386
  ops: cw=reg r=rm | UInt16
  implied: last-gpr-16
  rflags: w=z
  flags: no-rm no-v86
  gas: suffix=l
  masm: flags=force-size=default
-----
INSTRUCTION: o64 0F 03 /r | LSL r64, r64/m16 | X64
  ops: cw=reg r=rm | UInt16
  implied: last-gpr-16
  rflags: w=z
  flags: 64 no-rm no-v86
  gas: suffix=q
  masm: flags=force-size=default
-----
INSTRUCTION: 0F 04 | STOREALL | INTEL286_ONLY
  #	https: //www.pcjs.org/documents/manuals/intel/80386/loadall/
  code-mnemonic: storeall
  flags: 16 32 dec-opt=Loadall286 cpl0 save-restore asm-ig
-----
INSTRUCTION: 0F 05 | LOADALL | INTEL286_ONLY
  code-mnemonic: loadall286
  flags: 16 32 dec-opt=Loadall286 cpl0 save-restore asm-ig
  fast: mnemonic=loadall286
  gas: mnemonic=loadall286
  intel: mnemonic=loadall286
  masm: mnemonic=loadall286
  nasm: mnemonic=loadall286
-----
INSTRUCTION: 0F 05 | SYSCALL | SYSCALL
  implied: w=ecx w;64=r11
  rflags: r=oszacpdiA w=oszacpdiA
  flags: cflow=call no-in-sgx tsx-impl-abort
-----
INSTRUCTION: 0F 06 | CLTS | INTEL286
  implied: rw=cr0
  flags: cpl0 intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: 0F 07 | LOADALL | INTEL386_ONLY
  implied: r=es;edi
  code-mnemonic: loadall386
  flags: 16 32 dec-opt=Loadall386 cpl0 save-restore
  fast: mnemonic=loadall386
  gas: mnemonic=loadall386
  intel: mnemonic=loadall386
  masm: mnemonic=loadall386
-----
INSTRUCTION: 0F 07 | SYSRET | SYSCALL
  implied: r=ecx r;64=r11d w=cs;ss
  code-mnemonic: sysretd
  rflags: w=oszacpdiA
  # AMD: no-rm no-v86 or #GP(0)
  flags: cpl0 cflow=ret tsx-impl-abort asm=sysret
  gas: suffix=l osz-suffix-3 16 32
-----
INSTRUCTION: o64 0F 07 | SYSRETQ | SYSCALL
  implied: r=rcx;r11d w=cs;ss
  rflags: w=oszacpdiA
  flags: 64 cpl0 cflow=ret tsx-impl-abort asm=sysretq
  nasm: mnemonic=sysret flags=o64
-----
INSTRUCTION: 0F 08 | INVD | INTEL486
  flags: cpl0 serialize-intel serialize-amd intel-vm-exit tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: 0F 09 | WBINVD | INTEL486
  flags: cpl0 serialize-intel serialize-amd intel-may-vm-exit tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: F3 0F 09 | WBNOINVD | WBNOINVD
  flags: cpl0 serialize-intel serialize-amd intel-may-vm-exit tdx-non-root-ve amd-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: 0F 0A | CL1INVMB | CL1INVMB
  flags: 16 32 dec-opt=Cl1invmb cpl0
-----
INSTRUCTION: 0F 0B | UD2 | INTEL286
  flags: cflow=ex intel-vm-exit tsx-impl-abort
-----
INSTRUCTION: o16 0F 0D /r | RESERVEDNOP r/m16, r16 | MULTIBYTENOP
  ops: n=rm n=reg | UInt16
  code-suffix: 0F0D
  flags: nop res-nop asm=reservednop_0f0d
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=w
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o32 0F 0D /r | RESERVEDNOP r/m32, r32 | MULTIBYTENOP
  ops: n=rm n=reg | UInt32
  code-suffix: 0F0D
  flags: nop res-nop asm=reservednop_0f0d
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=l
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o64 0F 0D /r | RESERVEDNOP r/m64, r64 | MULTIBYTENOP
  ops: n=rm n=reg | UInt64
  code-suffix: 0F0D
  flags: 64 nop res-nop asm=reservednop_0f0d
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=q
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: 0F 0D /0 | PREFETCH m8 | PREFETCHW
  ops: nma=rm | UInt8
  flags: prefetch
  intel: mnemonic=prefetch_exclusive
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: 0F 0D /1 | PREFETCHW m8 | PREFETCHW
  ops: nma=rm | UInt8
  flags: prefetch
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: 0F 0D /2 | PREFETCHWT1 m8 | PREFETCHWT1
  ops: nma=rm | UInt8
  flags: prefetch
-----
INSTRUCTION: 0F 0E | FEMMS | D3NOW
-----
INSTRUCTION: 0F 10 /r | UMOV r/m8, r8 | UMOV
  ops: w=rm r=reg | UInt8
  flags: 16 32 dec-opt=Umov
  gas: suffix=b
-----
INSTRUCTION: o16 0F 11 /r | UMOV r/m16, r16 | UMOV
  ops: w=rm r=reg | UInt16
  flags: 16 32 dec-opt=Umov
  gas: suffix=w
-----
INSTRUCTION: o32 0F 11 /r | UMOV r/m32, r32 | UMOV
  ops: w=rm r=reg | UInt32
  flags: 16 32 dec-opt=Umov
  gas: suffix=l
-----
INSTRUCTION: 0F 12 /r | UMOV r8, r/m8 | UMOV
  ops: w=reg r=rm | UInt8
  flags: 16 32 dec-opt=Umov
  gas: suffix=b
-----
INSTRUCTION: o16 0F 13 /r | UMOV r16, r/m16 | UMOV
  ops: w=reg r=rm | UInt16
  flags: 16 32 dec-opt=Umov
  gas: suffix=w
-----
INSTRUCTION: o32 0F 13 /r | UMOV r32, r/m32 | UMOV
  ops: w=reg r=rm | UInt32
  flags: 16 32 dec-opt=Umov
  gas: suffix=l
-----
INSTRUCTION: NP 0F 10 /r | MOVUPS xmm1, xmm2/m128 | SSE
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 10 /r | VMOVUPS xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 10 /r | VMOVUPS ymm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 10 /r | VMOVUPS xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 10 /r | VMOVUPS ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512F | N32
  ops: w=reg r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 10 /r | VMOVUPS zmm1 {k1}{z}, zmm2/m512 | AVX512F | N64
  ops: wvmm=reg r=rm | Packed512_Float32
-----
INSTRUCTION: 66 0F 10 /r | MOVUPD xmm1, xmm2/m128 | SSE2
  ops: w=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 10 /r | VMOVUPD xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 10 /r | VMOVUPD ymm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 10 /r | VMOVUPD xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 10 /r | VMOVUPD ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512F | N32
  ops: w=reg r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 10 /r | VMOVUPD zmm1 {k1}{z}, zmm2/m512 | AVX512F | N64
  ops: wvmm=reg r=rm | Packed512_Float64
-----
INSTRUCTION: F3 0F 10 /r | MOVSS xmm1, xmm2/m32 | SSE
  ops: wm_rwreg=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.WIG 10 /r | VMOVSS xmm1, xmm2, xmm3 | AVX
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.LIG.F3.0F.WIG 10 /r | VMOVSS xmm1, m32 | AVX
  ops: w=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 10 /r | VMOVSS xmm1 {k1}{z}, xmm2, xmm3 | AVX512F
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 10 /r | VMOVSS xmm1 {k1}{z}, m32 | AVX512F | N4
  ops: w=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F 10 /r | MOVSD xmm1, xmm2/m64 | SSE2
  ops: wm_rwreg=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F2.0F.WIG 10 /r | VMOVSD xmm1, xmm2, xmm3 | AVX
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.LIG.F2.0F.WIG 10 /r | VMOVSD xmm1, m64 | AVX
  ops: w=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 10 /r | VMOVSD xmm1 {k1}{z}, xmm2, xmm3 | AVX512F
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 10 /r | VMOVSD xmm1 {k1}{z}, m64 | AVX512F | N8
  ops: w=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 11 /r | MOVUPS xmm2/m128, xmm1 | SSE
  ops: w=rm r=reg | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 11 /r | VMOVUPS xmm2/m128, xmm1 | AVX
  ops: w=rm r=reg | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 11 /r | VMOVUPS ymm2/m256, ymm1 | AVX
  ops: w=rm r=reg | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 11 /r | VMOVUPS xmm2/m128 {k1}{z}, xmm1 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 11 /r | VMOVUPS ymm2/m256 {k1}{z}, ymm1 | AVX512VL AVX512F | N32
  ops: w=rm r=reg | Packed256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 11 /r | VMOVUPS zmm2/m512 {k1}{z}, zmm1 | AVX512F | N64
  ops: wvmm=rm r=reg | Packed512_Float32
-----
INSTRUCTION: 66 0F 11 /r | MOVUPD xmm2/m128, xmm1 | SSE2
  ops: w=rm r=reg | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 11 /r | VMOVUPD xmm2/m128, xmm1 | AVX
  ops: w=rm r=reg | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 11 /r | VMOVUPD ymm2/m256, ymm1 | AVX
  ops: w=rm r=reg | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 11 /r | VMOVUPD xmm2/m128 {k1}{z}, xmm1 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 11 /r | VMOVUPD ymm2/m256 {k1}{z}, ymm1 | AVX512VL AVX512F | N32
  ops: w=rm r=reg | Packed256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 11 /r | VMOVUPD zmm2/m512 {k1}{z}, zmm1 | AVX512F | N64
  ops: wvmm=rm r=reg | Packed512_Float64
-----
INSTRUCTION: F3 0F 11 /r | MOVSS xmm2/m32, xmm1 | SSE
  ops: wm_rwreg=rm r=reg | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.WIG 11 /r | VMOVSS xmm1, xmm2, xmm3 | AVX
  ops: w=rm r=vvvv r=reg
  code-suffix: 0F11
  flags: asm-ig
-----
INSTRUCTION: VEX.LIG.F3.0F.WIG 11 /r | VMOVSS m32, xmm1 | AVX
  ops: w=rm r=reg | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 11 /r | VMOVSS xmm1 {k1}{z}, xmm2, xmm3 | AVX512F
  ops: w=rm r=vvvv r=reg
  code-suffix: 0F11
  flags: asm-ig
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 11 /r | VMOVSS m32 {k1}, xmm1 | AVX512F | N4
  ops: w=rm r=reg | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F 11 /r | MOVSD xmm1/m64, xmm2 | SSE2
  ops: wm_rwreg=rm r=reg | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F2.0F.WIG 11 /r | VMOVSD xmm1, xmm2, xmm3 | AVX
  ops: w=rm r=vvvv r=reg
  code-suffix: 0F11
  flags: asm-ig
-----
INSTRUCTION: VEX.LIG.F2.0F.WIG 11 /r | VMOVSD m64, xmm1 | AVX
  ops: w=rm r=reg | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 11 /r | VMOVSD xmm1 {k1}{z}, xmm2, xmm3 | AVX512F
  ops: w=rm r=vvvv r=reg
  code-suffix: 0F11
  flags: asm-ig
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 11 /r | VMOVSD m64 {k1}, xmm1 | AVX512F | N8
  ops: w=rm r=reg | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 12 /r | MOVHLPS xmm1, xmm2 | SSE
  ops: rw=reg r=rm
-----
INSTRUCTION: NP 0F 12 /r | MOVLPS xmm1, m64 | SSE
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.0F.WIG 12 /r | VMOVHLPS xmm1, xmm2, xmm3 | AVX
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.128.0F.WIG 12 /r | VMOVLPS xmm2, xmm1, m64 | AVX
  ops: w=reg r=vvvv r=rm | Packed64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.0F.W0 12 /r | VMOVHLPS xmm1, xmm2, xmm3 | AVX512F
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: EVEX.128.0F.W0 12 /r | VMOVLPS xmm2, xmm1, m64 | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Packed64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 12 /r | MOVLPD xmm1, m64 | SSE2
  ops: rw=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F.WIG 12 /r | VMOVLPD xmm2, xmm1, m64 | AVX
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W1 12 /r | VMOVLPD xmm2, xmm1, m64 | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: F3 0F 12 /r | MOVSLDUP xmm1, xmm2/m128 | SSE3
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.F3.0F.WIG 12 /r | VMOVSLDUP xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.F3.0F.WIG 12 /r | VMOVSLDUP ymm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F.W0 12 /r | VMOVSLDUP xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F.W0 12 /r | VMOVSLDUP ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512F | N32
  ops: w=reg r=rm | Packed256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F.W0 12 /r | VMOVSLDUP zmm1 {k1}{z}, zmm2/m512 | AVX512F | N64
  ops: wvmm=reg r=rm | Packed512_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F 12 /r | MOVDDUP xmm1, xmm2/m64 | SSE3
  ops: w=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.F2.0F.WIG 12 /r | VMOVDDUP xmm1, xmm2/m64 | AVX
  ops: w=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.F2.0F.WIG 12 /r | VMOVDDUP ymm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F2.0F.W1 12 /r | VMOVDDUP xmm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F2.0F.W1 12 /r | VMOVDDUP ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512F | N32
  ops: w=reg r=rm | Packed256_Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F2.0F.W1 12 /r | VMOVDDUP zmm1 {k1}{z}, zmm2/m512 | AVX512F | N64
  ops: wvmm=reg r=rm | Packed512_Float64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 13 /r | MOVLPS m64, xmm1 | SSE
  ops: w=rm r=reg | Packed64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.0F.WIG 13 /r | VMOVLPS m64, xmm1 | AVX
  ops: w=rm r=reg | Packed64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.0F.W0 13 /r | VMOVLPS m64, xmm1 | AVX512F | N8
  ops: w=rm r=reg | Packed64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 13 /r | MOVLPD m64, xmm1 | SSE2
  ops: w=rm r=reg | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F.WIG 13 /r | VMOVLPD m64, xmm1 | AVX
  ops: w=rm r=reg | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W1 13 /r | VMOVLPD m64, xmm1 | AVX512F | N8
  ops: w=rm r=reg | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 14 /r | UNPCKLPS xmm1, xmm2/m128 | SSE
  ops: rw=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 14 /r | VUNPCKLPS xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 14 /r | VUNPCKLPS ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 14 /r | VUNPCKLPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 14 /r | VUNPCKLPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 14 /r | VUNPCKLPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: 66 0F 14 /r | UNPCKLPD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 14 /r | VUNPCKLPD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 14 /r | VUNPCKLPD ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 14 /r | VUNPCKLPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 14 /r | VUNPCKLPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 14 /r | VUNPCKLPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: NP 0F 15 /r | UNPCKHPS xmm1, xmm2/m128 | SSE
  ops: rw=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 15 /r | VUNPCKHPS xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 15 /r | VUNPCKHPS ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 15 /r | VUNPCKHPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 15 /r | VUNPCKHPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 15 /r | VUNPCKHPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: 66 0F 15 /r | UNPCKHPD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 15 /r | VUNPCKHPD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 15 /r | VUNPCKHPD ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 15 /r | VUNPCKHPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 15 /r | VUNPCKHPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 15 /r | VUNPCKHPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: NP 0F 16 /r | MOVLHPS xmm1, xmm2 | SSE
  ops: rw=reg r=rm
-----
INSTRUCTION: VEX.128.0F.WIG 16 /r | VMOVLHPS xmm1, xmm2, xmm3 | AVX
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: EVEX.128.0F.W0 16 /r | VMOVLHPS xmm1, xmm2, xmm3 | AVX512F
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: NP 0F 16 /r | MOVHPS xmm1, m64 | SSE
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.0F.WIG 16 /r | VMOVHPS xmm2, xmm1, m64 | AVX
  ops: w=reg r=vvvv r=rm | Packed64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.0F.W0 16 /r | VMOVHPS xmm2, xmm1, m64 | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Packed64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 16 /r | MOVHPD xmm1, m64 | SSE2
  ops: rw=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F.WIG 16 /r | VMOVHPD xmm2, xmm1, m64 | AVX
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W1 16 /r | VMOVHPD xmm2, xmm1, m64 | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: F3 0F 16 /r | MOVSHDUP xmm1, xmm2/m128 | SSE3
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.F3.0F.WIG 16 /r | VMOVSHDUP xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.F3.0F.WIG 16 /r | VMOVSHDUP ymm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F.W0 16 /r | VMOVSHDUP xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F.W0 16 /r | VMOVSHDUP ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512F | N32
  ops: w=reg r=rm | Packed256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F.W0 16 /r | VMOVSHDUP zmm1 {k1}{z}, zmm2/m512 | AVX512F | N64
  ops: wvmm=reg r=rm | Packed512_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 17 /r | MOVHPS m64, xmm1 | SSE
  ops: w=rm r=reg | Packed64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.0F.WIG 17 /r | VMOVHPS m64, xmm1 | AVX
  ops: w=rm r=reg | Packed64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.0F.W0 17 /r | VMOVHPS m64, xmm1 | AVX512F | N8
  ops: w=rm r=reg | Packed64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 17 /r | MOVHPD m64, xmm1 | SSE2
  ops: w=rm r=reg | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F.WIG 17 /r | VMOVHPD m64, xmm1 | AVX
  ops: w=rm r=reg | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W1 17 /r | VMOVHPD m64, xmm1 | AVX512F | N8
  ops: w=rm r=reg | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: o16 0F 18 /r | RESERVEDNOP r/m16, r16 | MULTIBYTENOP
  ops: n=rm n=reg | UInt16
  code-suffix: 0F18
  flags: nop res-nop asm=reservednop_0f18
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=w
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o32 0F 18 /r | RESERVEDNOP r/m32, r32 | MULTIBYTENOP
  ops: n=rm n=reg | UInt32
  code-suffix: 0F18
  flags: nop res-nop asm=reservednop_0f18
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=l
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o64 0F 18 /r | RESERVEDNOP r/m64, r64 | MULTIBYTENOP
  ops: n=rm n=reg | UInt64
  code-suffix: 0F18
  flags: 64 nop res-nop asm=reservednop_0f18
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=q
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o16 0F 19 /r | RESERVEDNOP r/m16, r16 | MULTIBYTENOP
  ops: n=rm n=reg | UInt16
  code-suffix: 0F19
  flags: nop res-nop asm=reservednop_0f19
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=w
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o32 0F 19 /r | RESERVEDNOP r/m32, r32 | MULTIBYTENOP
  ops: n=rm n=reg | UInt32
  code-suffix: 0F19
  flags: nop res-nop asm=reservednop_0f19
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=l
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o64 0F 19 /r | RESERVEDNOP r/m64, r64 | MULTIBYTENOP
  ops: n=rm n=reg | UInt64
  code-suffix: 0F19
  flags: 64 nop res-nop asm=reservednop_0f19
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=q
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o16 0F 1A /r | RESERVEDNOP r/m16, r16 | MULTIBYTENOP
  ops: n=rm n=reg | UInt16
  code-suffix: 0F1A
  flags: nop res-nop asm=reservednop_0f1a
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=w
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o32 0F 1A /r | RESERVEDNOP r/m32, r32 | MULTIBYTENOP
  ops: n=rm n=reg | UInt32
  code-suffix: 0F1A
  flags: nop res-nop asm=reservednop_0f1a
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=l
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o64 0F 1A /r | RESERVEDNOP r/m64, r64 | MULTIBYTENOP
  ops: n=rm n=reg | UInt64
  code-suffix: 0F1A
  flags: 64 nop res-nop asm=reservednop_0f1a
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=q
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o16 0F 1B /r | RESERVEDNOP r/m16, r16 | MULTIBYTENOP
  ops: n=rm n=reg | UInt16
  code-suffix: 0F1B
  flags: nop res-nop asm=reservednop_0f1b
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=w
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o32 0F 1B /r | RESERVEDNOP r/m32, r32 | MULTIBYTENOP
  ops: n=rm n=reg | UInt32
  code-suffix: 0F1B
  flags: nop res-nop asm=reservednop_0f1b
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=l
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o64 0F 1B /r | RESERVEDNOP r/m64, r64 | MULTIBYTENOP
  ops: n=rm n=reg | UInt64
  code-suffix: 0F1B
  flags: 64 nop res-nop asm=reservednop_0f1b
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=q
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o16 0F 1C /r | RESERVEDNOP r/m16, r16 | MULTIBYTENOP
  ops: n=rm n=reg | UInt16
  code-suffix: 0F1C
  flags: nop res-nop asm=reservednop_0f1c
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=w
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o32 0F 1C /r | RESERVEDNOP r/m32, r32 | MULTIBYTENOP
  ops: n=rm n=reg | UInt32
  code-suffix: 0F1C
  flags: nop res-nop asm=reservednop_0f1c
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=l
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o64 0F 1C /r | RESERVEDNOP r/m64, r64 | MULTIBYTENOP
  ops: n=rm n=reg | UInt64
  code-suffix: 0F1C
  flags: 64 nop res-nop asm=reservednop_0f1c
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=q
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o16 0F 1D /r | RESERVEDNOP r/m16, r16 | MULTIBYTENOP
  ops: n=rm n=reg | UInt16
  code-suffix: 0F1D
  flags: nop res-nop asm=reservednop_0f1d
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=w
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o32 0F 1D /r | RESERVEDNOP r/m32, r32 | MULTIBYTENOP
  ops: n=rm n=reg | UInt32
  code-suffix: 0F1D
  flags: nop res-nop asm=reservednop_0f1d
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=l
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o64 0F 1D /r | RESERVEDNOP r/m64, r64 | MULTIBYTENOP
  ops: n=rm n=reg | UInt64
  code-suffix: 0F1D
  flags: 64 nop res-nop asm=reservednop_0f1d
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=q
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o16 0F 1E /r | RESERVEDNOP r/m16, r16 | MULTIBYTENOP
  ops: n=rm n=reg | UInt16
  code-suffix: 0F1E
  flags: nop res-nop asm=reservednop_0f1e
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=w
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o32 0F 1E /r | RESERVEDNOP r/m32, r32 | MULTIBYTENOP
  ops: n=rm n=reg | UInt32
  code-suffix: 0F1E
  flags: nop res-nop asm=reservednop_0f1e
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=l
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o64 0F 1E /r | RESERVEDNOP r/m64, r64 | MULTIBYTENOP
  ops: n=rm n=reg | UInt64
  code-suffix: 0F1E
  flags: 64 nop res-nop asm=reservednop_0f1e
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=q
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o16 0F 1F /r | RESERVEDNOP r/m16, r16 | MULTIBYTENOP
  ops: n=rm n=reg | UInt16
  code-suffix: 0F1F
  flags: nop res-nop asm=reservednop_0f1f
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=w
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o32 0F 1F /r | RESERVEDNOP r/m32, r32 | MULTIBYTENOP
  ops: n=rm n=reg | UInt32
  code-suffix: 0F1F
  flags: nop res-nop asm=reservednop_0f1f
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=l
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: o64 0F 1F /r | RESERVEDNOP r/m64, r64 | MULTIBYTENOP
  ops: n=rm n=reg | UInt64
  code-suffix: 0F1F
  flags: 64 nop res-nop asm=reservednop_0f1f
  fast: mnemonic=nop
  gas: mnemonic=nop suffix=q
  intel: mnemonic=nop
  masm: mnemonic=nop
  nasm: mnemonic=nop
-----
INSTRUCTION: 0F 18 /0 | PREFETCHNTA m8 | SSE
  ops: nma=rm | UInt8
  flags: prefetch tsx-impl-abort non-temporal
-----
INSTRUCTION: 0F 18 /1 | PREFETCHT0 m8 | SSE
  ops: nma=rm | UInt8
  flags: prefetch
-----
INSTRUCTION: 0F 18 /2 | PREFETCHT1 m8 | SSE
  ops: nma=rm | UInt8
  flags: prefetch
-----
INSTRUCTION: 0F 18 /3 | PREFETCHT2 m8 | SSE
  ops: nma=rm | UInt8
  flags: prefetch
-----
INSTRUCTION: NP 0F 1A /r | BNDLDX bnd, mib | MPX
  ops: w=reg nma=rm
  flags: dec-opt=MPX ignores-index tsx-impl-abort
  intel: flags=mem-size=ignore
  masm: flags=force-size=default;mem-size=dorq
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: 66 0F 1A /r | BNDMOV bnd1, bnd2/m64 | MPX
  ops: w=reg r=rm;mpx | Bnd32
  flags: 16 32 dec-opt=MPX
  intel: flags=force-size=default
  masm: flags=force-size=default
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: 66 0F 1A /r | BNDMOV bnd1, bnd2/m128 | MPX
  ops: w=reg r=rm;mpx | Bnd64
  flags: 64 dec-opt=MPX
  intel: flags=force-size=default
  masm: flags=force-size=default
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: F3 0F 1A /r | BNDCL bnd, r/m32 | MPX
  ops: r=reg nma=rm;mpx | UInt32
  flags: 16 32 dec-opt=MPX ignores-seg
  intel: flags=mem-size=ignore
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: F3 0F 1A /r | BNDCL bnd, r/m64 | MPX
  ops: r=reg nma=rm;mpx | UInt64
  flags: 64 dec-opt=MPX ignores-seg
  intel: flags=mem-size=ignore
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: F2 0F 1A /r | BNDCU bnd, r/m32 | MPX
  ops: r=reg nma=rm;mpx | UInt32
  flags: 16 32 dec-opt=MPX ignores-seg
  intel: flags=mem-size=ignore
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: F2 0F 1A /r | BNDCU bnd, r/m64 | MPX
  ops: r=reg nma=rm;mpx | UInt64
  flags: 64 dec-opt=MPX ignores-seg
  intel: flags=mem-size=ignore
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: NP 0F 1B /r | BNDSTX mib, bnd | MPX
  ops: nma=rm r=reg
  flags: dec-opt=MPX ignores-index tsx-impl-abort
  intel: flags=mem-size=ignore
  masm: flags=force-size=default;mem-size=dorq
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: 66 0F 1B /r | BNDMOV bnd1/m64, bnd2 | MPX
  ops: w=rm;mpx r=reg | Bnd32
  flags: 16 32 dec-opt=MPX
  intel: flags=force-size=default
  masm: flags=force-size=default
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: 66 0F 1B /r | BNDMOV bnd1/m128, bnd2 | MPX
  ops: w=rm;mpx r=reg | Bnd64
  flags: 64 dec-opt=MPX
  intel: flags=force-size=default
  masm: flags=force-size=default
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: F3 0F 1B /r | BNDMK bnd, m32 | MPX
  ops: w=reg nma=rm;mpx | UInt32
  flags: 16 32 dec-opt=MPX ignores-seg
  intel: flags=mem-size=ignore
  masm: flags=force-size=default
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: F3 0F 1B /r | BNDMK bnd, m64 | MPX
  ops: w=reg nma=rm;mpx | UInt64
  flags: 64 dec-opt=MPX ignores-seg
  intel: flags=mem-size=ignore
  masm: flags=force-size=default
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: F2 0F 1B /r | BNDCN bnd, r/m32 | MPX
  ops: r=reg nma=rm;mpx | UInt32
  flags: 16 32 dec-opt=MPX ignores-seg
  intel: flags=mem-size=ignore
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: F2 0F 1B /r | BNDCN bnd, r/m64 | MPX
  ops: r=reg nma=rm;mpx | UInt64
  flags: 64 dec-opt=MPX ignores-seg
  intel: flags=mem-size=ignore
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: NP 0F 1C /0 | CLDEMOTE m8 | CLDEMOTE
  ops: nma=rm | UInt8
  flags: tsx-impl-abort
  intel: flags=mem-size=ignore
  masm: flags=force-size=default
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: F3 0F 1E /1 | RDSSPD r32 | CET_SS
  ops: w=rm
-----
INSTRUCTION: F3 o64 0F 1E /1 | RDSSPQ r64 | CET_SS
  ops: w=rm
  flags: 64
-----
INSTRUCTION: F3 0F 1E FA | ENDBR64 | CET_IBT
-----
INSTRUCTION: F3 0F 1E FB | ENDBR32 | CET_IBT
-----
INSTRUCTION: o16 0F 1F /0 | NOP r/m16 | MULTIBYTENOP
  ops: n=rm | UInt16
  flags: nop
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 0F 1F /0 | NOP r/m32 | MULTIBYTENOP
  ops: n=rm | UInt32
  flags: nop
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 0F 1F /0 | NOP r/m64 | MULTIBYTENOP
  ops: n=rm | UInt64
  flags: 64 nop
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 0F 20 /r | MOV r32, cr | INTEL386
  ops: w=rm r=reg;lock
  rflags: u=oszacp
  flags: 16 32 cpl0 ignore-mod amd-lock-reg-bit intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: suffix=l
-----
INSTRUCTION: 0F 20 /r | MOV r64, cr | X64
  ops: w=rm r=reg;lock
  rflags: u=oszacp
  flags: 64 cpl0 fo64 ignore-mod amd-lock-reg-bit intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: suffix=q
-----
INSTRUCTION: 0F 21 /r | MOV r32, dr | INTEL386
  ops: w=rm r=reg
  rflags: u=oszacp
  flags: 16 32 cpl0 ignore-mod intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: suffix=l
-----
INSTRUCTION: 0F 21 /r | MOV r64, dr | X64
  ops: w=rm r=reg
  rflags: u=oszacp
  flags: 64 cpl0 fo64 ignore-mod intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: suffix=q
-----
INSTRUCTION: 0F 22 /r | MOV cr, r32 | INTEL386
  ops: w=reg;lock r=rm
  rflags: u=oszacp
  flags: 16 32 cpl0 ignore-mod amd-lock-reg-bit serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: suffix=l
-----
INSTRUCTION: 0F 22 /r | MOV cr, r64 | X64
  ops: w=reg;lock r=rm
  rflags: u=oszacp
  flags: 64 cpl0 fo64 ignore-mod amd-lock-reg-bit serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: suffix=q
-----
INSTRUCTION: 0F 23 /r | MOV dr, r32 | INTEL386
  ops: w=reg r=rm
  rflags: u=oszacp
  flags: 16 32 cpl0 ignore-mod serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: suffix=l
-----
INSTRUCTION: 0F 23 /r | MOV dr, r64 | X64
  ops: w=reg r=rm
  rflags: u=oszacp
  flags: 64 cpl0 fo64 ignore-mod serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  gas: suffix=q
-----
INSTRUCTION: 0F 24 /r | MOV r32, tr | MOV_TR
  ops: w=rm r=reg
  rflags: u=oszacp
  flags: 16 32 dec-opt=MovTr cpl0 ignore-mod
  gas: suffix=l
-----
INSTRUCTION: 0F 26 /r | MOV tr, r32 | MOV_TR
  ops: w=reg r=rm
  rflags: u=oszacp
  flags: 16 32 dec-opt=MovTr cpl0 ignore-mod
  gas: suffix=l
-----
INSTRUCTION: NP 0F 28 /r | MOVAPS xmm1, xmm2/m128 | SSE
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 28 /r | VMOVAPS xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 28 /r | VMOVAPS ymm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 28 /r | VMOVAPS xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 28 /r | VMOVAPS ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512F | N32
  ops: w=reg r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 28 /r | VMOVAPS zmm1 {k1}{z}, zmm2/m512 | AVX512F | N64
  ops: wvmm=reg r=rm | Packed512_Float32
-----
INSTRUCTION: 66 0F 28 /r | MOVAPD xmm1, xmm2/m128 | SSE2
  ops: w=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 28 /r | VMOVAPD xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 28 /r | VMOVAPD ymm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 28 /r | VMOVAPD xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 28 /r | VMOVAPD ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512F | N32
  ops: w=reg r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 28 /r | VMOVAPD zmm1 {k1}{z}, zmm2/m512 | AVX512F | N64
  ops: wvmm=reg r=rm | Packed512_Float64
-----
INSTRUCTION: NP 0F 29 /r | MOVAPS xmm2/m128, xmm1 | SSE
  ops: w=rm r=reg | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 29 /r | VMOVAPS xmm2/m128, xmm1 | AVX
  ops: w=rm r=reg | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 29 /r | VMOVAPS ymm2/m256, ymm1 | AVX
  ops: w=rm r=reg | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 29 /r | VMOVAPS xmm2/m128 {k1}{z}, xmm1 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 29 /r | VMOVAPS ymm2/m256 {k1}{z}, ymm1 | AVX512VL AVX512F | N32
  ops: w=rm r=reg | Packed256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 29 /r | VMOVAPS zmm2/m512 {k1}{z}, zmm1 | AVX512F | N64
  ops: wvmm=rm r=reg | Packed512_Float32
-----
INSTRUCTION: 66 0F 29 /r | MOVAPD xmm2/m128, xmm1 | SSE2
  ops: w=rm r=reg | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 29 /r | VMOVAPD xmm2/m128, xmm1 | AVX
  ops: w=rm r=reg | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 29 /r | VMOVAPD ymm2/m256, ymm1 | AVX
  ops: w=rm r=reg | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 29 /r | VMOVAPD xmm2/m128 {k1}{z}, xmm1 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 29 /r | VMOVAPD ymm2/m256 {k1}{z}, ymm1 | AVX512VL AVX512F | N32
  ops: w=rm r=reg | Packed256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 29 /r | VMOVAPD zmm2/m512 {k1}{z}, zmm1 | AVX512F | N64
  ops: wvmm=rm r=reg | Packed512_Float64
-----
INSTRUCTION: NP 0F 2A /r | CVTPI2PS xmm, mm/m64 | SSE
  ops: rw=reg r=rm | Packed64_Int32
  flags: tsx-impl-abort
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 2A /r | CVTPI2PD xmm, mm/m64 | SSE2
  ops: w=reg r=rm | Packed64_Int32
  flags: tsx-impl-abort
  masm: flags=force-size=default
-----
INSTRUCTION: F3 0F 2A /r | CVTSI2SS xmm1, r/m32 | SSE
  ops: rw=reg r=rm | Int32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: F3 o64 0F 2A /r | CVTSI2SS xmm1, r/m64 | SSE
  ops: rw=reg r=rm | Int64
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: VEX.LIG.F3.0F.W0 2A /r | VCVTSI2SS xmm1, xmm2, r/m32 | AVX
  ops: w=reg r=vvvv r=rm | Int32
  flags: wig32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: VEX.LIG.F3.0F.W1 2A /r | VCVTSI2SS xmm1, xmm2, r/m64 | AVX
  ops: w=reg r=vvvv r=rm | Int64
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 2A /r | VCVTSI2SS xmm1, xmm2, r/m32{er} | AVX512F | N4
  ops: w=reg r=vvvv r=rm | Int32
  flags: wig32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.LIG.F3.0F.W1 2A /r | VCVTSI2SS xmm1, xmm2, r/m64{er} | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Int64
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: F2 0F 2A /r | CVTSI2SD xmm1, r/m32 | SSE2
  ops: rw=reg r=rm | Int32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: F2 o64 0F 2A /r | CVTSI2SD xmm1, r/m64 | SSE2
  ops: rw=reg r=rm | Int64
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: VEX.LIG.F2.0F.W0 2A /r | VCVTSI2SD xmm1, xmm2, r/m32 | AVX
  ops: w=reg r=vvvv r=rm | Int32
  flags: wig32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: VEX.LIG.F2.0F.W1 2A /r | VCVTSI2SD xmm1, xmm2, r/m64 | AVX
  ops: w=reg r=vvvv r=rm | Int64
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.LIG.F2.0F.W0 2A /r | VCVTSI2SD xmm1, xmm2, r/m32{er} | AVX512F | N4
  ops: w=reg r=vvvv r=rm | Int32
  flags: wig32 ignore-er
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 2A /r | VCVTSI2SD xmm1, xmm2, r/m64{er} | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Int64
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: NP 0F 2B /r | MOVNTPS m128, xmm1 | SSE
  ops: w=rm r=reg | Packed128_Float32
  flags: tsx-impl-abort non-temporal
-----
INSTRUCTION: VEX.128.0F.WIG 2B /r | VMOVNTPS m128, xmm1 | AVX
  ops: w=rm r=reg | Packed128_Float32
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.0F.WIG 2B /r | VMOVNTPS m256, ymm1 | AVX
  ops: w=rm r=reg | Packed256_Float32
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.0F.W0 2B /r | VMOVNTPS m128, xmm1 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_Float32
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.0F.W0 2B /r | VMOVNTPS m256, ymm1 | AVX512VL AVX512F | N32
  ops: w=rm r=reg | Packed256_Float32
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.0F.W0 2B /r | VMOVNTPS m512, zmm1 | AVX512F | N64
  ops: w=rm r=reg | Packed512_Float32
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 2B /r | MOVNTPD m128, xmm1 | SSE2
  ops: w=rm r=reg | Packed128_Float64
  flags: tsx-impl-abort non-temporal
-----
INSTRUCTION: VEX.128.66.0F.WIG 2B /r | VMOVNTPD m128, xmm1 | AVX
  ops: w=rm r=reg | Packed128_Float64
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F.WIG 2B /r | VMOVNTPD m256, ymm1 | AVX
  ops: w=rm r=reg | Packed256_Float64
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W1 2B /r | VMOVNTPD m128, xmm1 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_Float64
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F.W1 2B /r | VMOVNTPD m256, ymm1 | AVX512VL AVX512F | N32
  ops: w=rm r=reg | Packed256_Float64
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F.W1 2B /r | VMOVNTPD m512, zmm1 | AVX512F | N64
  ops: w=rm r=reg | Packed512_Float64
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: F3 0F 2B /r | MOVNTSS m32, xmm1 | SSE4A
  ops: w=rm r=reg | Float32
  flags: non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F 2B /r | MOVNTSD m64, xmm1 | SSE4A
  ops: w=rm r=reg | Float64
  flags: non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 2C /r | CVTTPS2PI mm, xmm/m64 | SSE
  ops: w=reg r=rm | Packed64_Float32
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx;force-size=default
-----
INSTRUCTION: 66 0F 2C /r | CVTTPD2PI mm, xmm/m128 | SSE2
  ops: w=reg r=rm | Packed128_Float64
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: F3 0F 2C /r | CVTTSS2SI r32, xmm1/m32 | SSE
  ops: w=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: F3 o64 0F 2C /r | CVTTSS2SI r64, xmm1/m32 | SSE
  ops: w=reg r=rm | Float32
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.W0 2C /r | VCVTTSS2SI r32, xmm1/m32 | AVX
  ops: w=reg r=rm | Float32
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.W1 2C /r | VCVTTSS2SI r64, xmm1/m32 | AVX
  ops: w=reg r=rm | Float32
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 2C /r | VCVTTSS2SI r32, xmm1/m32{sae} | AVX512F | N4
  ops: w=reg r=rm | Float32
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.0F.W1 2C /r | VCVTTSS2SI r64, xmm1/m32{sae} | AVX512F | N4
  ops: w=reg r=rm | Float32
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F 2C /r | CVTTSD2SI r32, xmm1/m64 | SSE2
  ops: w=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: F2 o64 0F 2C /r | CVTTSD2SI r64, xmm1/m64 | SSE2
  ops: w=reg r=rm | Float64
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F2.0F.W0 2C /r | VCVTTSD2SI r32, xmm1/m64 | AVX
  ops: w=reg r=rm | Float64
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F2.0F.W1 2C /r | VCVTTSD2SI r64, xmm1/m64 | AVX
  ops: w=reg r=rm | Float64
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F2.0F.W0 2C /r | VCVTTSD2SI r32, xmm1/m64{sae} | AVX512F | N8
  ops: w=reg r=rm | Float64
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 2C /r | VCVTTSD2SI r64, xmm1/m64{sae} | AVX512F | N8
  ops: w=reg r=rm | Float64
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 2D /r | CVTPS2PI mm, xmm/m64 | SSE
  ops: w=reg r=rm | Packed64_Float32
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx;force-size=default
-----
INSTRUCTION: 66 0F 2D /r | CVTPD2PI mm, xmm/m128 | SSE2
  ops: w=reg r=rm | Packed128_Float64
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: F3 0F 2D /r | CVTSS2SI r32, xmm1/m32 | SSE
  ops: w=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: F3 o64 0F 2D /r | CVTSS2SI r64, xmm1/m32 | SSE
  ops: w=reg r=rm | Float32
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.W0 2D /r | VCVTSS2SI r32, xmm1/m32 | AVX
  ops: w=reg r=rm | Float32
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.W1 2D /r | VCVTSS2SI r64, xmm1/m32 | AVX
  ops: w=reg r=rm | Float32
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 2D /r | VCVTSS2SI r32, xmm1/m32{er} | AVX512F | N4
  ops: w=reg r=rm | Float32
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.0F.W1 2D /r | VCVTSS2SI r64, xmm1/m32{er} | AVX512F | N4
  ops: w=reg r=rm | Float32
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F 2D /r | CVTSD2SI r32, xmm1/m64 | SSE2
  ops: w=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: F2 o64 0F 2D /r | CVTSD2SI r64, xmm1/m64 | SSE2
  ops: w=reg r=rm | Float64
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F2.0F.W0 2D /r | VCVTSD2SI r32, xmm1/m64 | AVX
  ops: w=reg r=rm | Float64
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F2.0F.W1 2D /r | VCVTSD2SI r64, xmm1/m64 | AVX
  ops: w=reg r=rm | Float64
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F2.0F.W0 2D /r | VCVTSD2SI r32, xmm1/m64{er} | AVX512F | N8
  ops: w=reg r=rm | Float64
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 2D /r | VCVTSD2SI r64, xmm1/m64{er} | AVX512F | N8
  ops: w=reg r=rm | Float64
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 2E /r | UCOMISS xmm1, xmm2/m32 | SSE
  ops: r=reg r=rm | Float32
  rflags: w=zcp 0=osa
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.0F.WIG 2E /r | VUCOMISS xmm1, xmm2/m32 | AVX
  ops: r=reg r=rm | Float32
  rflags: w=zcp 0=osa
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.0F.W0 2E /r | VUCOMISS xmm1, xmm2/m32{sae} | AVX512F | N4
  ops: r=reg r=rm | Float32
  rflags: w=zcp 0=osa
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 2E /r | UCOMISD xmm1, xmm2/m64 | SSE2
  ops: r=reg r=rm | Float64
  rflags: w=zcp 0=osa
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.66.0F.WIG 2E /r | VUCOMISD xmm1, xmm2/m64 | AVX
  ops: r=reg r=rm | Float64
  rflags: w=zcp 0=osa
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.66.0F.W1 2E /r | VUCOMISD xmm1, xmm2/m64{sae} | AVX512F | N8
  ops: r=reg r=rm | Float64
  rflags: w=zcp 0=osa
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 2F /r | COMISS xmm1, xmm2/m32 | SSE
  ops: r=reg r=rm | Float32
  rflags: w=zcp 0=osa
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 2F /r | COMISD xmm1, xmm2/m64 | SSE2
  ops: r=reg r=rm | Float64
  rflags: w=zcp 0=osa
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.0F.WIG 2F /r | VCOMISS xmm1, xmm2/m32 | AVX
  ops: r=reg r=rm | Float32
  rflags: w=zcp 0=osa
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.66.0F.WIG 2F /r | VCOMISD xmm1, xmm2/m64 | AVX
  ops: r=reg r=rm | Float64
  rflags: w=zcp 0=osa
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.0F.W0 2F /r | VCOMISS xmm1, xmm2/m32{sae} | AVX512F | N4
  ops: r=reg r=rm | Float32
  rflags: w=zcp 0=osa
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.66.0F.W1 2F /r | VCOMISD xmm1, xmm2/m64{sae} | AVX512F | N8
  ops: r=reg r=rm | Float64
  rflags: w=zcp 0=osa
  masm: flags=force-size=default
-----
INSTRUCTION: 0F 30 | WRMSR | MSR
  implied: r=eax;ecx;edx
  flags: cpl0 serialize-intel serialize-amd intel-may-vm-exit tdx-non-root-may-gen-ex amd-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: 0F 31 | RDTSC | TSC
  implied: w=eax;edx
  flags: may-require-cpl0 intel-may-vm-exit no-in-sgx1 amd-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: 0F 32 | RDMSR | MSR
  implied: r=ecx w=eax;edx
  flags: cpl0 intel-may-vm-exit tdx-non-root-may-gen-ex amd-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: 0F 33 | RDPMC | RDPMC
  implied: r=ecx w=eax;edx
  flags: may-require-cpl0 intel-may-vm-exit no-in-sgx amd-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: 0F 34 | SYSENTER | SEP
  implied: w=esp
  rflags: 0=i
  flags: cflow=call no-in-sgx tsx-impl-abort
-----
INSTRUCTION: 0F 35 | SYSEXIT | SEP
  implied: r=ecx;edx w=esp w=cs;ss
  code-mnemonic: sysexitd
  # AMD: no-rm no-v86 or #GP(0)
  flags: cpl0 cflow=ret tsx-impl-abort asm=sysexit
  gas: suffix=l osz-suffix-3 16 32
-----
INSTRUCTION: o64 0F 35 | SYSEXITQ | SEP
  implied: r=rcx;rdx w=rsp w=cs;ss
  flags: 64 cpl0 cflow=ret tsx-impl-abort asm=sysexitq
  nasm: mnemonic=sysexit flags=o64
-----
INSTRUCTION: NP 0F 37 | GETSEC | SMX
  implied: r=eax
  code-mnemonic: getsecd
  flags: save-restore may-require-cpl0 intel-vm-exit no-in-sgx tdx-non-root-ud tsx-impl-abort
-----
INSTRUCTION: NP o64 0F 37 | GETSECQ | SMX
  implied: r=eax
  flags: 64 save-restore may-require-cpl0 intel-vm-exit no-in-sgx tdx-non-root-ud tsx-impl-abort asm=getsecq
  gas: mnemonic=getsec flags=o64
  nasm: mnemonic=getsec flags=o64
-----
INSTRUCTION: o16 0F 40 /r | CMOVO r16, r/m16 | CMOV
  ops: cw=reg r=rm | UInt16
  rflags: r=o
  flags: cc=cmov;o;
  gas: suffix=w cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o32 0F 40 /r | CMOVO r32, r/m32 | CMOV
  ops: cw32_rw64=reg r=rm | UInt32
  rflags: r=o
  flags: cc=cmov;o;
  gas: suffix=l cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o64 0F 40 /r | CMOVO r64, r/m64 | CMOV
  ops: cw=reg r=rm | UInt64
  rflags: r=o
  flags: 64 cc=cmov;o;
  gas: suffix=q cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o16 0F 41 /r | CMOVNO r16, r/m16 | CMOV
  ops: cw=reg r=rm | UInt16
  rflags: r=o
  flags: cc=cmov;no;
  gas: suffix=w cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o32 0F 41 /r | CMOVNO r32, r/m32 | CMOV
  ops: cw32_rw64=reg r=rm | UInt32
  rflags: r=o
  flags: cc=cmov;no;
  gas: suffix=l cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o64 0F 41 /r | CMOVNO r64, r/m64 | CMOV
  ops: cw=reg r=rm | UInt64
  rflags: r=o
  flags: 64 cc=cmov;no;
  gas: suffix=q cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o16 0F 42 /r | CMOVB r16, r/m16 | CMOV
  ops: cw=reg r=rm | UInt16
  rflags: r=c
  flags: cc=cmov;b;
  gas: suffix=w cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o32 0F 42 /r | CMOVB r32, r/m32 | CMOV
  ops: cw32_rw64=reg r=rm | UInt32
  rflags: r=c
  flags: cc=cmov;b;
  gas: suffix=l cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o64 0F 42 /r | CMOVB r64, r/m64 | CMOV
  ops: cw=reg r=rm | UInt64
  rflags: r=c
  flags: 64 cc=cmov;b;
  gas: suffix=q cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o16 0F 43 /r | CMOVAE r16, r/m16 | CMOV
  ops: cw=reg r=rm | UInt16
  rflags: r=c
  flags: cc=cmov;ae;
  gas: suffix=w cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o32 0F 43 /r | CMOVAE r32, r/m32 | CMOV
  ops: cw32_rw64=reg r=rm | UInt32
  rflags: r=c
  flags: cc=cmov;ae;
  gas: suffix=l cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o64 0F 43 /r | CMOVAE r64, r/m64 | CMOV
  ops: cw=reg r=rm | UInt64
  rflags: r=c
  flags: 64 cc=cmov;ae;
  gas: suffix=q cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o16 0F 44 /r | CMOVE r16, r/m16 | CMOV
  ops: cw=reg r=rm | UInt16
  rflags: r=z
  flags: cc=cmov;e;
  gas: suffix=w cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o32 0F 44 /r | CMOVE r32, r/m32 | CMOV
  ops: cw32_rw64=reg r=rm | UInt32
  rflags: r=z
  flags: cc=cmov;e;
  gas: suffix=l cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o64 0F 44 /r | CMOVE r64, r/m64 | CMOV
  ops: cw=reg r=rm | UInt64
  rflags: r=z
  flags: 64 cc=cmov;e;
  gas: suffix=q cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o16 0F 45 /r | CMOVNE r16, r/m16 | CMOV
  ops: cw=reg r=rm | UInt16
  rflags: r=z
  flags: cc=cmov;ne;
  gas: suffix=w cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o32 0F 45 /r | CMOVNE r32, r/m32 | CMOV
  ops: cw32_rw64=reg r=rm | UInt32
  rflags: r=z
  flags: cc=cmov;ne;
  gas: suffix=l cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o64 0F 45 /r | CMOVNE r64, r/m64 | CMOV
  ops: cw=reg r=rm | UInt64
  rflags: r=z
  flags: 64 cc=cmov;ne;
  gas: suffix=q cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o16 0F 46 /r | CMOVBE r16, r/m16 | CMOV
  ops: cw=reg r=rm | UInt16
  rflags: r=zc
  flags: cc=cmov;be;
  gas: suffix=w cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o32 0F 46 /r | CMOVBE r32, r/m32 | CMOV
  ops: cw32_rw64=reg r=rm | UInt32
  rflags: r=zc
  flags: cc=cmov;be;
  gas: suffix=l cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o64 0F 46 /r | CMOVBE r64, r/m64 | CMOV
  ops: cw=reg r=rm | UInt64
  rflags: r=zc
  flags: 64 cc=cmov;be;
  gas: suffix=q cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o16 0F 47 /r | CMOVA r16, r/m16 | CMOV
  ops: cw=reg r=rm | UInt16
  rflags: r=zc
  flags: cc=cmov;a;
  gas: suffix=w cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o32 0F 47 /r | CMOVA r32, r/m32 | CMOV
  ops: cw32_rw64=reg r=rm | UInt32
  rflags: r=zc
  flags: cc=cmov;a;
  gas: suffix=l cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o64 0F 47 /r | CMOVA r64, r/m64 | CMOV
  ops: cw=reg r=rm | UInt64
  rflags: r=zc
  flags: 64 cc=cmov;a;
  gas: suffix=q cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o16 0F 48 /r | CMOVS r16, r/m16 | CMOV
  ops: cw=reg r=rm | UInt16
  rflags: r=s
  flags: cc=cmov;s;
  gas: suffix=w cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o32 0F 48 /r | CMOVS r32, r/m32 | CMOV
  ops: cw32_rw64=reg r=rm | UInt32
  rflags: r=s
  flags: cc=cmov;s;
  gas: suffix=l cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o64 0F 48 /r | CMOVS r64, r/m64 | CMOV
  ops: cw=reg r=rm | UInt64
  rflags: r=s
  flags: 64 cc=cmov;s;
  gas: suffix=q cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o16 0F 49 /r | CMOVNS r16, r/m16 | CMOV
  ops: cw=reg r=rm | UInt16
  rflags: r=s
  flags: cc=cmov;ns;
  gas: suffix=w cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o32 0F 49 /r | CMOVNS r32, r/m32 | CMOV
  ops: cw32_rw64=reg r=rm | UInt32
  rflags: r=s
  flags: cc=cmov;ns;
  gas: suffix=l cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o64 0F 49 /r | CMOVNS r64, r/m64 | CMOV
  ops: cw=reg r=rm | UInt64
  rflags: r=s
  flags: 64 cc=cmov;ns;
  gas: suffix=q cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o16 0F 4A /r | CMOVP r16, r/m16 | CMOV
  ops: cw=reg r=rm | UInt16
  rflags: r=p
  flags: cc=cmov;p;
  gas: suffix=w cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o32 0F 4A /r | CMOVP r32, r/m32 | CMOV
  ops: cw32_rw64=reg r=rm | UInt32
  rflags: r=p
  flags: cc=cmov;p;
  gas: suffix=l cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o64 0F 4A /r | CMOVP r64, r/m64 | CMOV
  ops: cw=reg r=rm | UInt64
  rflags: r=p
  flags: 64 cc=cmov;p;
  gas: suffix=q cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o16 0F 4B /r | CMOVNP r16, r/m16 | CMOV
  ops: cw=reg r=rm | UInt16
  rflags: r=p
  flags: cc=cmov;np;
  gas: suffix=w cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o32 0F 4B /r | CMOVNP r32, r/m32 | CMOV
  ops: cw32_rw64=reg r=rm | UInt32
  rflags: r=p
  flags: cc=cmov;np;
  gas: suffix=l cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o64 0F 4B /r | CMOVNP r64, r/m64 | CMOV
  ops: cw=reg r=rm | UInt64
  rflags: r=p
  flags: 64 cc=cmov;np;
  gas: suffix=q cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o16 0F 4C /r | CMOVL r16, r/m16 | CMOV
  ops: cw=reg r=rm | UInt16
  rflags: r=os
  flags: cc=cmov;l;
  gas: suffix=w cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o32 0F 4C /r | CMOVL r32, r/m32 | CMOV
  ops: cw32_rw64=reg r=rm | UInt32
  rflags: r=os
  flags: cc=cmov;l;
  gas: suffix=l cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o64 0F 4C /r | CMOVL r64, r/m64 | CMOV
  ops: cw=reg r=rm | UInt64
  rflags: r=os
  flags: 64 cc=cmov;l;
  gas: suffix=q cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o16 0F 4D /r | CMOVGE r16, r/m16 | CMOV
  ops: cw=reg r=rm | UInt16
  rflags: r=os
  flags: cc=cmov;ge;
  gas: suffix=w cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o32 0F 4D /r | CMOVGE r32, r/m32 | CMOV
  ops: cw32_rw64=reg r=rm | UInt32
  rflags: r=os
  flags: cc=cmov;ge;
  gas: suffix=l cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o64 0F 4D /r | CMOVGE r64, r/m64 | CMOV
  ops: cw=reg r=rm | UInt64
  rflags: r=os
  flags: 64 cc=cmov;ge;
  gas: suffix=q cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o16 0F 4E /r | CMOVLE r16, r/m16 | CMOV
  ops: cw=reg r=rm | UInt16
  rflags: r=osz
  flags: cc=cmov;le;
  gas: suffix=w cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o32 0F 4E /r | CMOVLE r32, r/m32 | CMOV
  ops: cw32_rw64=reg r=rm | UInt32
  rflags: r=osz
  flags: cc=cmov;le;
  gas: suffix=l cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o64 0F 4E /r | CMOVLE r64, r/m64 | CMOV
  ops: cw=reg r=rm | UInt64
  rflags: r=osz
  flags: 64 cc=cmov;le;
  gas: suffix=q cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o16 0F 4F /r | CMOVG r16, r/m16 | CMOV
  ops: cw=reg r=rm | UInt16
  rflags: r=osz
  flags: cc=cmov;g;
  gas: suffix=w cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o32 0F 4F /r | CMOVG r32, r/m32 | CMOV
  ops: cw32_rw64=reg r=rm | UInt32
  rflags: r=osz
  flags: cc=cmov;g;
  gas: suffix=l cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: o64 0F 4F /r | CMOVG r64, r/m64 | CMOV
  ops: cw=reg r=rm | UInt64
  rflags: r=osz
  flags: 64 cc=cmov;g;
  gas: suffix=q cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.L1.0F.W0 41 /r | KANDW k1, k2, k3 | AVX512F
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.0F.W1 41 /r | KANDQ k1, k2, k3 | AVX512BW
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.66.0F.W0 41 /r | KANDB k1, k2, k3 | AVX512DQ
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.66.0F.W1 41 /r | KANDD k1, k2, k3 | AVX512BW
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.0F.W0 42 /r | KANDNW k1, k2, k3 | AVX512F
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.0F.W1 42 /r | KANDNQ k1, k2, k3 | AVX512BW
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.66.0F.W0 42 /r | KANDNB k1, k2, k3 | AVX512DQ
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.66.0F.W1 42 /r | KANDND k1, k2, k3 | AVX512BW
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L0.0F.W0 44 /r | KNOTW k1, k2 | AVX512F
  ops: w=reg r=rm
-----
INSTRUCTION: VEX.L0.0F.W1 44 /r | KNOTQ k1, k2 | AVX512BW
  ops: w=reg r=rm
-----
INSTRUCTION: VEX.L0.66.0F.W0 44 /r | KNOTB k1, k2 | AVX512DQ
  ops: w=reg r=rm
-----
INSTRUCTION: VEX.L0.66.0F.W1 44 /r | KNOTD k1, k2 | AVX512BW
  ops: w=reg r=rm
-----
INSTRUCTION: VEX.L1.0F.W0 45 /r | KORW k1, k2, k3 | AVX512F
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.0F.W1 45 /r | KORQ k1, k2, k3 | AVX512BW
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.66.0F.W0 45 /r | KORB k1, k2, k3 | AVX512DQ
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.66.0F.W1 45 /r | KORD k1, k2, k3 | AVX512BW
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.0F.W0 46 /r | KXNORW k1, k2, k3 | AVX512F
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.0F.W1 46 /r | KXNORQ k1, k2, k3 | AVX512BW
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.66.0F.W0 46 /r | KXNORB k1, k2, k3 | AVX512DQ
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.66.0F.W1 46 /r | KXNORD k1, k2, k3 | AVX512BW
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.0F.W0 47 /r | KXORW k1, k2, k3 | AVX512F
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.0F.W1 47 /r | KXORQ k1, k2, k3 | AVX512BW
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.66.0F.W0 47 /r | KXORB k1, k2, k3 | AVX512DQ
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.66.0F.W1 47 /r | KXORD k1, k2, k3 | AVX512BW
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.0F.W0 4A /r | KADDW k1, k2, k3 | AVX512DQ
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.0F.W1 4A /r | KADDQ k1, k2, k3 | AVX512BW
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.66.0F.W0 4A /r | KADDB k1, k2, k3 | AVX512DQ
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.66.0F.W1 4A /r | KADDD k1, k2, k3 | AVX512BW
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.0F.W0 4B /r | KUNPCKWD k1, k2, k3 | AVX512BW
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.0F.W1 4B /r | KUNPCKDQ k1, k2, k3 | AVX512BW
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.L1.66.0F.W0 4B /r | KUNPCKBW k1, k2, k3 | AVX512F
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: NP 0F 50 /r | MOVMSKPS r32, xmm | SSE
  ops: w=reg r=rm
-----
INSTRUCTION: NP o64 0F 50 /r | MOVMSKPS r64, xmm | SSE
  ops: w=reg r=rm
  flags: 64
  intel: reg32
-----
INSTRUCTION: VEX.128.0F.W0 50 /r | VMOVMSKPS r32, xmm2 | AVX
  ops: w=reg r=rm
  flags: wig32
-----
INSTRUCTION: VEX.128.0F.W1 50 /r | VMOVMSKPS r64, xmm2 | AVX
  ops: w=reg r=rm
  flags: 64
  intel: reg32
-----
INSTRUCTION: VEX.256.0F.W0 50 /r | VMOVMSKPS r32, ymm2 | AVX
  ops: w=reg r=rm
  flags: wig32
-----
INSTRUCTION: VEX.256.0F.W1 50 /r | VMOVMSKPS r64, ymm2 | AVX
  ops: w=reg r=rm
  flags: 64
  intel: reg32
-----
INSTRUCTION: 66 0F 50 /r | MOVMSKPD r32, xmm | SSE2
  ops: w=reg r=rm
-----
INSTRUCTION: 66 o64 0F 50 /r | MOVMSKPD r64, xmm | SSE2
  ops: w=reg r=rm
  flags: 64
  intel: reg32
-----
INSTRUCTION: VEX.128.66.0F.W0 50 /r | VMOVMSKPD r32, xmm2 | AVX
  ops: w=reg r=rm
  flags: wig32
-----
INSTRUCTION: VEX.128.66.0F.W1 50 /r | VMOVMSKPD r64, xmm2 | AVX
  ops: w=reg r=rm
  flags: 64
  intel: reg32
-----
INSTRUCTION: VEX.256.66.0F.W0 50 /r | VMOVMSKPD r32, ymm2 | AVX
  ops: w=reg r=rm
  flags: wig32
-----
INSTRUCTION: VEX.256.66.0F.W1 50 /r | VMOVMSKPD r64, ymm2 | AVX
  ops: w=reg r=rm
  flags: 64
  intel: reg32
-----
INSTRUCTION: NP 0F 51 /r | SQRTPS xmm1, xmm2/m128 | SSE
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 51 /r | VSQRTPS xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 51 /r | VSQRTPS ymm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 51 /r | VSQRTPS xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 51 /r | VSQRTPS ymm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 51 /r | VSQRTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{er} | AVX512F | N64b4
  ops: wvmm=reg r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: 66 0F 51 /r | SQRTPD xmm1, xmm2/m128 | SSE2
  ops: w=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 51 /r | VSQRTPD xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 51 /r | VSQRTPD ymm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 51 /r | VSQRTPD xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 51 /r | VSQRTPD ymm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 51 /r | VSQRTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{er} | AVX512F | N64b8
  ops: wvmm=reg r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: F3 0F 51 /r | SQRTSS xmm1, xmm2/m32 | SSE
  ops: rw=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.WIG 51 /r | VSQRTSS xmm1, xmm2, xmm3/m32 | AVX
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 51 /r | VSQRTSS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F 51 /r | SQRTSD xmm1, xmm2/m64 | SSE2
  ops: rw=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F2.0F.WIG 51 /r | VSQRTSD xmm1, xmm2, xmm3/m64 | AVX
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 51 /r | VSQRTSD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 52 /r | RSQRTPS xmm1, xmm2/m128 | SSE
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 52 /r | VRSQRTPS xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 52 /r | VRSQRTPS ymm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Float32
-----
INSTRUCTION: F3 0F 52 /r | RSQRTSS xmm1, xmm2/m32 | SSE
  ops: rw=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.WIG 52 /r | VRSQRTSS xmm1, xmm2, xmm3/m32 | AVX
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 53 /r | RCPPS xmm1, xmm2/m128 | SSE
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 53 /r | VRCPPS xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 53 /r | VRCPPS ymm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Float32
-----
INSTRUCTION: F3 0F 53 /r | RCPSS xmm1, xmm2/m32 | SSE
  ops: rw=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.WIG 53 /r | VRCPSS xmm1, xmm2, xmm3/m32 | AVX
  ops: w=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: NP 0F 54 /r | ANDPS xmm1, xmm2/m128 | SSE
  ops: rw=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 54 /r | VANDPS xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 54 /r | VANDPS ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 54 /r | VANDPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512DQ | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 54 /r | VANDPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512DQ | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 54 /r | VANDPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512DQ | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: 66 0F 54 /r | ANDPD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 54 /r | VANDPD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 54 /r | VANDPD ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 54 /r | VANDPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512DQ | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 54 /r | VANDPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512DQ | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 54 /r | VANDPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512DQ | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: NP 0F 55 /r | ANDNPS xmm1, xmm2/m128 | SSE
  ops: rw=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 55 /r | VANDNPS xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 55 /r | VANDNPS ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 55 /r | VANDNPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512DQ | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 55 /r | VANDNPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512DQ | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 55 /r | VANDNPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512DQ | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: 66 0F 55 /r | ANDNPD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 55 /r | VANDNPD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 55 /r | VANDNPD ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 55 /r | VANDNPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512DQ | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 55 /r | VANDNPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512DQ | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 55 /r | VANDNPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512DQ | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: NP 0F 56 /r | ORPS xmm1, xmm2/m128 | SSE
  ops: rw=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 56 /r | VORPS xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 56 /r | VORPS ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 56 /r | VORPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512DQ | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 56 /r | VORPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512DQ | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 56 /r | VORPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512DQ | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: 66 0F 56 /r | ORPD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 56 /r | VORPD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 56 /r | VORPD ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 56 /r | VORPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512DQ | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 56 /r | VORPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512DQ | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 56 /r | VORPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512DQ | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: NP 0F 57 /r | XORPS xmm1, xmm2/m128 | SSE
  ops: rw=reg r=rm | Packed128_Float32
  implied: zero-reg-regmem
-----
INSTRUCTION: VEX.128.0F.WIG 57 /r | VXORPS xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: VEX.256.0F.WIG 57 /r | VXORPS ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.128.0F.W0 57 /r | VXORPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512DQ | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.256.0F.W0 57 /r | VXORPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512DQ | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.512.0F.W0 57 /r | VXORPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512DQ | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: 66 0F 57 /r | XORPD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Float64
  implied: zero-reg-regmem
-----
INSTRUCTION: VEX.128.66.0F.WIG 57 /r | VXORPD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: VEX.256.66.0F.WIG 57 /r | VXORPD ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.128.66.0F.W1 57 /r | VXORPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512DQ | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.256.66.0F.W1 57 /r | VXORPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512DQ | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.512.66.0F.W1 57 /r | VXORPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512DQ | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: NP 0F 58 /r | ADDPS xmm1, xmm2/m128 | SSE
  ops: rw=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 58 /r | VADDPS xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 58 /r | VADDPS ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 58 /r | VADDPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 58 /r | VADDPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 58 /r | VADDPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: 66 0F 58 /r | ADDPD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 58 /r | VADDPD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 58 /r | VADDPD ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 58 /r | VADDPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 58 /r | VADDPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 58 /r | VADDPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: F3 0F 58 /r | ADDSS xmm1, xmm2/m32 | SSE
  ops: rw=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.WIG 58 /r | VADDSS xmm1, xmm2, xmm3/m32 | AVX
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 58 /r | VADDSS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F 58 /r | ADDSD xmm1, xmm2/m64 | SSE2
  ops: rw=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F2.0F.WIG 58 /r | VADDSD xmm1, xmm2, xmm3/m64 | AVX
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 58 /r | VADDSD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 59 /r | MULPS xmm1, xmm2/m128 | SSE
  ops: rw=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 59 /r | VMULPS xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 59 /r | VMULPS ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 59 /r | VMULPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 59 /r | VMULPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 59 /r | VMULPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: 66 0F 59 /r | MULPD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 59 /r | VMULPD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 59 /r | VMULPD ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 59 /r | VMULPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 59 /r | VMULPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 59 /r | VMULPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: F3 0F 59 /r | MULSS xmm1, xmm2/m32 | SSE
  ops: rw=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.WIG 59 /r | VMULSS xmm1, xmm2, xmm3/m32 | AVX
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 59 /r | VMULSS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F 59 /r | MULSD xmm1, xmm2/m64 | SSE2
  ops: rw=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F2.0F.WIG 59 /r | VMULSD xmm1, xmm2, xmm3/m64 | AVX
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 59 /r | VMULSD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 5A /r | CVTPS2PD xmm1, xmm2/m64 | SSE2
  ops: w=reg r=rm | Packed64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.0F.WIG 5A /r | VCVTPS2PD xmm1, xmm2/m64 | AVX
  ops: w=reg r=rm | Packed64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.0F.WIG 5A /r | VCVTPS2PD ymm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.0F.W0 5A /r | VCVTPS2PD xmm1 {k1}{z}, xmm2/m64/m32bcst | AVX512VL AVX512F | N8b4
  ops: w=reg r=rm | Packed64_Float32 Broadcast64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.0F.W0 5A /r | VCVTPS2PD ymm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm | Packed128_Float32 Broadcast128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.0F.W0 5A /r | VCVTPS2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{sae} | AVX512F | N32b4
  ops: wvmm=reg r=rm | Packed256_Float32 Broadcast256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 5A /r | CVTPD2PS xmm1, xmm2/m128 | SSE2
  ops: w=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 5A /r | VCVTPD2PS xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: VEX.256.66.0F.WIG 5A /r | VCVTPD2PS xmm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.128.66.0F.W1 5A /r | VCVTPD2PS xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=rm | Packed128_Float64 Broadcast128_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.66.0F.W1 5A /r | VCVTPD2PS xmm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=rm | Packed256_Float64 Broadcast256_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.66.0F.W1 5A /r | VCVTPD2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er} | AVX512F | N64b8
  ops: w=reg r=rm | Packed512_Float64 Broadcast512_Float64
  masm: flags=force-size=default
-----
INSTRUCTION: F3 0F 5A /r | CVTSS2SD xmm1, xmm2/m32 | SSE2
  ops: rw=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.WIG 5A /r | VCVTSS2SD xmm1, xmm2, xmm3/m32 | AVX
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 5A /r | VCVTSS2SD xmm1 {k1}{z}, xmm2, xmm3/m32{sae} | AVX512F | N4
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F 5A /r | CVTSD2SS xmm1, xmm2/m64 | SSE2
  ops: rw=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F2.0F.WIG 5A /r | VCVTSD2SS xmm1, xmm2, xmm3/m64 | AVX
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 5A /r | VCVTSD2SS xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 5B /r | CVTDQ2PS xmm1, xmm2/m128 | SSE2
  ops: w=reg r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.128.0F.WIG 5B /r | VCVTDQ2PS xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.0F.WIG 5B /r | VCVTDQ2PS ymm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.0F.W0 5B /r | VCVTDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm | Packed128_Int32 Broadcast128_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.0F.W0 5B /r | VCVTDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=rm | Packed256_Int32 Broadcast256_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.0F.W0 5B /r | VCVTDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er} | AVX512F | N64b4
  ops: wvmm=reg r=rm | Packed512_Int32 Broadcast512_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.0F.W1 5B /r | VCVTQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512DQ | N16b8
  ops: w=reg r=rm | Packed128_Int64 Broadcast128_Int64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.0F.W1 5B /r | VCVTQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512DQ | N32b8
  ops: w=reg r=rm | Packed256_Int64 Broadcast256_Int64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.0F.W1 5B /r | VCVTQQ2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er} | AVX512DQ | N64b8
  ops: w=reg r=rm | Packed512_Int64 Broadcast512_Int64
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 5B /r | CVTPS2DQ xmm1, xmm2/m128 | SSE2
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.66.0F.WIG 5B /r | VCVTPS2DQ xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F.WIG 5B /r | VCVTPS2DQ ymm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W0 5B /r | VCVTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm | Packed128_Float32 Broadcast128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F.W0 5B /r | VCVTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=rm | Packed256_Float32 Broadcast256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F.W0 5B /r | VCVTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er} | AVX512F | N64b4
  ops: wvmm=reg r=rm | Packed512_Float32 Broadcast512_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: F3 0F 5B /r | CVTTPS2DQ xmm1, xmm2/m128 | SSE2
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.F3.0F.WIG 5B /r | VCVTTPS2DQ xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.F3.0F.WIG 5B /r | VCVTTPS2DQ ymm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F.W0 5B /r | VCVTTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm | Packed128_Float32 Broadcast128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F.W0 5B /r | VCVTTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=rm | Packed256_Float32 Broadcast256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F.W0 5B /r | VCVTTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae} | AVX512F | N64b4
  ops: wvmm=reg r=rm | Packed512_Float32 Broadcast512_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 5C /r | SUBPS xmm1, xmm2/m128 | SSE
  ops: rw=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 5C /r | VSUBPS xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 5C /r | VSUBPS ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 5C /r | VSUBPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 5C /r | VSUBPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 5C /r | VSUBPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: 66 0F 5C /r | SUBPD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 5C /r | VSUBPD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 5C /r | VSUBPD ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 5C /r | VSUBPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 5C /r | VSUBPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 5C /r | VSUBPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: F3 0F 5C /r | SUBSS xmm1, xmm2/m32 | SSE
  ops: rw=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.WIG 5C /r | VSUBSS xmm1, xmm2, xmm3/m32 | AVX
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 5C /r | VSUBSS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F 5C /r | SUBSD xmm1, xmm2/m64 | SSE2
  ops: rw=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F2.0F.WIG 5C /r | VSUBSD xmm1, xmm2, xmm3/m64 | AVX
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 5C /r | VSUBSD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 5D /r | MINPS xmm1, xmm2/m128 | SSE
  ops: rw=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 5D /r | VMINPS xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 5D /r | VMINPS ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 5D /r | VMINPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 5D /r | VMINPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 5D /r | VMINPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae} | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: 66 0F 5D /r | MINPD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 5D /r | VMINPD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 5D /r | VMINPD ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 5D /r | VMINPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 5D /r | VMINPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 5D /r | VMINPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae} | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: F3 0F 5D /r | MINSS xmm1, xmm2/m32 | SSE
  ops: rw=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.WIG 5D /r | VMINSS xmm1, xmm2, xmm3/m32 | AVX
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 5D /r | VMINSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae} | AVX512F | N4
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F 5D /r | MINSD xmm1, xmm2/m64 | SSE2
  ops: rw=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F2.0F.WIG 5D /r | VMINSD xmm1, xmm2, xmm3/m64 | AVX
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 5D /r | VMINSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae} | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 5E /r | DIVPS xmm1, xmm2/m128 | SSE
  ops: rw=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 5E /r | VDIVPS xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 5E /r | VDIVPS ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 5E /r | VDIVPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 5E /r | VDIVPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 5E /r | VDIVPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: 66 0F 5E /r | DIVPD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 5E /r | VDIVPD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 5E /r | VDIVPD ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 5E /r | VDIVPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 5E /r | VDIVPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 5E /r | VDIVPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: F3 0F 5E /r | DIVSS xmm1, xmm2/m32 | SSE
  ops: rw=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.WIG 5E /r | VDIVSS xmm1, xmm2, xmm3/m32 | AVX
  ops: w=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 5E /r | VDIVSS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F 5E /r | DIVSD xmm1, xmm2/m64 | SSE2
  ops: rw=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F2.0F.WIG 5E /r | VDIVSD xmm1, xmm2, xmm3/m64 | AVX
  ops: w=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 5E /r | VDIVSD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 5F /r | MAXPS xmm1, xmm2/m128 | SSE
  ops: rw=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG 5F /r | VMAXPS xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG 5F /r | VMAXPS ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 5F /r | VMAXPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 5F /r | VMAXPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 5F /r | VMAXPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae} | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: 66 0F 5F /r | MAXPD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 5F /r | VMAXPD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 5F /r | VMAXPD ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 5F /r | VMAXPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 5F /r | VMAXPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 5F /r | VMAXPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae} | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: F3 0F 5F /r | MAXSS xmm1, xmm2/m32 | SSE
  ops: rw=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.WIG 5F /r | VMAXSS xmm1, xmm2, xmm3/m32 | AVX
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 5F /r | VMAXSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae} | AVX512F | N4
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F 5F /r | MAXSD xmm1, xmm2/m64 | SSE2
  ops: rw=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F2.0F.WIG 5F /r | VMAXSD xmm1, xmm2, xmm3/m64 | AVX
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 5F /r | VMAXSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae} | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 60 /r | PUNPCKLBW mm, mm/m32 | MMX
  ops: rw=reg r=rm | Packed32_UInt8
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 60 /r | PUNPCKLBW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.128.66.0F.WIG 60 /r | VPUNPCKLBW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.66.0F.WIG 60 /r | VPUNPCKLBW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.128.66.0F.WIG 60 /r | VPUNPCKLBW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F.WIG 60 /r | VPUNPCKLBW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F.WIG 60 /r | VPUNPCKLBW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt8
-----
INSTRUCTION: NP 0F 61 /r | PUNPCKLWD mm, mm/m32 | MMX
  ops: rw=reg r=rm | Packed32_UInt16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 61 /r | PUNPCKLWD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.66.0F.WIG 61 /r | VPUNPCKLWD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.66.0F.WIG 61 /r | VPUNPCKLWD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.128.66.0F.WIG 61 /r | VPUNPCKLWD xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F.WIG 61 /r | VPUNPCKLWD ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F.WIG 61 /r | VPUNPCKLWD zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt16
-----
INSTRUCTION: NP 0F 62 /r | PUNPCKLDQ mm, mm/m32 | MMX
  ops: rw=reg r=rm | Int32
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 62 /r | PUNPCKLDQ xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.128.66.0F.WIG 62 /r | VPUNPCKLDQ xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F.WIG 62 /r | VPUNPCKLDQ ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
-----
INSTRUCTION: EVEX.128.66.0F.W0 62 /r | VPUNPCKLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F.W0 62 /r | VPUNPCKLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F.W0 62 /r | VPUNPCKLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: NP 0F 63 /r | PACKSSWB mm1, mm2/m64 | MMX
  ops: rw=reg r=rm | Packed64_Int16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 63 /r | PACKSSWB xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.128.66.0F.WIG 63 /r | VPACKSSWB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F.WIG 63 /r | VPACKSSWB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.128.66.0F.WIG 63 /r | VPACKSSWB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: EVEX.256.66.0F.WIG 63 /r | VPACKSSWB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.512.66.0F.WIG 63 /r | VPACKSSWB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int16
-----
INSTRUCTION: NP 0F 64 /r | PCMPGTB mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_Int8
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 64 /r | PCMPGTB xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.128.66.0F.WIG 64 /r | VPCMPGTB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.256.66.0F.WIG 64 /r | VPCMPGTB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int8
-----
INSTRUCTION: EVEX.128.66.0F.WIG 64 /r | VPCMPGTB k1 {k2}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int8
  flags: implied-z
-----
INSTRUCTION: EVEX.256.66.0F.WIG 64 /r | VPCMPGTB k1 {k2}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int8
  flags: implied-z
-----
INSTRUCTION: EVEX.512.66.0F.WIG 64 /r | VPCMPGTB k1 {k2}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: w=reg r=vvvv r=rm | Packed512_Int8
  flags: implied-z
-----
INSTRUCTION: NP 0F 65 /r | PCMPGTW mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_Int16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 65 /r | PCMPGTW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.128.66.0F.WIG 65 /r | VPCMPGTW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F.WIG 65 /r | VPCMPGTW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.128.66.0F.WIG 65 /r | VPCMPGTW k1 {k2}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int16
  flags: implied-z
-----
INSTRUCTION: EVEX.256.66.0F.WIG 65 /r | VPCMPGTW k1 {k2}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int16
  flags: implied-z
-----
INSTRUCTION: EVEX.512.66.0F.WIG 65 /r | VPCMPGTW k1 {k2}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: w=reg r=vvvv r=rm | Packed512_Int16
  flags: implied-z
-----
INSTRUCTION: NP 0F 66 /r | PCMPGTD mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_Int32
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 66 /r | PCMPGTD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.128.66.0F.WIG 66 /r | VPCMPGTD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.256.66.0F.WIG 66 /r | VPCMPGTD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int32
-----
INSTRUCTION: EVEX.128.66.0F.W0 66 /r | VPCMPGTD k1 {k2}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Int32 Broadcast128_Int32
  flags: implied-z
-----
INSTRUCTION: EVEX.256.66.0F.W0 66 /r | VPCMPGTD k1 {k2}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Int32 Broadcast256_Int32
  flags: implied-z
-----
INSTRUCTION: EVEX.512.66.0F.W0 66 /r | VPCMPGTD k1 {k2}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: w=reg r=vvvv r=rm | Packed512_Int32 Broadcast512_Int32
  flags: implied-z
-----
INSTRUCTION: NP 0F 67 /r | PACKUSWB mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_Int16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 67 /r | PACKUSWB xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.128.66.0F.WIG 67 /r | VPACKUSWB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F.WIG 67 /r | VPACKUSWB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.128.66.0F.WIG 67 /r | VPACKUSWB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: EVEX.256.66.0F.WIG 67 /r | VPACKUSWB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.512.66.0F.WIG 67 /r | VPACKUSWB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int16
-----
INSTRUCTION: NP 0F 68 /r | PUNPCKHBW mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt8
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 68 /r | PUNPCKHBW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.128.66.0F.WIG 68 /r | VPUNPCKHBW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.66.0F.WIG 68 /r | VPUNPCKHBW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.128.66.0F.WIG 68 /r | VPUNPCKHBW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F.WIG 68 /r | VPUNPCKHBW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F.WIG 68 /r | VPUNPCKHBW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt8
-----
INSTRUCTION: NP 0F 69 /r | PUNPCKHWD mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 69 /r | PUNPCKHWD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.66.0F.WIG 69 /r | VPUNPCKHWD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.66.0F.WIG 69 /r | VPUNPCKHWD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.128.66.0F.WIG 69 /r | VPUNPCKHWD xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F.WIG 69 /r | VPUNPCKHWD ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F.WIG 69 /r | VPUNPCKHWD zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt16
-----
INSTRUCTION: NP 0F 6A /r | PUNPCKHDQ mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt32
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 6A /r | PUNPCKHDQ xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.128.66.0F.WIG 6A /r | VPUNPCKHDQ xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F.WIG 6A /r | VPUNPCKHDQ ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
-----
INSTRUCTION: EVEX.128.66.0F.W0 6A /r | VPUNPCKHDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F.W0 6A /r | VPUNPCKHDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F.W0 6A /r | VPUNPCKHDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: NP 0F 6B /r | PACKSSDW mm1, mm2/m64 | MMX
  ops: rw=reg r=rm | Packed64_Int32
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 6B /r | PACKSSDW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.128.66.0F.WIG 6B /r | VPACKSSDW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.256.66.0F.WIG 6B /r | VPACKSSDW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int32
-----
INSTRUCTION: EVEX.128.66.0F.W0 6B /r | VPACKSSDW xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512BW | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Int32 Broadcast128_Int32
-----
INSTRUCTION: EVEX.256.66.0F.W0 6B /r | VPACKSSDW ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512BW | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Int32 Broadcast256_Int32
-----
INSTRUCTION: EVEX.512.66.0F.W0 6B /r | VPACKSSDW zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512BW | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int32 Broadcast512_Int32
-----
INSTRUCTION: 66 0F 6C /r | PUNPCKLQDQ xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt64
-----
INSTRUCTION: VEX.128.66.0F.WIG 6C /r | VPUNPCKLQDQ xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: VEX.256.66.0F.WIG 6C /r | VPUNPCKLQDQ ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt64
-----
INSTRUCTION: EVEX.128.66.0F.W1 6C /r | VPUNPCKLQDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F.W1 6C /r | VPUNPCKLQDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F.W1 6C /r | VPUNPCKLQDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: 66 0F 6D /r | PUNPCKHQDQ xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt64
-----
INSTRUCTION: VEX.128.66.0F.WIG 6D /r | VPUNPCKHQDQ xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: VEX.256.66.0F.WIG 6D /r | VPUNPCKHQDQ ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt64
-----
INSTRUCTION: EVEX.128.66.0F.W1 6D /r | VPUNPCKHQDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F.W1 6D /r | VPUNPCKHQDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F.W1 6D /r | VPUNPCKHQDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: NP 0F 6E /r | MOVD mm, r/m32 | MMX
  ops: w=reg r=rm | UInt32
  flags: tsx-impl-abort
  masm: flags=force-size=default
-----
INSTRUCTION: NP o64 0F 6E /r | MOVQ mm, r/m64 | MMX
  ops: w=reg r=rm | UInt64
  flags: 64 tsx-impl-abort asm-ig-mem
-----
INSTRUCTION: 66 0F 6E /r | MOVD xmm, r/m32 | SSE2
  ops: w=reg r=rm | UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: 66 o64 0F 6E /r | MOVQ xmm, r/m64 | SSE2
  ops: w=reg r=rm | UInt64
  flags: 64 asm-ig-mem
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F.W0 6E /r | VMOVD xmm1, r/m32 | AVX
  ops: w=reg r=rm | UInt32
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F.W1 6E /r | VMOVQ xmm1, r/m64 | AVX
  ops: w=reg r=rm | UInt64
  flags: 64 asm-ig-mem
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W0 6E /r | VMOVD xmm1, r/m32 | AVX512F | N4
  ops: w=reg r=rm | UInt32
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W1 6E /r | VMOVQ xmm1, r/m64 | AVX512F | N8
  ops: w=reg r=rm | UInt64
  flags: 64 asm-ig-mem
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 6F /r | MOVQ mm, mm/m64 | MMX
  ops: w=reg r=rm | UInt64
  flags: tsx-impl-abort
-----
INSTRUCTION: 66 0F 6F /r | MOVDQA xmm1, xmm2/m128 | SSE2
  ops: w=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.128.66.0F.WIG 6F /r | VMOVDQA xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F.WIG 6F /r | VMOVDQA ymm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W0 6F /r | VMOVDQA32 xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F.W0 6F /r | VMOVDQA32 ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512F | N32
  ops: w=reg r=rm | Packed256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F.W0 6F /r | VMOVDQA32 zmm1 {k1}{z}, zmm2/m512 | AVX512F | N64
  ops: wvmm=reg r=rm | Packed512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F.W1 6F /r | VMOVDQA64 xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F.W1 6F /r | VMOVDQA64 ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512F | N32
  ops: w=reg r=rm | Packed256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F.W1 6F /r | VMOVDQA64 zmm1 {k1}{z}, zmm2/m512 | AVX512F | N64
  ops: wvmm=reg r=rm | Packed512_UInt64
-----
INSTRUCTION: F3 0F 6F /r | MOVDQU xmm1, xmm2/m128 | SSE2
  ops: w=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.128.F3.0F.WIG 6F /r | VMOVDQU xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.F3.0F.WIG 6F /r | VMOVDQU ymm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F.W0 6F /r | VMOVDQU32 xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: EVEX.256.F3.0F.W0 6F /r | VMOVDQU32 ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512F | N32
  ops: w=reg r=rm | Packed256_UInt32
-----
INSTRUCTION: EVEX.512.F3.0F.W0 6F /r | VMOVDQU32 zmm1 {k1}{z}, zmm2/m512 | AVX512F | N64
  ops: wvmm=reg r=rm | Packed512_UInt32
-----
INSTRUCTION: EVEX.128.F3.0F.W1 6F /r | VMOVDQU64 xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_UInt64
-----
INSTRUCTION: EVEX.256.F3.0F.W1 6F /r | VMOVDQU64 ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512F | N32
  ops: w=reg r=rm | Packed256_UInt64
-----
INSTRUCTION: EVEX.512.F3.0F.W1 6F /r | VMOVDQU64 zmm1 {k1}{z}, zmm2/m512 | AVX512F | N64
  ops: wvmm=reg r=rm | Packed512_UInt64
-----
INSTRUCTION: EVEX.128.F2.0F.W0 6F /r | VMOVDQU8 xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.F2.0F.W0 6F /r | VMOVDQU8 ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.F2.0F.W0 6F /r | VMOVDQU8 zmm1 {k1}{z}, zmm2/m512 | AVX512BW | N64
  ops: wvmm=reg r=rm | Packed512_UInt8
-----
INSTRUCTION: EVEX.128.F2.0F.W1 6F /r | VMOVDQU16 xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.F2.0F.W1 6F /r | VMOVDQU16 ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.F2.0F.W1 6F /r | VMOVDQU16 zmm1 {k1}{z}, zmm2/m512 | AVX512BW | N64
  ops: wvmm=reg r=rm | Packed512_UInt16
-----
INSTRUCTION: NP 0F 70 /r ib | PSHUFW mm1, mm2/m64, imm8 | SSE
  ops: w=reg r=rm r=imm | Packed64_UInt16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 70 /r ib | PSHUFD xmm1, xmm2/m128, imm8 | SSE2
  ops: w=reg r=rm r=imm | Packed128_UInt32
-----
INSTRUCTION: VEX.128.66.0F.WIG 70 /r ib | VPSHUFD xmm1, xmm2/m128, imm8 | AVX
  ops: w=reg r=rm r=imm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F.WIG 70 /r ib | VPSHUFD ymm1, ymm2/m256, imm8 | AVX2
  ops: w=reg r=rm r=imm | Packed256_UInt32
-----
INSTRUCTION: EVEX.128.66.0F.W0 70 /r ib | VPSHUFD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8 | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm r=imm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F.W0 70 /r ib | VPSHUFD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: w=reg r=rm r=imm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F.W0 70 /r ib | VPSHUFD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8 | AVX512F | N64b4
  ops: wvmm=reg r=rm r=imm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: F3 0F 70 /r ib | PSHUFHW xmm1, xmm2/m128, imm8 | SSE2
  ops: w=reg r=rm r=imm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.F3.0F.WIG 70 /r ib | VPSHUFHW xmm1, xmm2/m128, imm8 | AVX
  ops: w=reg r=rm r=imm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.F3.0F.WIG 70 /r ib | VPSHUFHW ymm1, ymm2/m256, imm8 | AVX2
  ops: w=reg r=rm r=imm | Packed256_UInt16
-----
INSTRUCTION: EVEX.128.F3.0F.WIG 70 /r ib | VPSHUFHW xmm1 {k1}{z}, xmm2/m128, imm8 | AVX512VL AVX512BW | N16
  ops: w=reg r=rm r=imm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.F3.0F.WIG 70 /r ib | VPSHUFHW ymm1 {k1}{z}, ymm2/m256, imm8 | AVX512VL AVX512BW | N32
  ops: w=reg r=rm r=imm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.F3.0F.WIG 70 /r ib | VPSHUFHW zmm1 {k1}{z}, zmm2/m512, imm8 | AVX512BW | N64
  ops: wvmm=reg r=rm r=imm | Packed512_UInt16
-----
INSTRUCTION: F2 0F 70 /r ib | PSHUFLW xmm1, xmm2/m128, imm8 | SSE2
  ops: w=reg r=rm r=imm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.F2.0F.WIG 70 /r ib | VPSHUFLW xmm1, xmm2/m128, imm8 | AVX
  ops: w=reg r=rm r=imm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.F2.0F.WIG 70 /r ib | VPSHUFLW ymm1, ymm2/m256, imm8 | AVX2
  ops: w=reg r=rm r=imm | Packed256_UInt16
-----
INSTRUCTION: EVEX.128.F2.0F.WIG 70 /r ib | VPSHUFLW xmm1 {k1}{z}, xmm2/m128, imm8 | AVX512VL AVX512BW | N16
  ops: w=reg r=rm r=imm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.F2.0F.WIG 70 /r ib | VPSHUFLW ymm1 {k1}{z}, ymm2/m256, imm8 | AVX512VL AVX512BW | N32
  ops: w=reg r=rm r=imm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.F2.0F.WIG 70 /r ib | VPSHUFLW zmm1 {k1}{z}, zmm2/m512, imm8 | AVX512BW | N64
  ops: wvmm=reg r=rm r=imm | Packed512_UInt16
-----
INSTRUCTION: NP 0F 71 /2 ib | PSRLW mm, imm8 | MMX
  ops: rw=rm r=imm
  flags: tsx-impl-abort
-----
INSTRUCTION: 66 0F 71 /2 ib | PSRLW xmm1, imm8 | SSE2
  ops: rw=rm r=imm
-----
INSTRUCTION: VEX.128.66.0F.WIG 71 /2 ib | VPSRLW xmm1, xmm2, imm8 | AVX
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: VEX.256.66.0F.WIG 71 /2 ib | VPSRLW ymm1, ymm2, imm8 | AVX2
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: EVEX.128.66.0F.WIG 71 /2 ib | VPSRLW xmm1 {k1}{z}, xmm2/m128, imm8 | AVX512VL AVX512BW | N16
  ops: w=vvvv r=rm r=imm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F.WIG 71 /2 ib | VPSRLW ymm1 {k1}{z}, ymm2/m256, imm8 | AVX512VL AVX512BW | N32
  ops: w=vvvv r=rm r=imm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F.WIG 71 /2 ib | VPSRLW zmm1 {k1}{z}, zmm2/m512, imm8 | AVX512BW | N64
  ops: wvmm=vvvv r=rm r=imm | Packed512_UInt16
-----
INSTRUCTION: NP 0F 71 /4 ib | PSRAW mm, imm8 | MMX
  ops: rw=rm r=imm
  flags: tsx-impl-abort
-----
INSTRUCTION: 66 0F 71 /4 ib | PSRAW xmm1, imm8 | SSE2
  ops: rw=rm r=imm
-----
INSTRUCTION: VEX.128.66.0F.WIG 71 /4 ib | VPSRAW xmm1, xmm2, imm8 | AVX
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: VEX.256.66.0F.WIG 71 /4 ib | VPSRAW ymm1, ymm2, imm8 | AVX2
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: EVEX.128.66.0F.WIG 71 /4 ib | VPSRAW xmm1 {k1}{z}, xmm2/m128, imm8 | AVX512VL AVX512BW | N16
  ops: w=vvvv r=rm r=imm | Packed128_Int16
-----
INSTRUCTION: EVEX.256.66.0F.WIG 71 /4 ib | VPSRAW ymm1 {k1}{z}, ymm2/m256, imm8 | AVX512VL AVX512BW | N32
  ops: w=vvvv r=rm r=imm | Packed256_Int16
-----
INSTRUCTION: EVEX.512.66.0F.WIG 71 /4 ib | VPSRAW zmm1 {k1}{z}, zmm2/m512, imm8 | AVX512BW | N64
  ops: wvmm=vvvv r=rm r=imm | Packed512_Int16
-----
INSTRUCTION: NP 0F 71 /6 ib | PSLLW mm1, imm8 | MMX
  ops: rw=rm r=imm
  flags: tsx-impl-abort
-----
INSTRUCTION: 66 0F 71 /6 ib | PSLLW xmm1, imm8 | SSE2
  ops: rw=rm r=imm
-----
INSTRUCTION: VEX.128.66.0F.WIG 71 /6 ib | VPSLLW xmm1, xmm2, imm8 | AVX
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: VEX.256.66.0F.WIG 71 /6 ib | VPSLLW ymm1, ymm2, imm8 | AVX2
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: EVEX.128.66.0F.WIG 71 /6 ib | VPSLLW xmm1 {k1}{z}, xmm2/m128, imm8 | AVX512VL AVX512BW | N16
  ops: w=vvvv r=rm r=imm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F.WIG 71 /6 ib | VPSLLW ymm1 {k1}{z}, ymm2/m256, imm8 | AVX512VL AVX512BW | N32
  ops: w=vvvv r=rm r=imm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F.WIG 71 /6 ib | VPSLLW zmm1 {k1}{z}, zmm2/m512, imm8 | AVX512BW | N64
  ops: wvmm=vvvv r=rm r=imm | Packed512_UInt16
-----
INSTRUCTION: EVEX.128.66.0F.W0 72 /0 ib | VPRORD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8 | AVX512VL AVX512F | N16b4
  ops: w=vvvv r=rm r=imm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F.W0 72 /0 ib | VPRORD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: w=vvvv r=rm r=imm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F.W0 72 /0 ib | VPRORD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8 | AVX512F | N64b4
  ops: wvmm=vvvv r=rm r=imm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F.W1 72 /0 ib | VPRORQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8 | AVX512VL AVX512F | N16b8
  ops: w=vvvv r=rm r=imm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F.W1 72 /0 ib | VPRORQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=vvvv r=rm r=imm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F.W1 72 /0 ib | VPRORQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8 | AVX512F | N64b8
  ops: wvmm=vvvv r=rm r=imm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: EVEX.128.66.0F.W0 72 /1 ib | VPROLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8 | AVX512VL AVX512F | N16b4
  ops: w=vvvv r=rm r=imm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F.W0 72 /1 ib | VPROLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: w=vvvv r=rm r=imm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F.W0 72 /1 ib | VPROLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8 | AVX512F | N64b4
  ops: wvmm=vvvv r=rm r=imm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F.W1 72 /1 ib | VPROLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8 | AVX512VL AVX512F | N16b8
  ops: w=vvvv r=rm r=imm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F.W1 72 /1 ib | VPROLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=vvvv r=rm r=imm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F.W1 72 /1 ib | VPROLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8 | AVX512F | N64b8
  ops: wvmm=vvvv r=rm r=imm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: NP 0F 72 /2 ib | PSRLD mm, imm8 | MMX
  ops: rw=rm r=imm
  flags: tsx-impl-abort
-----
INSTRUCTION: 66 0F 72 /2 ib | PSRLD xmm1, imm8 | SSE2
  ops: rw=rm r=imm
-----
INSTRUCTION: VEX.128.66.0F.WIG 72 /2 ib | VPSRLD xmm1, xmm2, imm8 | AVX
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: VEX.256.66.0F.WIG 72 /2 ib | VPSRLD ymm1, ymm2, imm8 | AVX2
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: EVEX.128.66.0F.W0 72 /2 ib | VPSRLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8 | AVX512VL AVX512F | N16b4
  ops: w=vvvv r=rm r=imm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F.W0 72 /2 ib | VPSRLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: w=vvvv r=rm r=imm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F.W0 72 /2 ib | VPSRLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8 | AVX512F | N64b4
  ops: wvmm=vvvv r=rm r=imm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: NP 0F 72 /4 ib | PSRAD mm, imm8 | MMX
  ops: rw=rm r=imm
  flags: tsx-impl-abort
-----
INSTRUCTION: 66 0F 72 /4 ib | PSRAD xmm1, imm8 | SSE2
  ops: rw=rm r=imm
-----
INSTRUCTION: VEX.128.66.0F.WIG 72 /4 ib | VPSRAD xmm1, xmm2, imm8 | AVX
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: VEX.256.66.0F.WIG 72 /4 ib | VPSRAD ymm1, ymm2, imm8 | AVX2
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: EVEX.128.66.0F.W0 72 /4 ib | VPSRAD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8 | AVX512VL AVX512F | N16b4
  ops: w=vvvv r=rm r=imm | Packed128_Int32 Broadcast128_Int32
-----
INSTRUCTION: EVEX.256.66.0F.W0 72 /4 ib | VPSRAD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: w=vvvv r=rm r=imm | Packed256_Int32 Broadcast256_Int32
-----
INSTRUCTION: EVEX.512.66.0F.W0 72 /4 ib | VPSRAD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8 | AVX512F | N64b4
  ops: wvmm=vvvv r=rm r=imm | Packed512_Int32 Broadcast512_Int32
-----
INSTRUCTION: EVEX.128.66.0F.W1 72 /4 ib | VPSRAQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8 | AVX512VL AVX512F | N16b8
  ops: w=vvvv r=rm r=imm | Packed128_Int64 Broadcast128_Int64
-----
INSTRUCTION: EVEX.256.66.0F.W1 72 /4 ib | VPSRAQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=vvvv r=rm r=imm | Packed256_Int64 Broadcast256_Int64
-----
INSTRUCTION: EVEX.512.66.0F.W1 72 /4 ib | VPSRAQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8 | AVX512F | N64b8
  ops: wvmm=vvvv r=rm r=imm | Packed512_Int64 Broadcast512_Int64
-----
INSTRUCTION: NP 0F 72 /6 ib | PSLLD mm, imm8 | MMX
  ops: rw=rm r=imm
  flags: tsx-impl-abort
-----
INSTRUCTION: 66 0F 72 /6 ib | PSLLD xmm1, imm8 | SSE2
  ops: rw=rm r=imm
-----
INSTRUCTION: VEX.128.66.0F.WIG 72 /6 ib | VPSLLD xmm1, xmm2, imm8 | AVX
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: VEX.256.66.0F.WIG 72 /6 ib | VPSLLD ymm1, ymm2, imm8 | AVX2
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: EVEX.128.66.0F.W0 72 /6 ib | VPSLLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8 | AVX512VL AVX512F | N16b4
  ops: w=vvvv r=rm r=imm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F.W0 72 /6 ib | VPSLLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: w=vvvv r=rm r=imm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F.W0 72 /6 ib | VPSLLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8 | AVX512F | N64b4
  ops: wvmm=vvvv r=rm r=imm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: NP 0F 73 /2 ib | PSRLQ mm, imm8 | MMX
  ops: rw=rm r=imm
  flags: tsx-impl-abort
-----
INSTRUCTION: 66 0F 73 /2 ib | PSRLQ xmm1, imm8 | SSE2
  ops: rw=rm r=imm
-----
INSTRUCTION: VEX.128.66.0F.WIG 73 /2 ib | VPSRLQ xmm1, xmm2, imm8 | AVX
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: VEX.256.66.0F.WIG 73 /2 ib | VPSRLQ ymm1, ymm2, imm8 | AVX2
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: EVEX.128.66.0F.W1 73 /2 ib | VPSRLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8 | AVX512VL AVX512F | N16b8
  ops: w=vvvv r=rm r=imm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F.W1 73 /2 ib | VPSRLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=vvvv r=rm r=imm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F.W1 73 /2 ib | VPSRLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8 | AVX512F | N64b8
  ops: wvmm=vvvv r=rm r=imm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: 66 0F 73 /3 ib | PSRLDQ xmm1, imm8 | SSE2
  ops: rw=rm r=imm
-----
INSTRUCTION: VEX.128.66.0F.WIG 73 /3 ib | VPSRLDQ xmm1, xmm2, imm8 | AVX
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: VEX.256.66.0F.WIG 73 /3 ib | VPSRLDQ ymm1, ymm2, imm8 | AVX2
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: EVEX.128.66.0F.WIG 73 /3 ib | VPSRLDQ xmm1, xmm2/m128, imm8 | AVX512VL AVX512BW | N16
  ops: w=vvvv r=rm r=imm | UInt128
-----
INSTRUCTION: EVEX.256.66.0F.WIG 73 /3 ib | VPSRLDQ ymm1, ymm2/m256, imm8 | AVX512VL AVX512BW | N32
  ops: w=vvvv r=rm r=imm | Packed256_UInt128
-----
INSTRUCTION: EVEX.512.66.0F.WIG 73 /3 ib | VPSRLDQ zmm1, zmm2/m512, imm8 | AVX512BW | N64
  ops: w=vvvv r=rm r=imm | Packed512_UInt128
-----
INSTRUCTION: NP 0F 73 /6 ib | PSLLQ mm, imm8 | MMX
  ops: rw=rm r=imm
  flags: tsx-impl-abort
-----
INSTRUCTION: 66 0F 73 /6 ib | PSLLQ xmm1, imm8 | SSE2
  ops: rw=rm r=imm
-----
INSTRUCTION: VEX.128.66.0F.WIG 73 /6 ib | VPSLLQ xmm1, xmm2, imm8 | AVX
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: VEX.256.66.0F.WIG 73 /6 ib | VPSLLQ ymm1, ymm2, imm8 | AVX2
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: EVEX.128.66.0F.W1 73 /6 ib | VPSLLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8 | AVX512VL AVX512F | N16b8
  ops: w=vvvv r=rm r=imm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F.W1 73 /6 ib | VPSLLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=vvvv r=rm r=imm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F.W1 73 /6 ib | VPSLLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8 | AVX512F | N64b8
  ops: wvmm=vvvv r=rm r=imm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: 66 0F 73 /7 ib | PSLLDQ xmm1, imm8 | SSE2
  ops: rw=rm r=imm
-----
INSTRUCTION: VEX.128.66.0F.WIG 73 /7 ib | VPSLLDQ xmm1, xmm2, imm8 | AVX
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: VEX.256.66.0F.WIG 73 /7 ib | VPSLLDQ ymm1, ymm2, imm8 | AVX2
  ops: w=vvvv r=rm r=imm
-----
INSTRUCTION: EVEX.128.66.0F.WIG 73 /7 ib | VPSLLDQ xmm1, xmm2/m128, imm8 | AVX512VL AVX512BW | N16
  ops: w=vvvv r=rm r=imm | UInt128
-----
INSTRUCTION: EVEX.256.66.0F.WIG 73 /7 ib | VPSLLDQ ymm1, ymm2/m256, imm8 | AVX512VL AVX512BW | N32
  ops: w=vvvv r=rm r=imm | Packed256_UInt128
-----
INSTRUCTION: EVEX.512.66.0F.WIG 73 /7 ib | VPSLLDQ zmm1, zmm2/m512, imm8 | AVX512BW | N64
  ops: w=vvvv r=rm r=imm | Packed512_UInt128
-----
INSTRUCTION: NP 0F 74 /r | PCMPEQB mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt8
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 74 /r | PCMPEQB xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.128.66.0F.WIG 74 /r | VPCMPEQB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.66.0F.WIG 74 /r | VPCMPEQB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.128.66.0F.WIG 74 /r | VPCMPEQB k1 {k2}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
  flags: implied-z
-----
INSTRUCTION: EVEX.256.66.0F.WIG 74 /r | VPCMPEQB k1 {k2}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
  flags: implied-z
-----
INSTRUCTION: EVEX.512.66.0F.WIG 74 /r | VPCMPEQB k1 {k2}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: w=reg r=vvvv r=rm | Packed512_UInt8
  flags: implied-z
-----
INSTRUCTION: NP 0F 75 /r | PCMPEQW mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 75 /r | PCMPEQW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.66.0F.WIG 75 /r | VPCMPEQW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.66.0F.WIG 75 /r | VPCMPEQW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.128.66.0F.WIG 75 /r | VPCMPEQW k1 {k2}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
  flags: implied-z
-----
INSTRUCTION: EVEX.256.66.0F.WIG 75 /r | VPCMPEQW k1 {k2}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
  flags: implied-z
-----
INSTRUCTION: EVEX.512.66.0F.WIG 75 /r | VPCMPEQW k1 {k2}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: w=reg r=vvvv r=rm | Packed512_UInt16
  flags: implied-z
-----
INSTRUCTION: NP 0F 76 /r | PCMPEQD mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt32
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 76 /r | PCMPEQD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.128.66.0F.WIG 76 /r | VPCMPEQD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F.WIG 76 /r | VPCMPEQD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
-----
INSTRUCTION: EVEX.128.66.0F.W0 76 /r | VPCMPEQD k1 {k2}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
  flags: implied-z
-----
INSTRUCTION: EVEX.256.66.0F.W0 76 /r | VPCMPEQD k1 {k2}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
  flags: implied-z
-----
INSTRUCTION: EVEX.512.66.0F.W0 76 /r | VPCMPEQD k1 {k2}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: w=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
  flags: implied-z
-----
INSTRUCTION: NP 0F 77 | EMMS | MMX
  flags: tsx-impl-abort
-----
INSTRUCTION: VEX.128.0F.WIG 77 | VZEROUPPER | AVX
  implied: rw;!64=xmm0-xmm7 rw;64=xmm0-xmm15
  flags: tsx-impl-abort
-----
INSTRUCTION: VEX.256.0F.WIG 77 | VZEROALL | AVX
  implied: w;!64=vmm0-vmm7 w;64=vmm0-vmm15
-----
INSTRUCTION: NP 0F 78 /r | VMREAD r/m32, r32 | VMX
  ops: w=rm r=reg | UInt32
  rflags: w=zc 0=osap
  flags: 16 32 cpl0 no-rm no-v86 no-cm vmx=op intel-may-vm-exit tdx-non-root-ud tsx-impl-abort
  gas: suffix=l
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 78 /r | VMREAD r/m64, r64 | VMX
  ops: w=rm r=reg | UInt64
  rflags: w=zc 0=osap
  flags: 64 cpl0 no-rm no-v86 no-cm vmx=op intel-may-vm-exit tdx-non-root-ud tsx-impl-abort
  gas: suffix=q
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.0F.W0 78 /r | VCVTTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm | Packed128_Float32 Broadcast128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.0F.W0 78 /r | VCVTTPS2UDQ ymm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=rm | Packed256_Float32 Broadcast256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.0F.W0 78 /r | VCVTTPS2UDQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae} | AVX512F | N64b4
  ops: wvmm=reg r=rm | Packed512_Float32 Broadcast512_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.0F.W1 78 /r | VCVTTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=rm | Packed128_Float64 Broadcast128_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.0F.W1 78 /r | VCVTTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=rm | Packed256_Float64 Broadcast256_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.0F.W1 78 /r | VCVTTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae} | AVX512F | N64b8
  ops: w=reg r=rm | Packed512_Float64 Broadcast512_Float64
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 78 /0 ib ib | EXTRQ xmm1, imm8, imm8 | SSE4A
  ops: rw=rm r=imm r=imm
-----
INSTRUCTION: EVEX.128.66.0F.W0 78 /r | VCVTTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst | AVX512VL AVX512DQ | N8b4
  ops: w=reg r=rm | Packed64_Float32 Broadcast64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F.W0 78 /r | VCVTTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512DQ | N16b4
  ops: w=reg r=rm | Packed128_Float32 Broadcast128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F.W0 78 /r | VCVTTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae} | AVX512DQ | N32b4
  ops: wvmm=reg r=rm | Packed256_Float32 Broadcast256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W1 78 /r | VCVTTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512DQ | N16b8
  ops: w=reg r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 78 /r | VCVTTPD2UQQ ymm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512DQ | N32b8
  ops: w=reg r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 78 /r | VCVTTPD2UQQ zmm1 {k1}{z}, zmm2/m512/m64bcst{sae} | AVX512DQ | N64b8
  ops: wvmm=reg r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 78 /r | VCVTTSS2USI r32, xmm1/m32{sae} | AVX512F | N4
  ops: w=reg r=rm | Float32
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.0F.W1 78 /r | VCVTTSS2USI r64, xmm1/m32{sae} | AVX512F | N4
  ops: w=reg r=rm | Float32
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F 78 /r ib ib | INSERTQ xmm1, xmm2, imm8, imm8 | SSE4A
  ops: w=reg r=rm r=imm r=imm
-----
INSTRUCTION: EVEX.LIG.F2.0F.W0 78 /r | VCVTTSD2USI r32, xmm1/m64{sae} | AVX512F | N8
  ops: w=reg r=rm | Float64
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 78 /r | VCVTTSD2USI r64, xmm1/m64{sae} | AVX512F | N8
  ops: w=reg r=rm | Float64
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 79 /r | VMWRITE r32, r/m32 | VMX
  ops: r=reg r=rm | UInt32
  rflags: w=zc 0=osap
  flags: 16 32 cpl0 no-rm no-v86 no-cm vmx=op intel-may-vm-exit tdx-non-root-ud tsx-impl-abort
  gas: suffix=l
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 79 /r | VMWRITE r64, r/m64 | VMX
  ops: r=reg r=rm | UInt64
  rflags: w=zc 0=osap
  flags: 64 cpl0 no-rm no-v86 no-cm vmx=op intel-may-vm-exit tdx-non-root-ud tsx-impl-abort
  gas: suffix=q
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.0F.W0 79 /r | VCVTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm | Packed128_Float32 Broadcast128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.0F.W0 79 /r | VCVTPS2UDQ ymm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=rm | Packed256_Float32 Broadcast256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.0F.W0 79 /r | VCVTPS2UDQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er} | AVX512F | N64b4
  ops: wvmm=reg r=rm | Packed512_Float32 Broadcast512_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.0F.W1 79 /r | VCVTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=rm | Packed128_Float64 Broadcast128_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.0F.W1 79 /r | VCVTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=rm | Packed256_Float64 Broadcast256_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.0F.W1 79 /r | VCVTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er} | AVX512F | N64b8
  ops: w=reg r=rm | Packed512_Float64 Broadcast512_Float64
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 79 /r | EXTRQ xmm1, xmm2 | SSE4A
  ops: rw=reg r=rm
-----
INSTRUCTION: EVEX.128.66.0F.W0 79 /r | VCVTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst | AVX512VL AVX512DQ | N8b4
  ops: w=reg r=rm | Packed64_Float32 Broadcast64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F.W0 79 /r | VCVTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512DQ | N16b4
  ops: w=reg r=rm | Packed128_Float32 Broadcast128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F.W0 79 /r | VCVTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er} | AVX512DQ | N32b4
  ops: wvmm=reg r=rm | Packed256_Float32 Broadcast256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W1 79 /r | VCVTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512DQ | N16b8
  ops: w=reg r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 79 /r | VCVTPD2UQQ ymm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512DQ | N32b8
  ops: w=reg r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 79 /r | VCVTPD2UQQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er} | AVX512DQ | N64b8
  ops: wvmm=reg r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 79 /r | VCVTSS2USI r32, xmm1/m32{er} | AVX512F | N4
  ops: w=reg r=rm | Float32
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.0F.W1 79 /r | VCVTSS2USI r64, xmm1/m32{er} | AVX512F | N4
  ops: w=reg r=rm | Float32
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F 79 /r | INSERTQ xmm1, xmm2 | SSE4A
  ops: rw=reg r=rm
-----
INSTRUCTION: EVEX.LIG.F2.0F.W0 79 /r | VCVTSD2USI r32, xmm1/m64{er} | AVX512F | N8
  ops: w=reg r=rm | Float64
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 79 /r | VCVTSD2USI r64, xmm1/m64{er} | AVX512F | N8
  ops: w=reg r=rm | Float64
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W0 7A /r | VCVTTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst | AVX512VL AVX512DQ | N8b4
  ops: w=reg r=rm | Packed64_Float32 Broadcast64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F.W0 7A /r | VCVTTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512DQ | N16b4
  ops: w=reg r=rm | Packed128_Float32 Broadcast128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F.W0 7A /r | VCVTTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae} | AVX512DQ | N32b4
  ops: wvmm=reg r=rm | Packed256_Float32 Broadcast256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W1 7A /r | VCVTTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512DQ | N16b8
  ops: w=reg r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 7A /r | VCVTTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512DQ | N32b8
  ops: w=reg r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 7A /r | VCVTTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{sae} | AVX512DQ | N64b8
  ops: wvmm=reg r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: EVEX.128.F3.0F.W0 7A /r | VCVTUDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst | AVX512VL AVX512F | N8b4
  ops: w=reg r=rm | Packed64_UInt32 Broadcast64_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F.W0 7A /r | VCVTUDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm | Packed128_UInt32 Broadcast128_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F.W0 7A /r | VCVTUDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{er} | AVX512F | N32b4
  ops: wvmm=reg r=rm | Packed256_UInt32 Broadcast256_UInt32
  flags: ignore-er
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F.W1 7A /r | VCVTUQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512DQ | N16b8
  ops: w=reg r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.F3.0F.W1 7A /r | VCVTUQQ2PD ymm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512DQ | N32b8
  ops: w=reg r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.F3.0F.W1 7A /r | VCVTUQQ2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{er} | AVX512DQ | N64b8
  ops: wvmm=reg r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: EVEX.128.F2.0F.W0 7A /r | VCVTUDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm | Packed128_UInt32 Broadcast128_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F2.0F.W0 7A /r | VCVTUDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=rm | Packed256_UInt32 Broadcast256_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F2.0F.W0 7A /r | VCVTUDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er} | AVX512F | N64b4
  ops: wvmm=reg r=rm | Packed512_UInt32 Broadcast512_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F2.0F.W1 7A /r | VCVTUQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512DQ | N16b8
  ops: w=reg r=rm | Packed128_UInt64 Broadcast128_UInt64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.F2.0F.W1 7A /r | VCVTUQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512DQ | N32b8
  ops: w=reg r=rm | Packed256_UInt64 Broadcast256_UInt64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.F2.0F.W1 7A /r | VCVTUQQ2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er} | AVX512DQ | N64b8
  ops: w=reg r=rm | Packed512_UInt64 Broadcast512_UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W0 7B /r | VCVTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst | AVX512VL AVX512DQ | N8b4
  ops: w=reg r=rm | Packed64_Float32 Broadcast64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F.W0 7B /r | VCVTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512DQ | N16b4
  ops: w=reg r=rm | Packed128_Float32 Broadcast128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F.W0 7B /r | VCVTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er} | AVX512DQ | N32b4
  ops: wvmm=reg r=rm | Packed256_Float32 Broadcast256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W1 7B /r | VCVTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512DQ | N16b8
  ops: w=reg r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 7B /r | VCVTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512DQ | N32b8
  ops: w=reg r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 7B /r | VCVTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er} | AVX512DQ | N64b8
  ops: wvmm=reg r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 7B /r | VCVTUSI2SS xmm1, xmm2, r/m32{er} | AVX512F | N4
  ops: w=reg r=vvvv r=rm | UInt32
  flags: wig32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.LIG.F3.0F.W1 7B /r | VCVTUSI2SS xmm1, xmm2, r/m64{er} | AVX512F | N8
  ops: w=reg r=vvvv r=rm | UInt64
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.LIG.F2.0F.W0 7B /r | VCVTUSI2SD xmm1, xmm2, r/m32{er} | AVX512F | N4
  ops: w=reg r=vvvv r=rm | UInt32
  flags: wig32 ignore-er
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 7B /r | VCVTUSI2SD xmm1, xmm2, r/m64{er} | AVX512F | N8
  ops: w=reg r=vvvv r=rm | UInt64
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 66 0F 7C /r | HADDPD xmm1, xmm2/m128 | SSE3
  ops: rw=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 7C /r | VHADDPD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 7C /r | VHADDPD ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: F2 0F 7C /r | HADDPS xmm1, xmm2/m128 | SSE3
  ops: rw=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.F2.0F.WIG 7C /r | VHADDPS xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.F2.0F.WIG 7C /r | VHADDPS ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: 66 0F 7D /r | HSUBPD xmm1, xmm2/m128 | SSE3
  ops: rw=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG 7D /r | VHSUBPD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG 7D /r | VHSUBPD ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: F2 0F 7D /r | HSUBPS xmm1, xmm2/m128 | SSE3
  ops: rw=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.F2.0F.WIG 7D /r | VHSUBPS xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.F2.0F.WIG 7D /r | VHSUBPS ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: NP 0F 7E /r | MOVD r/m32, mm | MMX
  ops: w=rm r=reg | UInt32
  flags: tsx-impl-abort
  masm: flags=force-size=default
-----
INSTRUCTION: NP o64 0F 7E /r | MOVQ r/m64, mm | MMX
  ops: w=rm r=reg | UInt64
  flags: 64 tsx-impl-abort asm-ig-mem
-----
INSTRUCTION: 66 0F 7E /r | MOVD r/m32, xmm | SSE2
  ops: w=rm r=reg | UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: 66 o64 0F 7E /r | MOVQ r/m64, xmm | SSE2
  ops: w=rm r=reg | UInt64
  flags: 64 asm-ig-mem
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F.W0 7E /r | VMOVD r/m32, xmm1 | AVX
  ops: w=rm r=reg | UInt32
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F.W1 7E /r | VMOVQ r/m64, xmm1 | AVX
  ops: w=rm r=reg | UInt64
  flags: 64 asm-ig-mem
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W0 7E /r | VMOVD r/m32, xmm1 | AVX512F | N4
  ops: w=rm r=reg | UInt32
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W1 7E /r | VMOVQ r/m64, xmm1 | AVX512F | N8
  ops: w=rm r=reg | UInt64
  flags: 64 asm-ig-mem
  masm: flags=force-size=default
-----
INSTRUCTION: F3 0F 7E /r | MOVQ xmm1, xmm2/m64 | SSE2
  ops: w=reg r=rm | UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.F3.0F.WIG 7E /r | VMOVQ xmm1, xmm2/m64 | AVX
  ops: w=reg r=rm | UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F.W1 7E /r | VMOVQ xmm1, xmm2/m64 | AVX512F | N8
  ops: w=reg r=rm | UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 7F /r | MOVQ mm/m64, mm | MMX
  ops: w=rm r=reg | UInt64
  flags: tsx-impl-abort
-----
INSTRUCTION: 66 0F 7F /r | MOVDQA xmm2/m128, xmm1 | SSE2
  ops: w=rm r=reg | Packed128_UInt32
-----
INSTRUCTION: VEX.128.66.0F.WIG 7F /r | VMOVDQA xmm2/m128, xmm1 | AVX
  ops: w=rm r=reg | Packed128_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F.WIG 7F /r | VMOVDQA ymm2/m256, ymm1 | AVX
  ops: w=rm r=reg | Packed256_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W0 7F /r | VMOVDQA32 xmm2/m128 {k1}{z}, xmm1 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F.W0 7F /r | VMOVDQA32 ymm2/m256 {k1}{z}, ymm1 | AVX512VL AVX512F | N32
  ops: w=rm r=reg | Packed256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F.W0 7F /r | VMOVDQA32 zmm2/m512 {k1}{z}, zmm1 | AVX512F | N64
  ops: wvmm=rm r=reg | Packed512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F.W1 7F /r | VMOVDQA64 xmm2/m128 {k1}{z}, xmm1 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F.W1 7F /r | VMOVDQA64 ymm2/m256 {k1}{z}, ymm1 | AVX512VL AVX512F | N32
  ops: w=rm r=reg | Packed256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F.W1 7F /r | VMOVDQA64 zmm2/m512 {k1}{z}, zmm1 | AVX512F | N64
  ops: wvmm=rm r=reg | Packed512_UInt64
-----
INSTRUCTION: F3 0F 7F /r | MOVDQU xmm2/m128, xmm1 | SSE2
  ops: w=rm r=reg | Packed128_UInt32
-----
INSTRUCTION: VEX.128.F3.0F.WIG 7F /r | VMOVDQU xmm2/m128, xmm1 | AVX
  ops: w=rm r=reg | Packed128_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.F3.0F.WIG 7F /r | VMOVDQU ymm2/m256, ymm1 | AVX
  ops: w=rm r=reg | Packed256_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F.W0 7F /r | VMOVDQU32 xmm2/m128 {k1}{z}, xmm1 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_UInt32
-----
INSTRUCTION: EVEX.256.F3.0F.W0 7F /r | VMOVDQU32 ymm2/m256 {k1}{z}, ymm1 | AVX512VL AVX512F | N32
  ops: w=rm r=reg | Packed256_UInt32
-----
INSTRUCTION: EVEX.512.F3.0F.W0 7F /r | VMOVDQU32 zmm2/m512 {k1}{z}, zmm1 | AVX512F | N64
  ops: wvmm=rm r=reg | Packed512_UInt32
-----
INSTRUCTION: EVEX.128.F3.0F.W1 7F /r | VMOVDQU64 xmm2/m128 {k1}{z}, xmm1 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_UInt64
-----
INSTRUCTION: EVEX.256.F3.0F.W1 7F /r | VMOVDQU64 ymm2/m256 {k1}{z}, ymm1 | AVX512VL AVX512F | N32
  ops: w=rm r=reg | Packed256_UInt64
-----
INSTRUCTION: EVEX.512.F3.0F.W1 7F /r | VMOVDQU64 zmm2/m512 {k1}{z}, zmm1 | AVX512F | N64
  ops: wvmm=rm r=reg | Packed512_UInt64
-----
INSTRUCTION: EVEX.128.F2.0F.W0 7F /r | VMOVDQU8 xmm2/m128 {k1}{z}, xmm1 | AVX512VL AVX512BW | N16
  ops: w=rm r=reg | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.F2.0F.W0 7F /r | VMOVDQU8 ymm2/m256 {k1}{z}, ymm1 | AVX512VL AVX512BW | N32
  ops: w=rm r=reg | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.F2.0F.W0 7F /r | VMOVDQU8 zmm2/m512 {k1}{z}, zmm1 | AVX512BW | N64
  ops: wvmm=rm r=reg | Packed512_UInt8
-----
INSTRUCTION: EVEX.128.F2.0F.W1 7F /r | VMOVDQU16 xmm2/m128 {k1}{z}, xmm1 | AVX512VL AVX512BW | N16
  ops: w=rm r=reg | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.F2.0F.W1 7F /r | VMOVDQU16 ymm2/m256 {k1}{z}, ymm1 | AVX512VL AVX512BW | N32
  ops: w=rm r=reg | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.F2.0F.W1 7F /r | VMOVDQU16 zmm2/m512 {k1}{z}, zmm1 | AVX512BW | N64
  ops: wvmm=rm r=reg | Packed512_UInt16
-----
INSTRUCTION: o16 0F 80 cw | JO rel16 | INTEL386
  ops: r=br
  rflags: r=o
  flags: bnd ht cc=j;o; br=jcc-near cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 0F 80 cd | JO rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=o
  flags: 16 32 bnd ht cc=j;o; br=jcc-near cflow=br-cond
-----
INSTRUCTION: o64 0F 80 cd | JO rel32 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=o
  flags: 64 bnd ht cc=j;o; br=jcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 0F 81 cw | JNO rel16 | INTEL386
  ops: r=br
  rflags: r=o
  flags: bnd ht cc=j;no; br=jcc-near cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 0F 81 cd | JNO rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=o
  flags: 16 32 bnd ht cc=j;no; br=jcc-near cflow=br-cond
-----
INSTRUCTION: o64 0F 81 cd | JNO rel32 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=o
  flags: 64 bnd ht cc=j;no; br=jcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 0F 82 cw | JB rel16 | INTEL386
  ops: r=br
  rflags: r=c
  flags: bnd ht cc=j;b; br=jcc-near cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 0F 82 cd | JB rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=c
  flags: 16 32 bnd ht cc=j;b; br=jcc-near cflow=br-cond
-----
INSTRUCTION: o64 0F 82 cd | JB rel32 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=c
  flags: 64 bnd ht cc=j;b; br=jcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 0F 83 cw | JAE rel16 | INTEL386
  ops: r=br
  rflags: r=c
  flags: bnd ht cc=j;ae; br=jcc-near cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 0F 83 cd | JAE rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=c
  flags: 16 32 bnd ht cc=j;ae; br=jcc-near cflow=br-cond
-----
INSTRUCTION: o64 0F 83 cd | JAE rel32 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=c
  flags: 64 bnd ht cc=j;ae; br=jcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 0F 84 cw | JE rel16 | INTEL386
  ops: r=br
  rflags: r=z
  flags: bnd ht cc=j;e; br=jcc-near cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 0F 84 cd | JE rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=z
  flags: 16 32 bnd ht cc=j;e; br=jcc-near cflow=br-cond
-----
INSTRUCTION: o64 0F 84 cd | JE rel32 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=z
  flags: 64 bnd ht cc=j;e; br=jcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 0F 85 cw | JNE rel16 | INTEL386
  ops: r=br
  rflags: r=z
  flags: bnd ht cc=j;ne; br=jcc-near cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 0F 85 cd | JNE rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=z
  flags: 16 32 bnd ht cc=j;ne; br=jcc-near cflow=br-cond
-----
INSTRUCTION: o64 0F 85 cd | JNE rel32 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=z
  flags: 64 bnd ht cc=j;ne; br=jcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 0F 86 cw | JBE rel16 | INTEL386
  ops: r=br
  rflags: r=zc
  flags: bnd ht cc=j;be; br=jcc-near cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 0F 86 cd | JBE rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=zc
  flags: 16 32 bnd ht cc=j;be; br=jcc-near cflow=br-cond
-----
INSTRUCTION: o64 0F 86 cd | JBE rel32 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=zc
  flags: 64 bnd ht cc=j;be; br=jcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 0F 87 cw | JA rel16 | INTEL386
  ops: r=br
  rflags: r=zc
  flags: bnd ht cc=j;a; br=jcc-near cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 0F 87 cd | JA rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=zc
  flags: 16 32 bnd ht cc=j;a; br=jcc-near cflow=br-cond
-----
INSTRUCTION: o64 0F 87 cd | JA rel32 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=zc
  flags: 64 bnd ht cc=j;a; br=jcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 0F 88 cw | JS rel16 | INTEL386
  ops: r=br
  rflags: r=s
  flags: bnd ht cc=j;s; br=jcc-near cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 0F 88 cd | JS rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=s
  flags: 16 32 bnd ht cc=j;s; br=jcc-near cflow=br-cond
-----
INSTRUCTION: o64 0F 88 cd | JS rel32 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=s
  flags: 64 bnd ht cc=j;s; br=jcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 0F 89 cw | JNS rel16 | INTEL386
  ops: r=br
  rflags: r=s
  flags: bnd ht cc=j;ns; br=jcc-near cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 0F 89 cd | JNS rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=s
  flags: 16 32 bnd ht cc=j;ns; br=jcc-near cflow=br-cond
-----
INSTRUCTION: o64 0F 89 cd | JNS rel32 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=s
  flags: 64 bnd ht cc=j;ns; br=jcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 0F 8A cw | JP rel16 | INTEL386
  ops: r=br
  rflags: r=p
  flags: bnd ht cc=j;p; br=jcc-near cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 0F 8A cd | JP rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=p
  flags: 16 32 bnd ht cc=j;p; br=jcc-near cflow=br-cond
-----
INSTRUCTION: o64 0F 8A cd | JP rel32 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=p
  flags: 64 bnd ht cc=j;p; br=jcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 0F 8B cw | JNP rel16 | INTEL386
  ops: r=br
  rflags: r=p
  flags: bnd ht cc=j;np; br=jcc-near cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 0F 8B cd | JNP rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=p
  flags: 16 32 bnd ht cc=j;np; br=jcc-near cflow=br-cond
-----
INSTRUCTION: o64 0F 8B cd | JNP rel32 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=p
  flags: 64 bnd ht cc=j;np; br=jcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 0F 8C cw | JL rel16 | INTEL386
  ops: r=br
  rflags: r=os
  flags: bnd ht cc=j;l; br=jcc-near cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 0F 8C cd | JL rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=os
  flags: 16 32 bnd ht cc=j;l; br=jcc-near cflow=br-cond
-----
INSTRUCTION: o64 0F 8C cd | JL rel32 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=os
  flags: 64 bnd ht cc=j;l; br=jcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 0F 8D cw | JGE rel16 | INTEL386
  ops: r=br
  rflags: r=os
  flags: bnd ht cc=j;ge; br=jcc-near cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 0F 8D cd | JGE rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=os
  flags: 16 32 bnd ht cc=j;ge; br=jcc-near cflow=br-cond
-----
INSTRUCTION: o64 0F 8D cd | JGE rel32 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=os
  flags: 64 bnd ht cc=j;ge; br=jcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 0F 8E cw | JLE rel16 | INTEL386
  ops: r=br
  rflags: r=osz
  flags: bnd ht cc=j;le; br=jcc-near cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 0F 8E cd | JLE rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=osz
  flags: 16 32 bnd ht cc=j;le; br=jcc-near cflow=br-cond
-----
INSTRUCTION: o64 0F 8E cd | JLE rel32 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=osz
  flags: 64 bnd ht cc=j;le; br=jcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: o16 0F 8F cw | JG rel16 | INTEL386
  ops: r=br
  rflags: r=osz
  flags: bnd ht cc=j;g; br=jcc-near cflow=br-cond no-intel-dec64
-----
INSTRUCTION: o32 0F 8F cd | JG rel32 | INTEL386
  ops: r=br
  code-suffix: 32
  rflags: r=osz
  flags: 16 32 bnd ht cc=j;g; br=jcc-near cflow=br-cond
-----
INSTRUCTION: o64 0F 8F cd | JG rel32 | X64
  ops: r=br
  code-suffix: 64
  rflags: r=osz
  flags: 64 bnd ht cc=j;g; br=jcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: 0F 90 /r | SETO r/m8 | INTEL386
  ops: w=rm | UInt8
  rflags: r=o
  flags: cc=set;o;
  gas: suffix=b cc
  intel: cc
  masm: flags=force-size=default cc
  nasm: cc
-----
INSTRUCTION: 0F 91 /r | SETNO r/m8 | INTEL386
  ops: w=rm | UInt8
  rflags: r=o
  flags: cc=set;no;
  gas: suffix=b cc
  intel: cc
  masm: flags=force-size=default cc
  nasm: cc
-----
INSTRUCTION: 0F 92 /r | SETB r/m8 | INTEL386
  ops: w=rm | UInt8
  rflags: r=c
  flags: cc=set;b;
  gas: suffix=b cc
  intel: cc
  masm: flags=force-size=default cc
  nasm: cc
-----
INSTRUCTION: 0F 93 /r | SETAE r/m8 | INTEL386
  ops: w=rm | UInt8
  rflags: r=c
  flags: cc=set;ae;
  gas: suffix=b cc
  intel: cc
  masm: flags=force-size=default cc
  nasm: cc
-----
INSTRUCTION: 0F 94 /r | SETE r/m8 | INTEL386
  ops: w=rm | UInt8
  rflags: r=z
  flags: cc=set;e;
  gas: suffix=b cc
  intel: cc
  masm: flags=force-size=default cc
  nasm: cc
-----
INSTRUCTION: 0F 95 /r | SETNE r/m8 | INTEL386
  ops: w=rm | UInt8
  rflags: r=z
  flags: cc=set;ne;
  gas: suffix=b cc
  intel: cc
  masm: flags=force-size=default cc
  nasm: cc
-----
INSTRUCTION: 0F 96 /r | SETBE r/m8 | INTEL386
  ops: w=rm | UInt8
  rflags: r=zc
  flags: cc=set;be;
  gas: suffix=b cc
  intel: cc
  masm: flags=force-size=default cc
  nasm: cc
-----
INSTRUCTION: 0F 97 /r | SETA r/m8 | INTEL386
  ops: w=rm | UInt8
  rflags: r=zc
  flags: cc=set;a;
  gas: suffix=b cc
  intel: cc
  masm: flags=force-size=default cc
  nasm: cc
-----
INSTRUCTION: 0F 98 /r | SETS r/m8 | INTEL386
  ops: w=rm | UInt8
  rflags: r=s
  flags: cc=set;s;
  gas: suffix=b cc
  intel: cc
  masm: flags=force-size=default cc
  nasm: cc
-----
INSTRUCTION: 0F 99 /r | SETNS r/m8 | INTEL386
  ops: w=rm | UInt8
  rflags: r=s
  flags: cc=set;ns;
  gas: suffix=b cc
  intel: cc
  masm: flags=force-size=default cc
  nasm: cc
-----
INSTRUCTION: 0F 9A /r | SETP r/m8 | INTEL386
  ops: w=rm | UInt8
  rflags: r=p
  flags: cc=set;p;
  gas: suffix=b cc
  intel: cc
  masm: flags=force-size=default cc
  nasm: cc
-----
INSTRUCTION: 0F 9B /r | SETNP r/m8 | INTEL386
  ops: w=rm | UInt8
  rflags: r=p
  flags: cc=set;np;
  gas: suffix=b cc
  intel: cc
  masm: flags=force-size=default cc
  nasm: cc
-----
INSTRUCTION: 0F 9C /r | SETL r/m8 | INTEL386
  ops: w=rm | UInt8
  rflags: r=os
  flags: cc=set;l;
  gas: suffix=b cc
  intel: cc
  masm: flags=force-size=default cc
  nasm: cc
-----
INSTRUCTION: 0F 9D /r | SETGE r/m8 | INTEL386
  ops: w=rm | UInt8
  rflags: r=os
  flags: cc=set;ge;
  gas: suffix=b cc
  intel: cc
  masm: flags=force-size=default cc
  nasm: cc
-----
INSTRUCTION: 0F 9E /r | SETLE r/m8 | INTEL386
  ops: w=rm | UInt8
  rflags: r=osz
  flags: cc=set;le;
  gas: suffix=b cc
  intel: cc
  masm: flags=force-size=default cc
  nasm: cc
-----
INSTRUCTION: 0F 9F /r | SETG r/m8 | INTEL386
  ops: w=rm | UInt8
  rflags: r=osz
  flags: cc=set;g;
  gas: suffix=b cc
  intel: cc
  masm: flags=force-size=default cc
  nasm: cc
-----
INSTRUCTION: VEX.L0.0F.W0 90 /r | KMOVW k1, k2/m16 | AVX512F
  ops: w=reg r=rm | UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.L0.0F.W1 90 /r | KMOVQ k1, k2/m64 | AVX512BW
  ops: w=reg r=rm | UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.L0.66.0F.W0 90 /r | KMOVB k1, k2/m8 | AVX512DQ
  ops: w=reg r=rm | UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.L0.66.0F.W1 90 /r | KMOVD k1, k2/m32 | AVX512BW
  ops: w=reg r=rm | UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.L0.0F.W0 91 /r | KMOVW m16, k1 | AVX512F
  ops: w=rm r=reg | UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.L0.0F.W1 91 /r | KMOVQ m64, k1 | AVX512BW
  ops: w=rm r=reg | UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.L0.66.0F.W0 91 /r | KMOVB m8, k1 | AVX512DQ
  ops: w=rm r=reg | UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.L0.66.0F.W1 91 /r | KMOVD m32, k1 | AVX512BW
  ops: w=rm r=reg | UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.L0.0F.W0 92 /r | KMOVW k1, r32 | AVX512F
  ops: w=reg r=rm
-----
INSTRUCTION: VEX.L0.66.0F.W0 92 /r | KMOVB k1, r32 | AVX512DQ
  ops: w=reg r=rm
-----
INSTRUCTION: VEX.L0.F2.0F.W0 92 /r | KMOVD k1, r32 | AVX512BW
  ops: w=reg r=rm
  flags: wig32
-----
INSTRUCTION: VEX.L0.F2.0F.W1 92 /r | KMOVQ k1, r64 | AVX512BW
  ops: w=reg r=rm
  flags: 64
-----
INSTRUCTION: VEX.L0.0F.W0 93 /r | KMOVW r32, k1 | AVX512F
  ops: w=reg r=rm
-----
INSTRUCTION: VEX.L0.66.0F.W0 93 /r | KMOVB r32, k1 | AVX512DQ
  ops: w=reg r=rm
-----
INSTRUCTION: VEX.L0.F2.0F.W0 93 /r | KMOVD r32, k1 | AVX512BW
  ops: w=reg r=rm
  flags: wig32
-----
INSTRUCTION: VEX.L0.F2.0F.W1 93 /r | KMOVQ r64, k1 | AVX512BW
  ops: w=reg r=rm
  flags: 64
-----
INSTRUCTION: VEX.L0.0F.W0 98 /r | KORTESTW k1, k2 | AVX512F
  ops: r=reg r=rm
  rflags: w=zc 0=osap
-----
INSTRUCTION: VEX.L0.0F.W1 98 /r | KORTESTQ k1, k2 | AVX512BW
  ops: r=reg r=rm
  rflags: w=zc 0=osap
-----
INSTRUCTION: VEX.L0.66.0F.W0 98 /r | KORTESTB k1, k2 | AVX512DQ
  ops: r=reg r=rm
  rflags: w=zc 0=osap
-----
INSTRUCTION: VEX.L0.66.0F.W1 98 /r | KORTESTD k1, k2 | AVX512BW
  ops: r=reg r=rm
  rflags: w=zc 0=osap
-----
INSTRUCTION: VEX.L0.0F.W0 99 /r | KTESTW k1, k2 | AVX512DQ
  ops: r=reg r=rm
  rflags: w=zc 0=osap
-----
INSTRUCTION: VEX.L0.0F.W1 99 /r | KTESTQ k1, k2 | AVX512BW
  ops: r=reg r=rm
  rflags: w=zc 0=osap
-----
INSTRUCTION: VEX.L0.66.0F.W0 99 /r | KTESTB k1, k2 | AVX512DQ
  ops: r=reg r=rm
  rflags: w=zc 0=osap
-----
INSTRUCTION: VEX.L0.66.0F.W1 99 /r | KTESTD k1, k2 | AVX512BW
  ops: r=reg r=rm
  rflags: w=zc 0=osap
-----
INSTRUCTION: o16 0F A0 | PUSH FS | INTEL386
  ops: r=r:fs
  implied: push=1x2
  code-mnemonic: pushw
  flags: sp=push;2
  gas: suffix=w osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o32 0F A0 | PUSH FS | INTEL386
  ops: r=r:fs
  implied: push=1x4
  code-mnemonic: pushd
  flags: 16 32 sp=push;4
  gas: suffix=l osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o64 0F A0 | PUSH FS | X64
  ops: r=r:fs
  implied: push=1x8
  code-mnemonic: pushq
  flags: 64 sp=push;8 do64
  gas: suffix=q osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o16 0F A1 | POP FS | INTEL386
  ops: w=r:fs
  implied: pop=1x2
  code-mnemonic: popw
  flags: sp=pop;2 no-in-sgx tsx-impl-abort
  gas: suffix=w osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o32 0F A1 | POP FS | INTEL386
  ops: w=r:fs
  implied: pop=1x4
  code-mnemonic: popd
  flags: 16 32 sp=pop;4 no-in-sgx tsx-impl-abort
  gas: suffix=l osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o64 0F A1 | POP FS | X64
  ops: w=r:fs
  implied: pop=1x8
  code-mnemonic: popq
  flags: 64 sp=pop;8 do64 no-in-sgx tsx-impl-abort
  gas: suffix=q osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: 0F A2 | CPUID | CPUID
  implied: rw=eax cr=ecx w=ecx;edx;ebx
  flags: serialize-intel serialize-amd may-require-cpl0 intel-vm-exit no-in-sgx tdx-non-root-may-gen-ex amd-may-vm-exit tsx-abort
-----
INSTRUCTION: o16 0F A3 /r | BT r/m16, r16 | INTEL386
  ops: r=rm r=reg | UInt16
  rflags: u=osap w=c
  gas: suffix=w
-----
INSTRUCTION: o32 0F A3 /r | BT r/m32, r32 | INTEL386
  ops: r=rm r=reg | UInt32
  rflags: u=osap w=c
  gas: suffix=l
-----
INSTRUCTION: o64 0F A3 /r | BT r/m64, r64 | X64
  ops: r=rm r=reg | UInt64
  rflags: u=osap w=c
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: o16 0F A4 /r ib | SHLD r/m16, r16, imm8 | INTEL386
  ops: rw=rm r=reg r=imm | UInt16
  implied: shift-mask=0x1F
  rflags: u=oa w=szcp
  gas: suffix=w
-----
INSTRUCTION: o32 0F A4 /r ib | SHLD r/m32, r32, imm8 | INTEL386
  ops: rw=rm r=reg r=imm | UInt32
  implied: shift-mask=0x1F
  rflags: u=oa w=szcp
  gas: suffix=l
-----
INSTRUCTION: o64 0F A4 /r ib | SHLD r/m64, r64, imm8 | X64
  ops: rw=rm r=reg r=imm | UInt64
  implied: shift-mask=0x3F
  rflags: u=oa w=szcp
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: o16 0F A5 /r | SHLD r/m16, r16, CL | INTEL386
  ops: rw=rm r=reg r=r:cl | UInt16
  rflags: u=oa w=szcp
  gas: suffix=w
-----
INSTRUCTION: o32 0F A5 /r | SHLD r/m32, r32, CL | INTEL386
  ops: rw=rm r=reg r=r:cl | UInt32
  rflags: u=oa w=szcp
  gas: suffix=l
-----
INSTRUCTION: o64 0F A5 /r | SHLD r/m64, r64, CL | X64
  ops: rw=rm r=reg r=r:cl | UInt64
  rflags: u=oa w=szcp
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: a16 F3 0F A6 C0 | MONTMUL | PADLOCK_PMM
  implied: cr=[es:si=Unknown] rcw=ecx cr=eax cw=eax;edx
  code-suffix: 16
  flags: 16 32 a32-req ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a32 F3 0F A6 C0 | MONTMUL | PADLOCK_PMM
  implied: cr=[es:esi=Unknown] rcw=ecx cr=eax cw=eax;edx
  code-suffix: 32
  flags: a32-req ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a64 F3 0F A6 C0 | MONTMUL | PADLOCK_PMM
  implied: cr=[es:rsi=Unknown] rcw=rcx cr=eax cw=eax;edx
  code-suffix: 64
  flags: 64 a32-req ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a16 F3 0F A6 C8 | XSHA1 | PADLOCK_PHE
  implied: cr=[es:si=Unknown] crcw=[es:di=Unknown] cw=si rcw=ax;cx
  code-suffix: 16
  flags: 16 32 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a32 F3 0F A6 C8 | XSHA1 | PADLOCK_PHE
  implied: cr=[es:esi=Unknown] crcw=[es:edi=Unknown] cw=esi rcw=eax;ecx
  code-suffix: 32
  flags: ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a64 F3 0F A6 C8 | XSHA1 | PADLOCK_PHE
  implied: cr=[es:rsi=Unknown] crcw=[es:rdi=Unknown] cw=rsi rcw=rax;rcx
  code-suffix: 64
  flags: 64 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a16 F3 0F A6 D0 | XSHA256 | PADLOCK_PHE
  implied: cr=[es:si=Unknown] crcw=[es:di=Unknown] cw=si rcw=ax;cx
  code-suffix: 16
  flags: 16 32 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a32 F3 0F A6 D0 | XSHA256 | PADLOCK_PHE
  implied: cr=[es:esi=Unknown] crcw=[es:edi=Unknown] cw=esi rcw=eax;ecx
  code-suffix: 32
  flags: ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a64 F3 0F A6 D0 | XSHA256 | PADLOCK_PHE
  implied: cr=[es:rsi=Unknown] crcw=[es:rdi=Unknown] cw=rsi rcw=rax;rcx
  code-suffix: 64
  flags: 64 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a16 F3 0F A6 D8 | XSHA512_ALT | PADLOCK_PHE
  implied: cr=[es:si=Unknown] crcw=[es:di=Unknown] cw=si rcw=cx
  code-suffix: 16
  flags: 16 32 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a32 F3 0F A6 D8 | XSHA512_ALT | PADLOCK_PHE
  implied: cr=[es:esi=Unknown] crcw=[es:edi=Unknown] cw=esi rcw=ecx
  code-suffix: 32
  flags: ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a64 F3 0F A6 D8 | XSHA512_ALT | PADLOCK_PHE
  implied: cr=[es:rsi=Unknown] crcw=[es:rdi=Unknown] cw=rsi rcw=rcx
  code-suffix: 64
  flags: 64 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a16 F3 0F A6 E0 | XSHA512 | PADLOCK_PHE
  # https: //github.com/openssl/openssl/blob/27aca04e13ca8a9bead49de7bc380110ecb7064e/engines/asm/e_padlock-x86.pl#L597
  implied: cr=[es:si=Unknown] crcw=[es:di=Unknown] cw=si rcw=cx
  code-suffix: 16
  flags: 16 32 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a32 F3 0F A6 E0 | XSHA512 | PADLOCK_PHE
  implied: cr=[es:esi=Unknown] crcw=[es:edi=Unknown] cw=esi rcw=ecx
  code-suffix: 32
  flags: ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a64 F3 0F A6 E0 | XSHA512 | PADLOCK_PHE
  implied: cr=[es:rsi=Unknown] crcw=[es:rdi=Unknown] cw=rsi rcw=rcx
  code-suffix: 64
  flags: 64 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: o16 0F A6 /r | XBTS r16, r/m16 | INTEL386_A0_ONLY
  ops: rw=reg r=rm | UInt16
  implied: r=ax;cl
  flags: 16 32 dec-opt=Xbts
  gas: suffix=w
-----
INSTRUCTION: o32 0F A6 /r | XBTS r32, r/m32 | INTEL386_A0_ONLY
  ops: rw=reg r=rm | UInt32
  implied: r=eax;cl
  flags: 16 32 dec-opt=Xbts
  gas: suffix=l
-----
INSTRUCTION: a16 0F A7 C0 | XSTORE | PADLOCK_RNG
  implied: xstore=2
  code-suffix: 16
  flags: 16 32 rep ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a32 0F A7 C0 | XSTORE | PADLOCK_RNG
  implied: xstore=4
  code-suffix: 32
  flags: rep ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a64 0F A7 C0 | XSTORE | PADLOCK_RNG
  implied: xstore=8
  code-suffix: 64
  flags: 64 rep ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a16 F3 0F A7 C8 | XCRYPTECB | PADLOCK_ACE
  implied: cr=[es:dx=Unknown];[es:bx=Unknown];[es:si=Unknown] cw=[es:di=Unknown] rcw=cx cw=si;di
  code-suffix: 16
  flags: 16 32 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a32 F3 0F A7 C8 | XCRYPTECB | PADLOCK_ACE
  implied: cr=[es:edx=Unknown];[es:ebx=Unknown];[es:esi=Unknown] cw=[es:edi=Unknown] rcw=ecx cw=esi;edi
  code-suffix: 32
  flags: ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a64 F3 0F A7 C8 | XCRYPTECB | PADLOCK_ACE
  implied: cr=[es:rdx=Unknown];[es:rbx=Unknown];[es:rsi=Unknown] cw=[es:rdi=Unknown] rcw=rcx cw=rsi;rdi
  code-suffix: 64
  flags: 64 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a16 F3 0F A7 D0 | XCRYPTCBC | PADLOCK_ACE
  implied: crcw=[es:ax=Unknown] cr=[es:dx=Unknown];[es:bx=Unknown];[es:si=Unknown] cw=[es:di=Unknown] rcw=cx cw=si;di
  code-suffix: 16
  flags: 16 32 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a32 F3 0F A7 D0 | XCRYPTCBC | PADLOCK_ACE
  implied: crcw=[es:eax=Unknown] cr=[es:edx=Unknown];[es:ebx=Unknown];[es:esi=Unknown] cw=[es:edi=Unknown] rcw=ecx cw=esi;edi
  code-suffix: 32
  flags: ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a64 F3 0F A7 D0 | XCRYPTCBC | PADLOCK_ACE
  implied: crcw=[es:rax=Unknown] cr=[es:rdx=Unknown];[es:rbx=Unknown];[es:rsi=Unknown] cw=[es:rdi=Unknown] rcw=rcx cw=rsi;rdi
  code-suffix: 64
  flags: 64 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a16 F3 0F A7 D8 | XCRYPTCTR | PADLOCK_ACE
  implied: crcw=[es:ax=Unknown] cr=[es:dx=Unknown];[es:bx=Unknown];[es:si=Unknown] cw=[es:di=Unknown] rcw=cx cw=si;di
  code-suffix: 16
  flags: 16 32 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a32 F3 0F A7 D8 | XCRYPTCTR | PADLOCK_ACE
  implied: crcw=[es:eax=Unknown] cr=[es:edx=Unknown];[es:ebx=Unknown];[es:esi=Unknown] cw=[es:edi=Unknown] rcw=ecx cw=esi;edi
  code-suffix: 32
  flags: ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a64 F3 0F A7 D8 | XCRYPTCTR | PADLOCK_ACE
  implied: crcw=[es:rax=Unknown] cr=[es:rdx=Unknown];[es:rbx=Unknown];[es:rsi=Unknown] cw=[es:rdi=Unknown] rcw=rcx cw=rsi;rdi
  code-suffix: 64
  flags: 64 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a16 F3 0F A7 E0 | XCRYPTCFB | PADLOCK_ACE
  implied: crcw=[es:ax=Unknown] cr=[es:dx=Unknown];[es:bx=Unknown];[es:si=Unknown] cw=[es:di=Unknown] rcw=cx cw=si;di
  code-suffix: 16
  flags: 16 32 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a32 F3 0F A7 E0 | XCRYPTCFB | PADLOCK_ACE
  implied: crcw=[es:eax=Unknown] cr=[es:edx=Unknown];[es:ebx=Unknown];[es:esi=Unknown] cw=[es:edi=Unknown] rcw=ecx cw=esi;edi
  code-suffix: 32
  flags: ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a64 F3 0F A7 E0 | XCRYPTCFB | PADLOCK_ACE
  implied: crcw=[es:rax=Unknown] cr=[es:rdx=Unknown];[es:rbx=Unknown];[es:rsi=Unknown] cw=[es:rdi=Unknown] rcw=rcx cw=rsi;rdi
  code-suffix: 64
  flags: 64 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a16 F3 0F A7 E8 | XCRYPTOFB | PADLOCK_ACE
  implied: crcw=[es:ax=Unknown] cr=[es:dx=Unknown];[es:bx=Unknown];[es:si=Unknown] cw=[es:di=Unknown] rcw=cx cw=si;di
  code-suffix: 16
  flags: 16 32 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a32 F3 0F A7 E8 | XCRYPTOFB | PADLOCK_ACE
  implied: crcw=[es:eax=Unknown] cr=[es:edx=Unknown];[es:ebx=Unknown];[es:esi=Unknown] cw=[es:edi=Unknown] rcw=ecx cw=esi;edi
  code-suffix: 32
  flags: ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a64 F3 0F A7 E8 | XCRYPTOFB | PADLOCK_ACE
  implied: crcw=[es:rax=Unknown] cr=[es:rdx=Unknown];[es:rbx=Unknown];[es:rsi=Unknown] cw=[es:rdi=Unknown] rcw=rcx cw=rsi;rdi
  code-suffix: 64
  flags: 64 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a16 F3 0F A7 F8 | XSTORE_ALT | PADLOCK_RNG
  implied: xstore=2
  code-suffix: 16
  flags: 16 32 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a32 F3 0F A7 F8 | XSTORE_ALT | PADLOCK_RNG
  implied: xstore=4
  code-suffix: 32
  flags: ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a64 F3 0F A7 F8 | XSTORE_ALT | PADLOCK_RNG
  implied: xstore=8
  code-suffix: 64
  flags: 64 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: o16 0F A7 /r | IBTS r/m16, r16 | INTEL386_A0_ONLY
  ops: rw=rm r=reg | UInt16
  implied: r=ax;cl
  flags: 16 32 dec-opt=Xbts
  gas: suffix=w
-----
INSTRUCTION: o32 0F A7 /r | IBTS r/m32, r32 | INTEL386_A0_ONLY
  ops: rw=rm r=reg | UInt32
  implied: r=eax;cl
  flags: 16 32 dec-opt=Xbts
  gas: suffix=l
-----
INSTRUCTION: 0F A6 /r | CMPXCHG r/m8, r8 | INTEL486_A_ONLY
  ops: rcw=rm r=reg | UInt8
  implied: rcw=al
  code-mnemonic: cmpxchg486
  rflags: w=oszacp
  flags: 16 32 dec-opt=Cmpxchg486A asm-ig
  fast: mnemonic=cmpxchg486
  gas: mnemonic=cmpxchg486 suffix=b
  intel: mnemonic=cmpxchg486
  masm: mnemonic=cmpxchg486
  nasm: mnemonic=cmpxchg486
-----
INSTRUCTION: o16 0F A7 /r | CMPXCHG r/m16, r16 | INTEL486_A_ONLY
  ops: rcw=rm r=reg | UInt16
  implied: rcw=ax
  code-mnemonic: cmpxchg486
  rflags: w=oszacp
  flags: 16 32 dec-opt=Cmpxchg486A asm-ig
  fast: mnemonic=cmpxchg486
  gas: mnemonic=cmpxchg486 suffix=w
  intel: mnemonic=cmpxchg486
  masm: mnemonic=cmpxchg486
  nasm: mnemonic=cmpxchg486
-----
INSTRUCTION: o32 0F A7 /r | CMPXCHG r/m32, r32 | INTEL486_A_ONLY
  ops: rcw=rm r=reg | UInt32
  implied: rcw=eax
  code-mnemonic: cmpxchg486
  rflags: w=oszacp
  flags: 16 32 dec-opt=Cmpxchg486A asm-ig
  fast: mnemonic=cmpxchg486
  gas: mnemonic=cmpxchg486 suffix=l
  intel: mnemonic=cmpxchg486
  masm: mnemonic=cmpxchg486
  nasm: mnemonic=cmpxchg486
-----
INSTRUCTION: o16 0F A8 | PUSH GS | INTEL386
  ops: r=r:gs
  implied: push=1x2
  code-mnemonic: pushw
  flags: sp=push;2
  gas: suffix=w osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o32 0F A8 | PUSH GS | INTEL386
  ops: r=r:gs
  implied: push=1x4
  code-mnemonic: pushd
  flags: 16 32 sp=push;4
  gas: suffix=l osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o64 0F A8 | PUSH GS | X64
  ops: r=r:gs
  implied: push=1x8
  code-mnemonic: pushq
  flags: 64 sp=push;8 do64
  gas: suffix=q osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o16 0F A9 | POP GS | INTEL386
  ops: w=r:gs
  implied: pop=1x2
  code-mnemonic: popw
  flags: sp=pop;2 no-in-sgx tsx-impl-abort
  gas: suffix=w osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o32 0F A9 | POP GS | INTEL386
  ops: w=r:gs
  implied: pop=1x4
  code-mnemonic: popd
  flags: 16 32 sp=pop;4 no-in-sgx tsx-impl-abort
  gas: suffix=l osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: o64 0F A9 | POP GS | X64
  ops: w=r:gs
  implied: pop=1x8
  code-mnemonic: popq
  flags: 64 sp=pop;8 do64 no-in-sgx tsx-impl-abort
  gas: suffix=q osz-suffix-4
  intel: osz
  masm: osz-suffix-1
  nasm: osz
-----
INSTRUCTION: 0F AA | RSM | SMM
  rflags: w=oszacpdiA
  flags: save-restore privileged cflow=ret serialize-intel serialize-amd no-outside-smm no-in-vmx-root intel-vm-exit no-in-sgx tdx-non-root-ud amd-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: o16 0F AB /r | BTS r/m16, r16 | INTEL386
  ops: rw=rm r=reg | UInt16
  rflags: u=osap w=c
  flags: lock xacquire xrelease
  gas: suffix=w
-----
INSTRUCTION: o32 0F AB /r | BTS r/m32, r32 | INTEL386
  ops: rw=rm r=reg | UInt32
  rflags: u=osap w=c
  flags: lock xacquire xrelease
  gas: suffix=l
-----
INSTRUCTION: o64 0F AB /r | BTS r/m64, r64 | X64
  ops: rw=rm r=reg | UInt64
  rflags: u=osap w=c
  flags: 64 lock xacquire xrelease
  gas: suffix=q
-----
INSTRUCTION: o16 0F AC /r ib | SHRD r/m16, r16, imm8 | INTEL386
  ops: rw=rm r=reg r=imm | UInt16
  implied: shift-mask=0x1F
  rflags: u=oa w=szcp
  gas: suffix=w
-----
INSTRUCTION: o32 0F AC /r ib | SHRD r/m32, r32, imm8 | INTEL386
  ops: rw=rm r=reg r=imm | UInt32
  implied: shift-mask=0x1F
  rflags: u=oa w=szcp
  gas: suffix=l
-----
INSTRUCTION: o64 0F AC /r ib | SHRD r/m64, r64, imm8 | X64
  ops: rw=rm r=reg r=imm | UInt64
  implied: shift-mask=0x3F
  rflags: u=oa w=szcp
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: o16 0F AD /r | SHRD r/m16, r16, CL | INTEL386
  ops: rw=rm r=reg r=r:cl | UInt16
  rflags: u=oa w=szcp
  gas: suffix=w
-----
INSTRUCTION: o32 0F AD /r | SHRD r/m32, r32, CL | INTEL386
  ops: rw=rm r=reg r=r:cl | UInt32
  rflags: u=oa w=szcp
  gas: suffix=l
-----
INSTRUCTION: o64 0F AD /r | SHRD r/m64, r64, CL | X64
  ops: rw=rm r=reg r=r:cl | UInt64
  rflags: u=oa w=szcp
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: NP 0F AE /0 | FXSAVE m512byte | FXSR
  ops: w=rm | Fxsave_512Byte
  code-memory-size: 512byte
  flags: save-restore tsx-impl-abort no-wait
-----
INSTRUCTION: NP o64 0F AE /0 | FXSAVE64 m512byte | FXSR
  ops: w=rm | Fxsave64_512Byte
  code-memory-size: 512byte
  flags: 64 save-restore tsx-impl-abort no-wait
-----
INSTRUCTION: F3 0F AE /0 | RDFSBASE r32 | FSGSBASE
  ops: w=rm
  flags: 64
-----
INSTRUCTION: F3 o64 0F AE /0 | RDFSBASE r64 | FSGSBASE
  ops: w=rm
  flags: 64
-----
INSTRUCTION: NP 0F AE /1 | FXRSTOR m512byte | FXSR
  ops: r=rm | Fxsave_512Byte
  code-memory-size: 512byte
  flags: save-restore tsx-impl-abort no-wait
-----
INSTRUCTION: NP o64 0F AE /1 | FXRSTOR64 m512byte | FXSR
  ops: r=rm | Fxsave64_512Byte
  code-memory-size: 512byte
  flags: 64 save-restore tsx-impl-abort no-wait
-----
INSTRUCTION: F3 0F AE /1 | RDGSBASE r32 | FSGSBASE
  ops: w=rm
  flags: 64
-----
INSTRUCTION: F3 o64 0F AE /1 | RDGSBASE r64 | FSGSBASE
  ops: w=rm
  flags: 64
-----
INSTRUCTION: NP 0F AE /2 | LDMXCSR m32 | SSE
  ops: r=rm | UInt32
-----
INSTRUCTION: F3 0F AE /2 | WRFSBASE r32 | FSGSBASE
  ops: r=rm
  flags: 64 tsx-impl-abort
-----
INSTRUCTION: F3 o64 0F AE /2 | WRFSBASE r64 | FSGSBASE
  ops: r=rm
  flags: 64 tsx-impl-abort
-----
INSTRUCTION: VEX.LZ.0F.WIG AE /2 | VLDMXCSR m32 | AVX
  ops: r=rm | UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F AE /3 | STMXCSR m32 | SSE
  ops: w=rm | UInt32
-----
INSTRUCTION: F3 0F AE /3 | WRGSBASE r32 | FSGSBASE
  ops: r=rm
  flags: 64 tsx-impl-abort
-----
INSTRUCTION: F3 o64 0F AE /3 | WRGSBASE r64 | FSGSBASE
  ops: r=rm
  flags: 64 tsx-impl-abort
-----
INSTRUCTION: VEX.LZ.0F.WIG AE /3 | VSTMXCSR m32 | AVX
  ops: w=rm | UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F AE /4 | XSAVE mem | XSAVE
  ops: rw=rm | Xsave
  implied: r=eax;edx
  code-memory-size: em
  flags: save-restore tsx-impl-abort
-----
INSTRUCTION: NP o64 0F AE /4 | XSAVE64 mem | XSAVE
  ops: rw=rm | Xsave64
  implied: r=eax;edx
  code-memory-size: em
  flags: 64 save-restore tsx-impl-abort
-----
INSTRUCTION: F3 0F AE /4 | PTWRITE r/m32 | PTWRITE
  ops: r=rm | UInt32
  flags: no-66
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: F3 o64 0F AE /4 | PTWRITE r/m64 | PTWRITE
  ops: r=rm | UInt64
  flags: 64 no-66
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: NP 0F AE /5 | XRSTOR mem | XSAVE
  ops: r=rm | Xsave
  implied: r=eax;edx
  code-memory-size: em
  flags: save-restore tsx-impl-abort
-----
INSTRUCTION: NP o64 0F AE /5 | XRSTOR64 mem | XSAVE
  ops: r=rm | Xsave64
  implied: r=eax;edx
  code-memory-size: em
  flags: 64 save-restore tsx-impl-abort
-----
INSTRUCTION: F3 0F AE /5 | INCSSPD r32 | CET_SS
  ops: r=rm
  implied: last-gpr-8
  flags: no-rm no-v86
-----
INSTRUCTION: F3 o64 0F AE /5 | INCSSPQ r64 | CET_SS
  ops: r=rm
  implied: last-gpr-8
  flags: 64 no-rm no-v86
-----
INSTRUCTION: NP 0F AE /6 | XSAVEOPT mem | XSAVEOPT
  ops: rw=rm | Xsave
  implied: r=eax;edx
  code-memory-size: em
  flags: save-restore tsx-impl-abort
-----
INSTRUCTION: NP o64 0F AE /6 | XSAVEOPT64 mem | XSAVEOPT
  ops: rw=rm | Xsave64
  implied: r=eax;edx
  code-memory-size: em
  flags: 64 save-restore tsx-impl-abort
-----
INSTRUCTION: 66 0F AE /6 | CLWB m8 | CLWB
  ops: r=rm | UInt8
  flags: tsx-impl-abort
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: 66 0F AE /6 | TPAUSE r32, <edx>, <eax> | WAITPKG
  ops: r=rm
  implied: r=eax;edx
  rflags: w=c 0=oszap
  flags: intel-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: 66 o64 0F AE /6 | TPAUSE r64, <edx>, <eax> | WAITPKG
  ops: r=rm
  implied: r=eax;edx last-gpr-32
  rflags: w=c 0=oszap
  flags: 64 intel-may-vm-exit tsx-impl-abort
  gas: reg32
  intel: reg32
  masm: reg32
  nasm: reg32
-----
INSTRUCTION: F3 0F AE /6 | CLRSSBSY m64 | CET_SS
  ops: rw=rm | UInt64
  rflags: w=c 0=oszap
  flags: cpl0 no-rm no-v86
  masm: flags=force-size=default
-----
INSTRUCTION: a16 F3 0F AE /6 | UMONITOR r16 | WAITPKG
  ops: r=rm
  implied: r=[seg:op0-reg=UInt8]
  flags: 16 32 tsx-abort
-----
INSTRUCTION: a32 F3 0F AE /6 | UMONITOR r32 | WAITPKG
  ops: r=rm
  implied: r=[seg:op0-reg=UInt8]
  flags: tsx-abort
-----
INSTRUCTION: a64 F3 0F AE /6 | UMONITOR r64 | WAITPKG
  ops: r=rm
  implied: r=[seg:op0-reg=UInt8]
  flags: 64 tsx-abort
-----
INSTRUCTION: F2 0F AE /6 | UMWAIT r32, <edx>, <eax> | WAITPKG
  ops: r=rm
  implied: r=eax;edx
  rflags: w=c 0=oszap
  flags: intel-may-vm-exit tsx-abort
-----
INSTRUCTION: F2 o64 0F AE /6 | UMWAIT r64, <edx>, <eax> | WAITPKG
  ops: r=rm
  implied: r=eax;edx last-gpr-32
  rflags: w=c 0=oszap
  flags: 64 intel-may-vm-exit tsx-abort
  gas: reg32
  intel: reg32
  masm: reg32
  nasm: reg32
-----
INSTRUCTION: NP 0F AE /7 | CLFLUSH m8 | CLFSH
  ops: r=rm | UInt8
  flags: tsx-impl-abort
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: 66 0F AE /7 | CLFLUSHOPT m8 | CLFLUSHOPT
  ops: r=rm | UInt8
  flags: tsx-impl-abort
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: NP 0F AE E8 | LFENCE | SSE2
-----
INSTRUCTION: NP 0F AE E9 | LFENCE | SSE2
  code-suffix: E9
  flags: asm-ig
-----
INSTRUCTION: NP 0F AE EA | LFENCE | SSE2
  code-suffix: EA
  flags: asm-ig
-----
INSTRUCTION: NP 0F AE EB | LFENCE | SSE2
  code-suffix: EB
  flags: asm-ig
-----
INSTRUCTION: NP 0F AE EC | LFENCE | SSE2
  code-suffix: EC
  flags: asm-ig
-----
INSTRUCTION: NP 0F AE ED | LFENCE | SSE2
  code-suffix: ED
  flags: asm-ig
-----
INSTRUCTION: NP 0F AE EE | LFENCE | SSE2
  code-suffix: EE
  flags: asm-ig
-----
INSTRUCTION: NP 0F AE EF | LFENCE | SSE2
  code-suffix: EF
  flags: asm-ig
-----
INSTRUCTION: NP 0F AE F0 | MFENCE | SSE2
  flags: serialize-amd
-----
INSTRUCTION: NP 0F AE F1 | MFENCE | SSE2
  code-suffix: F1
  flags: serialize-amd asm-ig
-----
INSTRUCTION: NP 0F AE F2 | MFENCE | SSE2
  code-suffix: F2
  flags: serialize-amd asm-ig
-----
INSTRUCTION: NP 0F AE F3 | MFENCE | SSE2
  code-suffix: F3
  flags: serialize-amd asm-ig
-----
INSTRUCTION: NP 0F AE F4 | MFENCE | SSE2
  code-suffix: F4
  flags: serialize-amd asm-ig
-----
INSTRUCTION: NP 0F AE F5 | MFENCE | SSE2
  code-suffix: F5
  flags: serialize-amd asm-ig
-----
INSTRUCTION: NP 0F AE F6 | MFENCE | SSE2
  code-suffix: F6
  flags: serialize-amd asm-ig
-----
INSTRUCTION: NP 0F AE F7 | MFENCE | SSE2
  code-suffix: F7
  flags: serialize-amd asm-ig
-----
INSTRUCTION: NP 0F AE F8 | SFENCE | SSE
-----
INSTRUCTION: NP 0F AE F9 | SFENCE | SSE
  code-suffix: F9
  flags: asm-ig
-----
INSTRUCTION: NP 0F AE FA | SFENCE | SSE
  code-suffix: FA
  flags: asm-ig
-----
INSTRUCTION: NP 0F AE FB | SFENCE | SSE
  code-suffix: FB
  flags: asm-ig
-----
INSTRUCTION: NP 0F AE FC | SFENCE | SSE
  code-suffix: FC
  flags: asm-ig
-----
INSTRUCTION: NP 0F AE FD | SFENCE | SSE
  code-suffix: FD
  flags: asm-ig
-----
INSTRUCTION: NP 0F AE FE | SFENCE | SSE
  code-suffix: FE
  flags: asm-ig
-----
INSTRUCTION: NP 0F AE FF | SFENCE | SSE
  code-suffix: FF
  flags: asm-ig
-----
INSTRUCTION: 66 0F AE F8 | PCOMMIT | PCOMMIT
  flags: dec-opt=Pcommit intel-may-vm-exit no-in-sgx tsx-impl-abort
-----
INSTRUCTION: o16 0F AF /r | IMUL r16, r/m16 | INTEL386
  ops: rw=reg r=rm | Int16
  rflags: u=szap w=oc
  gas: suffix=w
-----
INSTRUCTION: o32 0F AF /r | IMUL r32, r/m32 | INTEL386
  ops: rw=reg r=rm | Int32
  rflags: u=szap w=oc
  gas: suffix=l
-----
INSTRUCTION: o64 0F AF /r | IMUL r64, r/m64 | X64
  ops: rw=reg r=rm | Int64
  rflags: u=szap w=oc
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: 0F B0 /r | CMPXCHG r/m8, r8 | INTEL486
  ops: rcw=rm r=reg | UInt8
  implied: rcw=al
  rflags: w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=b
-----
INSTRUCTION: o16 0F B1 /r | CMPXCHG r/m16, r16 | INTEL486
  ops: rcw=rm r=reg | UInt16
  implied: rcw=ax
  rflags: w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=w
-----
INSTRUCTION: o32 0F B1 /r | CMPXCHG r/m32, r32 | INTEL486
  ops: rcw=rm r=reg | UInt32
  implied: rcw=eax
  rflags: w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=l
-----
INSTRUCTION: o64 0F B1 /r | CMPXCHG r/m64, r64 | X64
  ops: rcw=rm r=reg | UInt64
  implied: rcw=rax
  rflags: w=oszacp
  flags: 64 lock xacquire xrelease
  gas: suffix=q
-----
INSTRUCTION: o16 0F B2 /r | LSS r16, m16:16 | INTEL386
  ops: w=reg r=rm | SegPtr16
  implied: w=ss
  code-memory-size: 1616
  flags: no-in-sgx tsx-impl-abort
  gas: suffix=w
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: o32 0F B2 /r | LSS r32, m16:32 | INTEL386
  ops: w=reg r=rm | SegPtr32
  implied: w=ss
  code-memory-size: 1632
  flags: no-in-sgx tsx-impl-abort
  gas: suffix=l
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: o64 0F B2 /r | LSS r64, m16:64 | X64
  ops: w=reg r=rm | SegPtr64
  implied: w=ss
  code-memory-size: 1664
  flags: 64 no-amd-dec no-in-sgx tsx-impl-abort
  gas: suffix=q
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: o16 0F B3 /r | BTR r/m16, r16 | INTEL386
  ops: rw=rm r=reg | UInt16
  rflags: u=osap w=c
  flags: lock xacquire xrelease
  gas: suffix=w
-----
INSTRUCTION: o32 0F B3 /r | BTR r/m32, r32 | INTEL386
  ops: rw=rm r=reg | UInt32
  rflags: u=osap w=c
  flags: lock xacquire xrelease
  gas: suffix=l
-----
INSTRUCTION: o64 0F B3 /r | BTR r/m64, r64 | X64
  ops: rw=rm r=reg | UInt64
  rflags: u=osap w=c
  flags: 64 lock xacquire xrelease
  gas: suffix=q
-----
INSTRUCTION: o16 0F B4 /r | LFS r16, m16:16 | INTEL386
  ops: w=reg r=rm | SegPtr16
  implied: w=fs
  code-memory-size: 1616
  flags: no-in-sgx tsx-impl-abort
  gas: suffix=w
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: o32 0F B4 /r | LFS r32, m16:32 | INTEL386
  ops: w=reg r=rm | SegPtr32
  implied: w=fs
  code-memory-size: 1632
  flags: no-in-sgx tsx-impl-abort
  gas: suffix=l
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: o64 0F B4 /r | LFS r64, m16:64 | X64
  ops: w=reg r=rm | SegPtr64
  implied: w=fs
  code-memory-size: 1664
  flags: 64 no-amd-dec no-in-sgx tsx-impl-abort
  gas: suffix=q
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: o16 0F B5 /r | LGS r16, m16:16 | INTEL386
  ops: w=reg r=rm | SegPtr16
  implied: w=gs
  code-memory-size: 1616
  flags: no-in-sgx tsx-impl-abort
  gas: suffix=w
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: o32 0F B5 /r | LGS r32, m16:32 | INTEL386
  ops: w=reg r=rm | SegPtr32
  implied: w=gs
  code-memory-size: 1632
  flags: no-in-sgx tsx-impl-abort
  gas: suffix=l
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: o64 0F B5 /r | LGS r64, m16:64 | X64
  ops: w=reg r=rm | SegPtr64
  implied: w=gs
  code-memory-size: 1664
  flags: 64 no-amd-dec no-in-sgx tsx-impl-abort
  gas: suffix=q
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: o16 0F B6 /r | MOVZX r16, r/m8 | INTEL386
  ops: w=reg r=rm | UInt8
  fast: flags=force-size=always
  gas: mnemonic=movzbw
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 0F B6 /r | MOVZX r32, r/m8 | INTEL386
  ops: w=reg r=rm | UInt8
  fast: flags=force-size=always
  gas: mnemonic=movzbl
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 0F B6 /r | MOVZX r64, r/m8 | X64
  ops: w=reg r=rm | UInt8
  flags: 64
  fast: flags=force-size=always
  gas: mnemonic=movzbq
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 0F B7 /r | MOVZX r16, r/m16 | INTEL386
  ops: w=reg r=rm | UInt16
  fast: flags=force-size=always
  gas: mnemonic=movzxw
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 0F B7 /r | MOVZX r32, r/m16 | INTEL386
  ops: w=reg r=rm | UInt16
  fast: flags=force-size=always
  gas: mnemonic=movzwl
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 0F B7 /r | MOVZX r64, r/m16 | X64
  ops: w=reg r=rm | UInt16
  flags: 64
  fast: flags=force-size=always
  gas: mnemonic=movzwq
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 0F B8 cw | JMPE disp16 | IA64
  ops: r=br
  flags: 16 32 dec-opt=Jmpe br=jmpe-near cflow=br
  gas: osz
  nasm: osz-call
-----
INSTRUCTION: o32 0F B8 cd | JMPE disp32 | IA64
  ops: r=br
  flags: 16 32 dec-opt=Jmpe br=jmpe-near cflow=br
  gas: osz
  nasm: osz-call
-----
INSTRUCTION: o16 F3 0F B8 /r | POPCNT r16, r/m16 | POPCNT
  ops: w=reg r=rm | UInt16
  rflags: w=z 0=osacp
  gas: suffix=w
-----
INSTRUCTION: o32 F3 0F B8 /r | POPCNT r32, r/m32 | POPCNT
  ops: w=reg r=rm | UInt32
  rflags: w=z 0=osacp
  gas: suffix=l
-----
INSTRUCTION: F3 o64 0F B8 /r | POPCNT r64, r/m64 | POPCNT
  ops: w=reg r=rm | UInt64
  rflags: w=z 0=osacp
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: o16 0F B9 /r | UD1 r16, r/m16 | INTEL286
  ops: n=reg n=rm | UInt16
  flags: cflow=ex intel-vm-exit tsx-impl-abort
  gas: suffix=w
-----
INSTRUCTION: o32 0F B9 /r | UD1 r32, r/m32 | INTEL386
  ops: n=reg n=rm | UInt32
  flags: cflow=ex intel-vm-exit tsx-impl-abort
  gas: suffix=l
-----
INSTRUCTION: o64 0F B9 /r | UD1 r64, r/m64 | X64
  ops: n=reg n=rm | UInt64
  flags: 64 cflow=ex intel-vm-exit tsx-impl-abort
  gas: suffix=q
-----
INSTRUCTION: o16 0F BA /4 ib | BT r/m16, imm8 | INTEL386
  ops: r=rm r=imm | UInt16
  rflags: u=osap w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 0F BA /4 ib | BT r/m32, imm8 | INTEL386
  ops: r=rm r=imm | UInt32
  rflags: u=osap w=c
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 0F BA /4 ib | BT r/m64, imm8 | X64
  ops: r=rm r=imm | UInt64
  rflags: u=osap w=c
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 0F BA /5 ib | BTS r/m16, imm8 | INTEL386
  ops: rw=rm r=imm | UInt16
  rflags: u=osap w=c
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 0F BA /5 ib | BTS r/m32, imm8 | INTEL386
  ops: rw=rm r=imm | UInt32
  rflags: u=osap w=c
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 0F BA /5 ib | BTS r/m64, imm8 | X64
  ops: rw=rm r=imm | UInt64
  rflags: u=osap w=c
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 0F BA /6 ib | BTR r/m16, imm8 | INTEL386
  ops: rw=rm r=imm | UInt16
  rflags: u=osap w=c
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 0F BA /6 ib | BTR r/m32, imm8 | INTEL386
  ops: rw=rm r=imm | UInt32
  rflags: u=osap w=c
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 0F BA /6 ib | BTR r/m64, imm8 | X64
  ops: rw=rm r=imm | UInt64
  rflags: u=osap w=c
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 0F BA /7 ib | BTC r/m16, imm8 | INTEL386
  ops: rw=rm r=imm | UInt16
  rflags: u=osap w=c
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 0F BA /7 ib | BTC r/m32, imm8 | INTEL386
  ops: rw=rm r=imm | UInt32
  rflags: u=osap w=c
  flags: lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 0F BA /7 ib | BTC r/m64, imm8 | X64
  ops: rw=rm r=imm | UInt64
  rflags: u=osap w=c
  flags: 64 lock xacquire xrelease
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 0F BB /r | BTC r/m16, r16 | INTEL386
  ops: rw=rm r=reg | UInt16
  rflags: u=osap w=c
  flags: lock xacquire xrelease
  gas: suffix=w
-----
INSTRUCTION: o32 0F BB /r | BTC r/m32, r32 | INTEL386
  ops: rw=rm r=reg | UInt32
  rflags: u=osap w=c
  flags: lock xacquire xrelease
  gas: suffix=l
-----
INSTRUCTION: o64 0F BB /r | BTC r/m64, r64 | X64
  ops: rw=rm r=reg | UInt64
  rflags: u=osap w=c
  flags: 64 lock xacquire xrelease
  gas: suffix=q
-----
INSTRUCTION: o16 0F BC /r | BSF r16, r/m16 | INTEL386
  ops: cw=reg r=rm | UInt16
  rflags: u=osacp w=z
  gas: suffix=w
-----
INSTRUCTION: o32 0F BC /r | BSF r32, r/m32 | INTEL386
  ops: cw=reg r=rm | UInt32
  rflags: u=osacp w=z
  gas: suffix=l
-----
INSTRUCTION: o64 0F BC /r | BSF r64, r/m64 | X64
  ops: cw=reg r=rm | UInt64
  rflags: u=osacp w=z
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: o16 F3 0F BC /r | TZCNT r16, r/m16 | BMI1
  ops: w=reg r=rm | UInt16
  rflags: u=osap w=zc
  gas: suffix=w
-----
INSTRUCTION: o32 F3 0F BC /r | TZCNT r32, r/m32 | BMI1
  ops: w=reg r=rm | UInt32
  rflags: u=osap w=zc
  gas: suffix=l
-----
INSTRUCTION: F3 o64 0F BC /r | TZCNT r64, r/m64 | BMI1
  ops: w=reg r=rm | UInt64
  rflags: u=osap w=zc
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: o16 0F BD /r | BSR r16, r/m16 | INTEL386
  ops: cw=reg r=rm | UInt16
  rflags: u=osacp w=z
  gas: suffix=w
-----
INSTRUCTION: o32 0F BD /r | BSR r32, r/m32 | INTEL386
  ops: cw=reg r=rm | UInt32
  rflags: u=osacp w=z
  gas: suffix=l
-----
INSTRUCTION: o64 0F BD /r | BSR r64, r/m64 | X64
  ops: cw=reg r=rm | UInt64
  rflags: u=osacp w=z
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: o16 F3 0F BD /r | LZCNT r16, r/m16 | LZCNT
  ops: w=reg r=rm | UInt16
  rflags: u=osap w=zc
  gas: suffix=w
-----
INSTRUCTION: o32 F3 0F BD /r | LZCNT r32, r/m32 | LZCNT
  ops: w=reg r=rm | UInt32
  rflags: u=osap w=zc
  gas: suffix=l
-----
INSTRUCTION: F3 o64 0F BD /r | LZCNT r64, r/m64 | LZCNT
  ops: w=reg r=rm | UInt64
  rflags: u=osap w=zc
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: o16 0F BE /r | MOVSX r16, r/m8 | INTEL386
  ops: w=reg r=rm | Int8
  fast: flags=force-size=always
  gas: mnemonic=movsbw
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 0F BE /r | MOVSX r32, r/m8 | INTEL386
  ops: w=reg r=rm | Int8
  fast: flags=force-size=always
  gas: mnemonic=movsbl
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 0F BE /r | MOVSX r64, r/m8 | X64
  ops: w=reg r=rm | Int8
  flags: 64
  fast: flags=force-size=always
  gas: mnemonic=movsbq
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 0F BF /r | MOVSX r16, r/m16 | INTEL386
  ops: w=reg r=rm | Int16
  fast: flags=force-size=always
  gas: mnemonic=movsxw
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 0F BF /r | MOVSX r32, r/m16 | INTEL386
  ops: w=reg r=rm | Int16
  fast: flags=force-size=always
  gas: mnemonic=movswl
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o64 0F BF /r | MOVSX r64, r/m16 | X64
  ops: w=reg r=rm | Int16
  flags: 64
  fast: flags=force-size=always
  gas: mnemonic=movswq
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: 0F C0 /r | XADD r/m8, r8 | INTEL486
  ops: rw=rm rw=reg | UInt8
  rflags: w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=b
-----
INSTRUCTION: o16 0F C1 /r | XADD r/m16, r16 | INTEL486
  ops: rw=rm rw=reg | UInt16
  rflags: w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=w
-----
INSTRUCTION: o32 0F C1 /r | XADD r/m32, r32 | INTEL486
  ops: rw=rm rw=reg | UInt32
  rflags: w=oszacp
  flags: lock xacquire xrelease
  gas: suffix=l
-----
INSTRUCTION: o64 0F C1 /r | XADD r/m64, r64 | X64
  ops: rw=rm rw=reg | UInt64
  rflags: w=oszacp
  flags: 64 lock xacquire xrelease
  gas: suffix=q
-----
INSTRUCTION: NP 0F C2 /r ib | CMPPS xmm1, xmm2/m128, imm8 | SSE
  ops: rw=reg r=rm r=imm | Packed128_Float32
  flags: pseudo=cmpps
-----
INSTRUCTION: VEX.128.0F.WIG C2 /r ib | VCMPPS xmm1, xmm2, xmm3/m128, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float32
  flags: pseudo=vcmpps
-----
INSTRUCTION: VEX.256.0F.WIG C2 /r ib | VCMPPS ymm1, ymm2, ymm3/m256, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float32
  flags: pseudo=vcmpps
-----
INSTRUCTION: EVEX.128.0F.W0 C2 /r ib | VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8 | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float32 Broadcast128_Float32
  flags: pseudo=vcmpps implied-z
-----
INSTRUCTION: EVEX.256.0F.W0 C2 /r ib | VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float32 Broadcast256_Float32
  flags: pseudo=vcmpps implied-z
-----
INSTRUCTION: EVEX.512.0F.W0 C2 /r ib | VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8 | AVX512F | N64b4
  ops: w=reg r=vvvv r=rm r=imm | Packed512_Float32 Broadcast512_Float32
  flags: pseudo=vcmpps implied-z
-----
INSTRUCTION: 66 0F C2 /r ib | CMPPD xmm1, xmm2/m128, imm8 | SSE2
  ops: rw=reg r=rm r=imm | Packed128_Float64
  flags: pseudo=cmppd
-----
INSTRUCTION: VEX.128.66.0F.WIG C2 /r ib | VCMPPD xmm1, xmm2, xmm3/m128, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float64
  flags: pseudo=vcmppd
-----
INSTRUCTION: VEX.256.66.0F.WIG C2 /r ib | VCMPPD ymm1, ymm2, ymm3/m256, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float64
  flags: pseudo=vcmppd
-----
INSTRUCTION: EVEX.128.66.0F.W1 C2 /r ib | VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8 | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float64 Broadcast128_Float64
  flags: pseudo=vcmppd implied-z
-----
INSTRUCTION: EVEX.256.66.0F.W1 C2 /r ib | VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float64 Broadcast256_Float64
  flags: pseudo=vcmppd implied-z
-----
INSTRUCTION: EVEX.512.66.0F.W1 C2 /r ib | VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8 | AVX512F | N64b8
  ops: w=reg r=vvvv r=rm r=imm | Packed512_Float64 Broadcast512_Float64
  flags: pseudo=vcmppd implied-z
-----
INSTRUCTION: F3 0F C2 /r ib | CMPSS xmm1, xmm2/m32, imm8 | SSE
  ops: rw=reg r=rm r=imm | Float32
  flags: pseudo=cmpss
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F3.0F.WIG C2 /r ib | VCMPSS xmm1, xmm2, xmm3/m32, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Float32
  flags: pseudo=vcmpss
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.0F.W0 C2 /r ib | VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8 | AVX512F | N4
  ops: w=reg r=vvvv r=rm r=imm | Float32
  flags: pseudo=vcmpss implied-z
  masm: flags=force-size=default
-----
INSTRUCTION: F2 0F C2 /r ib | CMPSD xmm1, xmm2/m64, imm8 | SSE2
  ops: rw=reg r=rm r=imm | Float64
  flags: pseudo=cmpsd
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.F2.0F.WIG C2 /r ib | VCMPSD xmm1, xmm2, xmm3/m64, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Float64
  flags: pseudo=vcmpsd
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F2.0F.W1 C2 /r ib | VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8 | AVX512F | N8
  ops: w=reg r=vvvv r=rm r=imm | Float64
  flags: pseudo=vcmpsd implied-z
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F C3 /r | MOVNTI m32, r32 | SSE2
  ops: w=rm r=reg | UInt32
  flags: tsx-impl-abort non-temporal
  gas: suffix=l
-----
INSTRUCTION: NP o64 0F C3 /r | MOVNTI m64, r64 | SSE2
  ops: w=rm r=reg | UInt64
  flags: 64 tsx-impl-abort non-temporal
  gas: suffix=q
-----
INSTRUCTION: NP 0F C4 /r ib | PINSRW mm, r32/m16, imm8 | SSE
  ops: rw=reg r=rm r=imm | UInt16
  implied: last-gpr-16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx;force-size=default
-----
INSTRUCTION: NP o64 0F C4 /r ib | PINSRW mm, r64/m16, imm8 | SSE
  ops: rw=reg r=rm r=imm | UInt16
  implied: last-gpr-16
  flags: 64 tsx-impl-abort
  intel: reg32
  masm: flags=mem-size=mmx;force-size=default
  nasm: reg32
-----
INSTRUCTION: 66 0F C4 /r ib | PINSRW xmm, r32/m16, imm8 | SSE2
  ops: rw=reg r=rm r=imm | UInt16
  implied: last-gpr-16
  masm: flags=force-size=default
-----
INSTRUCTION: 66 o64 0F C4 /r ib | PINSRW xmm, r64/m16, imm8 | SSE2
  ops: rw=reg r=rm r=imm | UInt16
  implied: last-gpr-16
  flags: 64
  intel: reg32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F.W0 C4 /r ib | VPINSRW xmm1, xmm2, r32/m16, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | UInt16
  implied: last-gpr-16
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F.W1 C4 /r ib | VPINSRW xmm1, xmm2, r64/m16, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | UInt16
  implied: last-gpr-16
  flags: 64 asm-ig-mem
  intel: reg32
  masm: flags=force-size=default reg32
  nasm: reg32
-----
INSTRUCTION: EVEX.128.66.0F.W0 C4 /r ib | VPINSRW xmm1, xmm2, r32/m16, imm8 | AVX512BW | N2
  ops: w=reg r=vvvv r=rm r=imm | UInt16
  implied: last-gpr-16
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W1 C4 /r ib | VPINSRW xmm1, xmm2, r64/m16, imm8 | AVX512BW | N2
  ops: w=reg r=vvvv r=rm r=imm | UInt16
  implied: last-gpr-16
  flags: 64 asm-ig-mem
  intel: reg32
  masm: flags=force-size=default reg32
  nasm: reg32
-----
INSTRUCTION: NP 0F C5 /r ib | PEXTRW r32, mm, imm8 | SSE
  ops: w=reg r=rm r=imm
  flags: tsx-impl-abort
-----
INSTRUCTION: NP o64 0F C5 /r ib | PEXTRW r64, mm, imm8 | SSE
  ops: w=reg r=rm r=imm
  flags: 64 tsx-impl-abort
  intel: reg32
  nasm: reg32
-----
INSTRUCTION: 66 0F C5 /r ib | PEXTRW r32, xmm, imm8 | SSE2
  ops: w=reg r=rm r=imm
-----
INSTRUCTION: 66 o64 0F C5 /r ib | PEXTRW r64, xmm, imm8 | SSE2
  ops: w=reg r=rm r=imm
  flags: 64
  intel: reg32
-----
INSTRUCTION: VEX.128.66.0F.W0 C5 /r ib | VPEXTRW r32, xmm1, imm8 | AVX
  ops: w=reg r=rm r=imm
  flags: wig32
-----
INSTRUCTION: VEX.128.66.0F.W1 C5 /r ib | VPEXTRW r64, xmm1, imm8 | AVX
  ops: w=reg r=rm r=imm
  flags: 64
  intel: reg32
-----
INSTRUCTION: EVEX.128.66.0F.W0 C5 /r ib | VPEXTRW r32, xmm1, imm8 | AVX512BW
  ops: w=reg r=rm r=imm
  flags: wig32
-----
INSTRUCTION: EVEX.128.66.0F.W1 C5 /r ib | VPEXTRW r64, xmm1, imm8 | AVX512BW
  ops: w=reg r=rm r=imm
  flags: 64
  intel: reg32
-----
INSTRUCTION: NP 0F C6 /r ib | SHUFPS xmm1, xmm2/m128, imm8 | SSE
  ops: rw=reg r=rm r=imm | Packed128_Float32
-----
INSTRUCTION: VEX.128.0F.WIG C6 /r ib | VSHUFPS xmm1, xmm2, xmm3/m128, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float32
-----
INSTRUCTION: VEX.256.0F.WIG C6 /r ib | VSHUFPS ymm1, ymm2, ymm3/m256, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.0F.W0 C6 /r ib | VSHUFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8 | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.0F.W0 C6 /r ib | VSHUFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.0F.W0 C6 /r ib | VSHUFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8 | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: 66 0F C6 /r ib | SHUFPD xmm1, xmm2/m128, imm8 | SSE2
  ops: rw=reg r=rm r=imm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG C6 /r ib | VSHUFPD xmm1, xmm2, xmm3/m128, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG C6 /r ib | VSHUFPD ymm1, ymm2, ymm3/m256, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F.W1 C6 /r ib | VSHUFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8 | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F.W1 C6 /r ib | VSHUFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F.W1 C6 /r ib | VSHUFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8 | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: 0F C7 /1 | CMPXCHG8B m64 | CX8
  ops: rcw=rm | UInt64
  implied: rcw=eax;edx cr=ecx;ebx
  rflags: w=z
  flags: lock xacquire xrelease
  masm: flags=force-size=default
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: o64 0F C7 /1 | CMPXCHG16B m128 | CMPXCHG16B
  ops: rcw=rm | UInt128
  implied: rcw=rax;rdx cr=rcx;rbx
  rflags: w=z
  flags: 64 lock
  masm: flags=mem-size=normal
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: NP 0F C7 /3 | XRSTORS mem | XSAVES
  ops: r=rm | Xsave
  implied: r=eax;edx
  code-memory-size: em
  flags: cpl0 save-restore intel-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: NP o64 0F C7 /3 | XRSTORS64 mem | XSAVES
  ops: r=rm | Xsave64
  implied: r=eax;edx
  code-memory-size: em
  flags: 64 cpl0 save-restore intel-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: NP 0F C7 /4 | XSAVEC mem | XSAVEC
  ops: w=rm | Xsave
  implied: r=eax;edx
  code-memory-size: em
  flags: save-restore tsx-impl-abort
-----
INSTRUCTION: NP o64 0F C7 /4 | XSAVEC64 mem | XSAVEC
  ops: w=rm | Xsave64
  implied: r=eax;edx
  code-memory-size: em
  flags: 64 save-restore tsx-impl-abort
-----
INSTRUCTION: NP 0F C7 /5 | XSAVES mem | XSAVES
  ops: w=rm | Xsave
  implied: r=eax;edx
  code-memory-size: em
  flags: cpl0 save-restore intel-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: NP o64 0F C7 /5 | XSAVES64 mem | XSAVES
  ops: w=rm | Xsave64
  implied: r=eax;edx
  code-memory-size: em
  flags: 64 cpl0 save-restore intel-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: NP 0F C7 /6 | VMPTRLD m64 | VMX
  ops: r=rm | UInt64
  rflags: w=zc 0=osap
  flags: cpl0 no-rm no-v86 no-cm vmx=op intel-vm-exit tdx-non-root-ud tsx-impl-abort
  masm: flags=force-size=default
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: 66 0F C7 /6 | VMCLEAR m64 | VMX
  ops: r=rm | UInt64
  rflags: w=zc 0=osap
  flags: cpl0 no-rm no-v86 no-cm vmx=op intel-vm-exit tdx-non-root-ud tsx-impl-abort
  masm: flags=force-size=default
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: F3 0F C7 /6 | VMXON m64 | VMX
  ops: r=rm | UInt64
  rflags: w=zc 0=osap
  flags: cpl0 no-rm no-v86 no-cm intel-vm-exit tdx-non-root-ud tsx-impl-abort
  masm: flags=force-size=default
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: o16 0F C7 /6 | RDRAND r16 | RDRAND
  ops: w=rm
  rflags: w=c 0=oszap
  flags: nfx intel-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: o32 0F C7 /6 | RDRAND r32 | RDRAND
  ops: w=rm
  rflags: w=c 0=oszap
  flags: nfx intel-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: o64 0F C7 /6 | RDRAND r64 | RDRAND
  ops: w=rm
  rflags: w=c 0=oszap
  flags: 64 nfx intel-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: NP 0F C7 /7 | VMPTRST m64 | VMX
  ops: w=rm | UInt64
  rflags: 0=oszapc
  flags: cpl0 no-rm no-v86 no-cm vmx=op intel-vm-exit tdx-non-root-ud tsx-impl-abort
  masm: flags=force-size=default
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: o16 0F C7 /7 | RDSEED r16 | RDSEED
  ops: w=rm
  rflags: w=c 0=oszap
  flags: nfx intel-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: o32 0F C7 /7 | RDSEED r32 | RDSEED
  ops: w=rm
  rflags: w=c 0=oszap
  flags: nfx intel-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: o64 0F C7 /7 | RDSEED r64 | RDSEED
  ops: w=rm
  rflags: w=c 0=oszap
  flags: 64 nfx intel-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: F3 0F C7 /7 | RDPID r32 | RDPID
  ops: w=rm
  flags: 16 32
-----
INSTRUCTION: F3 0F C7 /7 | RDPID r64 | RDPID
  ops: w=rm
  flags: 64
-----
INSTRUCTION: o16 0F C8+rw | BSWAP r16 | INTEL486
  ops: rw=opcode
  gas: suffix=w
-----
INSTRUCTION: o32 0F C8+rd | BSWAP r32 | INTEL486
  ops: rw=opcode
  gas: suffix=l
-----
INSTRUCTION: o64 0F C8+ro | BSWAP r64 | X64
  ops: rw=opcode
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: 66 0F D0 /r | ADDSUBPD xmm1, xmm2/m128 | SSE3
  ops: rw=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG D0 /r | VADDSUBPD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F.WIG D0 /r | VADDSUBPD ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: F2 0F D0 /r | ADDSUBPS xmm1, xmm2/m128 | SSE3
  ops: rw=reg r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.128.F2.0F.WIG D0 /r | VADDSUBPS xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.F2.0F.WIG D0 /r | VADDSUBPS ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: NP 0F D1 /r | PSRLW mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F D1 /r | PSRLW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.66.0F.WIG D1 /r | VPSRLW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.66.0F.WIG D1 /r | VPSRLW ymm1, ymm2, xmm3/m128 | AVX2
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.128.66.0F.WIG D1 /r | VPSRLW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F.WIG D1 /r | VPSRLW ymm1 {k1}{z}, ymm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.512.66.0F.WIG D1 /r | VPSRLW zmm1 {k1}{z}, zmm2, xmm3/m128 | AVX512BW | N16
  ops: wvmm=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: NP 0F D2 /r | PSRLD mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt32
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F D2 /r | PSRLD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.128.66.0F.WIG D2 /r | VPSRLD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F.WIG D2 /r | VPSRLD ymm1, ymm2, xmm3/m128 | AVX2
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: EVEX.128.66.0F.W0 D2 /r | VPSRLD xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F.W0 D2 /r | VPSRLD ymm1 {k1}{z}, ymm2, xmm3/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: EVEX.512.66.0F.W0 D2 /r | VPSRLD zmm1 {k1}{z}, zmm2, xmm3/m128 | AVX512F | N16
  ops: wvmm=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: NP 0F D3 /r | PSRLQ mm, mm/m64 | MMX
  ops: rw=reg r=rm | UInt64
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F D3 /r | PSRLQ xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt64
-----
INSTRUCTION: VEX.128.66.0F.WIG D3 /r | VPSRLQ xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: VEX.256.66.0F.WIG D3 /r | VPSRLQ ymm1, ymm2, xmm3/m128 | AVX2
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: EVEX.128.66.0F.W1 D3 /r | VPSRLQ xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F.W1 D3 /r | VPSRLQ ymm1 {k1}{z}, ymm2, xmm3/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: EVEX.512.66.0F.W1 D3 /r | VPSRLQ zmm1 {k1}{z}, zmm2, xmm3/m128 | AVX512F | N16
  ops: wvmm=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: NP 0F D4 /r | PADDQ mm, mm/m64 | MMX
  ops: rw=reg r=rm | UInt64
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F D4 /r | PADDQ xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt64
-----
INSTRUCTION: VEX.128.66.0F.WIG D4 /r | VPADDQ xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: VEX.256.66.0F.WIG D4 /r | VPADDQ ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt64
-----
INSTRUCTION: EVEX.128.66.0F.W1 D4 /r | VPADDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F.W1 D4 /r | VPADDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F.W1 D4 /r | VPADDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: NP 0F D5 /r | PMULLW mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_Int16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F D5 /r | PMULLW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.128.66.0F.WIG D5 /r | VPMULLW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F.WIG D5 /r | VPMULLW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.128.66.0F.WIG D5 /r | VPMULLW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: EVEX.256.66.0F.WIG D5 /r | VPMULLW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.512.66.0F.WIG D5 /r | VPMULLW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int16
-----
INSTRUCTION: 66 0F D6 /r | MOVQ xmm2/m64, xmm1 | SSE2
  ops: w=rm r=reg | UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F.WIG D6 /r | VMOVQ xmm1/m64, xmm2 | AVX
  ops: w=rm r=reg | UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W1 D6 /r | VMOVQ xmm1/m64, xmm2 | AVX512F | N8
  ops: w=rm r=reg | UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: F3 0F D6 /r | MOVQ2DQ xmm, mm | SSE2
  ops: w=reg r=rm
  flags: tsx-impl-abort
-----
INSTRUCTION: F2 0F D6 /r | MOVDQ2Q mm, xmm | SSE2
  ops: w=reg r=rm
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: NP 0F D7 /r | PMOVMSKB r32, mm | SSE
  ops: w=reg r=rm
  flags: tsx-impl-abort
-----
INSTRUCTION: NP o64 0F D7 /r | PMOVMSKB r64, mm | SSE
  ops: w=reg r=rm
  flags: 64 tsx-impl-abort
  intel: reg32
  nasm: reg32
-----
INSTRUCTION: 66 0F D7 /r | PMOVMSKB r32, xmm | SSE2
  ops: w=reg r=rm
-----
INSTRUCTION: 66 o64 0F D7 /r | PMOVMSKB r64, xmm | SSE2
  ops: w=reg r=rm
  flags: 64
  intel: reg32
  nasm: reg32
-----
INSTRUCTION: VEX.128.66.0F.W0 D7 /r | VPMOVMSKB r32, xmm1 | AVX
  ops: w=reg r=rm
  flags: wig32
-----
INSTRUCTION: VEX.128.66.0F.W1 D7 /r | VPMOVMSKB r64, xmm1 | AVX
  ops: w=reg r=rm
  flags: 64
  intel: reg32
-----
INSTRUCTION: VEX.256.66.0F.W0 D7 /r | VPMOVMSKB r32, ymm1 | AVX2
  ops: w=reg r=rm
  flags: wig32
-----
INSTRUCTION: VEX.256.66.0F.W1 D7 /r | VPMOVMSKB r64, ymm1 | AVX2
  ops: w=reg r=rm
  flags: 64
  intel: reg32
-----
INSTRUCTION: NP 0F D8 /r | PSUBUSB mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt8
  implied: zero-reg-regmem
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F D8 /r | PSUBUSB xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt8
  implied: zero-reg-regmem
-----
INSTRUCTION: VEX.128.66.0F.WIG D8 /r | VPSUBUSB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: VEX.256.66.0F.WIG D8 /r | VPSUBUSB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.128.66.0F.WIG D8 /r | VPSUBUSB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.256.66.0F.WIG D8 /r | VPSUBUSB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.512.66.0F.WIG D8 /r | VPSUBUSB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt8
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: NP 0F D9 /r | PSUBUSW mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt16
  implied: zero-reg-regmem
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F D9 /r | PSUBUSW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt16
  implied: zero-reg-regmem
-----
INSTRUCTION: VEX.128.66.0F.WIG D9 /r | VPSUBUSW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: VEX.256.66.0F.WIG D9 /r | VPSUBUSW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.128.66.0F.WIG D9 /r | VPSUBUSW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.256.66.0F.WIG D9 /r | VPSUBUSW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.512.66.0F.WIG D9 /r | VPSUBUSW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt16
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: NP 0F DA /r | PMINUB mm1, mm2/m64 | SSE
  ops: rw=reg r=rm | Packed64_UInt8
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F DA /r | PMINUB xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.128.66.0F.WIG DA /r | VPMINUB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.66.0F.WIG DA /r | VPMINUB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.128.66.0F.WIG DA /r | VPMINUB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F.WIG DA /r | VPMINUB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F.WIG DA /r | VPMINUB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt8
-----
INSTRUCTION: NP 0F DB /r | PAND mm, mm/m64 | MMX
  ops: rw=reg r=rm | UInt64
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F DB /r | PAND xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | UInt128
-----
INSTRUCTION: VEX.128.66.0F.WIG DB /r | VPAND xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | UInt128
-----
INSTRUCTION: VEX.256.66.0F.WIG DB /r | VPAND ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt128
-----
INSTRUCTION: EVEX.128.66.0F.W0 DB /r | VPANDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F.W0 DB /r | VPANDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F.W0 DB /r | VPANDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F.W1 DB /r | VPANDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F.W1 DB /r | VPANDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F.W1 DB /r | VPANDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: NP 0F DC /r | PADDUSB mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt8
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F DC /r | PADDUSB xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.128.66.0F.WIG DC /r | VPADDUSB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.66.0F.WIG DC /r | VPADDUSB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.128.66.0F.WIG DC /r | VPADDUSB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F.WIG DC /r | VPADDUSB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F.WIG DC /r | VPADDUSB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt8
-----
INSTRUCTION: NP 0F DD /r | PADDUSW mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F DD /r | PADDUSW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.66.0F.WIG DD /r | VPADDUSW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.66.0F.WIG DD /r | VPADDUSW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.128.66.0F.WIG DD /r | VPADDUSW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F.WIG DD /r | VPADDUSW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F.WIG DD /r | VPADDUSW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt16
-----
INSTRUCTION: NP 0F DE /r | PMAXUB mm1, mm2/m64 | SSE
  ops: rw=reg r=rm | Packed64_UInt8
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F DE /r | PMAXUB xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.128.66.0F.WIG DE /r | VPMAXUB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.66.0F.WIG DE /r | VPMAXUB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.128.66.0F.WIG DE /r | VPMAXUB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F.WIG DE /r | VPMAXUB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F.WIG DE /r | VPMAXUB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt8
-----
INSTRUCTION: NP 0F DF /r | PANDN mm, mm/m64 | MMX
  ops: rw=reg r=rm | UInt64
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F DF /r | PANDN xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | UInt128
-----
INSTRUCTION: VEX.128.66.0F.WIG DF /r | VPANDN xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | UInt128
-----
INSTRUCTION: VEX.256.66.0F.WIG DF /r | VPANDN ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt128
-----
INSTRUCTION: EVEX.128.66.0F.W0 DF /r | VPANDND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F.W0 DF /r | VPANDND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F.W0 DF /r | VPANDND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F.W1 DF /r | VPANDNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F.W1 DF /r | VPANDNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F.W1 DF /r | VPANDNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: NP 0F E0 /r | PAVGB mm1, mm2/m64 | SSE
  ops: rw=reg r=rm | Packed64_UInt8
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F E0 /r | PAVGB xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.128.66.0F.WIG E0 /r | VPAVGB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.66.0F.WIG E0 /r | VPAVGB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.128.66.0F.WIG E0 /r | VPAVGB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F.WIG E0 /r | VPAVGB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F.WIG E0 /r | VPAVGB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt8
-----
INSTRUCTION: NP 0F E1 /r | PSRAW mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_Int16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F E1 /r | PSRAW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.128.66.0F.WIG E1 /r | VPSRAW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F.WIG E1 /r | VPSRAW ymm1, ymm2, xmm3/m128 | AVX2
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: EVEX.128.66.0F.WIG E1 /r | VPSRAW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: EVEX.256.66.0F.WIG E1 /r | VPSRAW ymm1 {k1}{z}, ymm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: EVEX.512.66.0F.WIG E1 /r | VPSRAW zmm1 {k1}{z}, zmm2, xmm3/m128 | AVX512BW | N16
  ops: wvmm=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: NP 0F E2 /r | PSRAD mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_Int32
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F E2 /r | PSRAD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.128.66.0F.WIG E2 /r | VPSRAD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.256.66.0F.WIG E2 /r | VPSRAD ymm1, ymm2, xmm3/m128 | AVX2
  ops: w=reg r=vvvv r=rm | Packed128_Int32
-----
INSTRUCTION: EVEX.128.66.0F.W0 E2 /r | VPSRAD xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int32
-----
INSTRUCTION: EVEX.256.66.0F.W0 E2 /r | VPSRAD ymm1 {k1}{z}, ymm2, xmm3/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int32
-----
INSTRUCTION: EVEX.512.66.0F.W0 E2 /r | VPSRAD zmm1 {k1}{z}, zmm2, xmm3/m128 | AVX512F | N16
  ops: wvmm=reg r=vvvv r=rm | Packed128_Int32
-----
INSTRUCTION: EVEX.128.66.0F.W1 E2 /r | VPSRAQ xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int64
-----
INSTRUCTION: EVEX.256.66.0F.W1 E2 /r | VPSRAQ ymm1 {k1}{z}, ymm2, xmm3/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int64
-----
INSTRUCTION: EVEX.512.66.0F.W1 E2 /r | VPSRAQ zmm1 {k1}{z}, zmm2, xmm3/m128 | AVX512F | N16
  ops: wvmm=reg r=vvvv r=rm | Packed128_Int64
-----
INSTRUCTION: NP 0F E3 /r | PAVGW mm1, mm2/m64 | SSE
  ops: rw=reg r=rm | Packed64_UInt16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F E3 /r | PAVGW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.66.0F.WIG E3 /r | VPAVGW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.66.0F.WIG E3 /r | VPAVGW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.128.66.0F.WIG E3 /r | VPAVGW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F.WIG E3 /r | VPAVGW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F.WIG E3 /r | VPAVGW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt16
-----
INSTRUCTION: NP 0F E4 /r | PMULHUW mm1, mm2/m64 | SSE
  ops: rw=reg r=rm | Packed64_UInt16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F E4 /r | PMULHUW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.66.0F.WIG E4 /r | VPMULHUW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.66.0F.WIG E4 /r | VPMULHUW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.128.66.0F.WIG E4 /r | VPMULHUW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F.WIG E4 /r | VPMULHUW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F.WIG E4 /r | VPMULHUW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt16
-----
INSTRUCTION: NP 0F E5 /r | PMULHW mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_Int16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F E5 /r | PMULHW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.128.66.0F.WIG E5 /r | VPMULHW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F.WIG E5 /r | VPMULHW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.128.66.0F.WIG E5 /r | VPMULHW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: EVEX.256.66.0F.WIG E5 /r | VPMULHW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.512.66.0F.WIG E5 /r | VPMULHW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int16
-----
INSTRUCTION: 66 0F E6 /r | CVTTPD2DQ xmm1, xmm2/m128 | SSE2
  ops: w=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F.WIG E6 /r | VCVTTPD2DQ xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: VEX.256.66.0F.WIG E6 /r | VCVTTPD2DQ xmm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.128.66.0F.W1 E6 /r | VCVTTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=rm | Packed128_Float64 Broadcast128_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.66.0F.W1 E6 /r | VCVTTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=rm | Packed256_Float64 Broadcast256_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.66.0F.W1 E6 /r | VCVTTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae} | AVX512F | N64b8
  ops: w=reg r=rm | Packed512_Float64 Broadcast512_Float64
  masm: flags=force-size=default
-----
INSTRUCTION: F3 0F E6 /r | CVTDQ2PD xmm1, xmm2/m64 | SSE2
  ops: w=reg r=rm | Packed64_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.F3.0F.WIG E6 /r | VCVTDQ2PD xmm1, xmm2/m64 | AVX
  ops: w=reg r=rm | Packed64_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.F3.0F.WIG E6 /r | VCVTDQ2PD ymm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F.W0 E6 /r | VCVTDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst | AVX512VL AVX512F | N8b4
  ops: w=reg r=rm | Packed64_Int32 Broadcast64_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F.W0 E6 /r | VCVTDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm | Packed128_Int32 Broadcast128_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F.W0 E6 /r | VCVTDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{er} | AVX512F | N32b4
  ops: wvmm=reg r=rm | Packed256_Int32 Broadcast256_Int32
  flags: ignore-er
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F.W1 E6 /r | VCVTQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512DQ | N16b8
  ops: w=reg r=rm | Packed128_Int64 Broadcast128_Int64
-----
INSTRUCTION: EVEX.256.F3.0F.W1 E6 /r | VCVTQQ2PD ymm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512DQ | N32b8
  ops: w=reg r=rm | Packed256_Int64 Broadcast256_Int64
-----
INSTRUCTION: EVEX.512.F3.0F.W1 E6 /r | VCVTQQ2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{er} | AVX512DQ | N64b8
  ops: wvmm=reg r=rm | Packed512_Int64 Broadcast512_Int64
-----
INSTRUCTION: F2 0F E6 /r | CVTPD2DQ xmm1, xmm2/m128 | SSE2
  ops: w=reg r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.128.F2.0F.WIG E6 /r | VCVTPD2DQ xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: VEX.256.F2.0F.WIG E6 /r | VCVTPD2DQ xmm1, ymm2/m256 | AVX
  ops: w=reg r=rm | Packed256_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.128.F2.0F.W1 E6 /r | VCVTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=rm | Packed128_Float64 Broadcast128_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.F2.0F.W1 E6 /r | VCVTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=rm | Packed256_Float64 Broadcast256_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.F2.0F.W1 E6 /r | VCVTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er} | AVX512F | N64b8
  ops: w=reg r=rm | Packed512_Float64 Broadcast512_Float64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F E7 /r | MOVNTQ m64, mm | SSE
  ops: w=rm r=reg | Packed64_UInt32
  flags: tsx-impl-abort non-temporal
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F E7 /r | MOVNTDQ m128, xmm1 | SSE2
  ops: w=rm r=reg | Packed128_UInt32
  flags: tsx-impl-abort non-temporal
-----
INSTRUCTION: VEX.128.66.0F.WIG E7 /r | VMOVNTDQ m128, xmm1 | AVX
  ops: w=rm r=reg | Packed128_UInt32
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F.WIG E7 /r | VMOVNTDQ m256, ymm1 | AVX
  ops: w=rm r=reg | Packed256_UInt32
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F.W0 E7 /r | VMOVNTDQ m128, xmm1 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_UInt32
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F.W0 E7 /r | VMOVNTDQ m256, ymm1 | AVX512VL AVX512F | N32
  ops: w=rm r=reg | Packed256_UInt32
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F.W0 E7 /r | VMOVNTDQ m512, zmm1 | AVX512F | N64
  ops: w=rm r=reg | Packed512_UInt32
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F E8 /r | PSUBSB mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_Int8
  implied: zero-reg-regmem
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F E8 /r | PSUBSB xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int8
  implied: zero-reg-regmem
-----
INSTRUCTION: VEX.128.66.0F.WIG E8 /r | VPSUBSB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int8
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: VEX.256.66.0F.WIG E8 /r | VPSUBSB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int8
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.128.66.0F.WIG E8 /r | VPSUBSB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int8
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.256.66.0F.WIG E8 /r | VPSUBSB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int8
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.512.66.0F.WIG E8 /r | VPSUBSB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int8
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: NP 0F E9 /r | PSUBSW mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_Int16
  implied: zero-reg-regmem
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F E9 /r | PSUBSW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int16
  implied: zero-reg-regmem
-----
INSTRUCTION: VEX.128.66.0F.WIG E9 /r | VPSUBSW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int16
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: VEX.256.66.0F.WIG E9 /r | VPSUBSW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int16
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.128.66.0F.WIG E9 /r | VPSUBSW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int16
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.256.66.0F.WIG E9 /r | VPSUBSW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int16
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.512.66.0F.WIG E9 /r | VPSUBSW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int16
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: NP 0F EA /r | PMINSW mm1, mm2/m64 | SSE
  ops: rw=reg r=rm | Packed64_Int16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F EA /r | PMINSW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.128.66.0F.WIG EA /r | VPMINSW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F.WIG EA /r | VPMINSW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.128.66.0F.WIG EA /r | VPMINSW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: EVEX.256.66.0F.WIG EA /r | VPMINSW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.512.66.0F.WIG EA /r | VPMINSW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int16
-----
INSTRUCTION: NP 0F EB /r | POR mm, mm/m64 | MMX
  ops: rw=reg r=rm | UInt64
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F EB /r | POR xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | UInt128
-----
INSTRUCTION: VEX.128.66.0F.WIG EB /r | VPOR xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | UInt128
-----
INSTRUCTION: VEX.256.66.0F.WIG EB /r | VPOR ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt128
-----
INSTRUCTION: EVEX.128.66.0F.W0 EB /r | VPORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F.W0 EB /r | VPORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F.W0 EB /r | VPORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F.W1 EB /r | VPORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F.W1 EB /r | VPORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F.W1 EB /r | VPORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: NP 0F EC /r | PADDSB mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_Int8
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F EC /r | PADDSB xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.128.66.0F.WIG EC /r | VPADDSB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.256.66.0F.WIG EC /r | VPADDSB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int8
-----
INSTRUCTION: EVEX.128.66.0F.WIG EC /r | VPADDSB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: EVEX.256.66.0F.WIG EC /r | VPADDSB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int8
-----
INSTRUCTION: EVEX.512.66.0F.WIG EC /r | VPADDSB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int8
-----
INSTRUCTION: NP 0F ED /r | PADDSW mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_Int16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F ED /r | PADDSW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.128.66.0F.WIG ED /r | VPADDSW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F.WIG ED /r | VPADDSW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.128.66.0F.WIG ED /r | VPADDSW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: EVEX.256.66.0F.WIG ED /r | VPADDSW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.512.66.0F.WIG ED /r | VPADDSW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int16
-----
INSTRUCTION: NP 0F EE /r | PMAXSW mm1, mm2/m64 | SSE
  ops: rw=reg r=rm | Packed64_Int16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F EE /r | PMAXSW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.128.66.0F.WIG EE /r | VPMAXSW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F.WIG EE /r | VPMAXSW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.128.66.0F.WIG EE /r | VPMAXSW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: EVEX.256.66.0F.WIG EE /r | VPMAXSW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.512.66.0F.WIG EE /r | VPMAXSW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int16
-----
INSTRUCTION: NP 0F EF /r | PXOR mm, mm/m64 | MMX
  ops: rw=reg r=rm | UInt64
  implied: zero-reg-regmem
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F EF /r | PXOR xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | UInt128
  implied: zero-reg-regmem
-----
INSTRUCTION: VEX.128.66.0F.WIG EF /r | VPXOR xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | UInt128
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: VEX.256.66.0F.WIG EF /r | VPXOR ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt128
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.128.66.0F.W0 EF /r | VPXORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.256.66.0F.W0 EF /r | VPXORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.512.66.0F.W0 EF /r | VPXORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.128.66.0F.W1 EF /r | VPXORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.256.66.0F.W1 EF /r | VPXORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.512.66.0F.W1 EF /r | VPXORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: F2 0F F0 /r | LDDQU xmm1, m128 | SSE3
  ops: w=reg r=rm | UInt128
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.F2.0F.WIG F0 /r | VLDDQU xmm1, m128 | AVX
  ops: w=reg r=rm | UInt128
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.F2.0F.WIG F0 /r | VLDDQU ymm1, m256 | AVX
  ops: w=reg r=rm | UInt256
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F F1 /r | PSLLW mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F F1 /r | PSLLW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.66.0F.WIG F1 /r | VPSLLW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.66.0F.WIG F1 /r | VPSLLW ymm1, ymm2, xmm3/m128 | AVX2
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.128.66.0F.WIG F1 /r | VPSLLW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F.WIG F1 /r | VPSLLW ymm1 {k1}{z}, ymm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.512.66.0F.WIG F1 /r | VPSLLW zmm1 {k1}{z}, zmm2, xmm3/m128 | AVX512BW | N16
  ops: wvmm=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: NP 0F F2 /r | PSLLD mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt32
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F F2 /r | PSLLD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.128.66.0F.WIG F2 /r | VPSLLD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F.WIG F2 /r | VPSLLD ymm1, ymm2, xmm3/m128 | AVX2
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: EVEX.128.66.0F.W0 F2 /r | VPSLLD xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F.W0 F2 /r | VPSLLD ymm1 {k1}{z}, ymm2, xmm3/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: EVEX.512.66.0F.W0 F2 /r | VPSLLD zmm1 {k1}{z}, zmm2, xmm3/m128 | AVX512F | N16
  ops: wvmm=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: NP 0F F3 /r | PSLLQ mm, mm/m64 | MMX
  ops: rw=reg r=rm | UInt64
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F F3 /r | PSLLQ xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt64
-----
INSTRUCTION: VEX.128.66.0F.WIG F3 /r | VPSLLQ xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: VEX.256.66.0F.WIG F3 /r | VPSLLQ ymm1, ymm2, xmm3/m128 | AVX2
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: EVEX.128.66.0F.W1 F3 /r | VPSLLQ xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F.W1 F3 /r | VPSLLQ ymm1 {k1}{z}, ymm2, xmm3/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: EVEX.512.66.0F.W1 F3 /r | VPSLLQ zmm1 {k1}{z}, zmm2, xmm3/m128 | AVX512F | N16
  ops: wvmm=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: NP 0F F4 /r | PMULUDQ mm1, mm2/m64 | SSE2
  ops: rw=reg r=rm | Packed64_UInt32
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F F4 /r | PMULUDQ xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.128.66.0F.WIG F4 /r | VPMULUDQ xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F.WIG F4 /r | VPMULUDQ ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
-----
INSTRUCTION: EVEX.128.66.0F.W1 F4 /r | VPMULUDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_2xUInt32
-----
INSTRUCTION: EVEX.256.66.0F.W1 F4 /r | VPMULUDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_2xUInt32
-----
INSTRUCTION: EVEX.512.66.0F.W1 F4 /r | VPMULUDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_2xUInt32
-----
INSTRUCTION: NP 0F F5 /r | PMADDWD mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_Int16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F F5 /r | PMADDWD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.128.66.0F.WIG F5 /r | VPMADDWD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F.WIG F5 /r | VPMADDWD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.128.66.0F.WIG F5 /r | VPMADDWD xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: EVEX.256.66.0F.WIG F5 /r | VPMADDWD ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.512.66.0F.WIG F5 /r | VPMADDWD zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int16
-----
INSTRUCTION: NP 0F F6 /r | PSADBW mm1, mm2/m64 | SSE
  ops: rw=reg r=rm | Packed64_UInt8
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F F6 /r | PSADBW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.128.66.0F.WIG F6 /r | VPSADBW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.66.0F.WIG F6 /r | VPSADBW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.128.66.0F.WIG F6 /r | VPSADBW xmm1, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F.WIG F6 /r | VPSADBW ymm1, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F.WIG F6 /r | VPSADBW zmm1, zmm2, zmm3/m512 | AVX512BW | N64
  ops: w=reg r=vvvv r=rm | Packed512_UInt8
-----
INSTRUCTION: NP 0F F7 /r | MASKMOVQ [m64], mm1, mm2 | SSE
  ops: w=seg-rdi r=reg r=rm | UInt64
  implied: w=[seg:a_rDI=default]
  flags: tsx-impl-abort non-temporal
  gas: maskmovq
  intel: maskmovq
  masm: flags=mem-size=mmx maskmovq
  nasm: maskmovq
-----
INSTRUCTION: 66 0F F7 /r | MASKMOVDQU [m128], xmm1, xmm2 | SSE2
  ops: w=seg-rdi r=reg r=rm | UInt128
  implied: w=[seg:a_rDI=default]
  flags: tsx-impl-abort non-temporal
  gas: maskmovq
  intel: maskmovq
  masm: maskmovq
  nasm: maskmovq
-----
INSTRUCTION: VEX.128.66.0F.WIG F7 /r | VMASKMOVDQU [m128], xmm1, xmm2 | AVX
  ops: w=seg-rdi r=reg r=rm | UInt128
  implied: w=[seg:a_rDI=default]
  flags: tsx-impl-abort non-temporal
  gas: maskmovq
  intel: maskmovq
  masm: maskmovq
  nasm: maskmovq
-----
INSTRUCTION: NP 0F F8 /r | PSUBB mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt8
  implied: zero-reg-regmem
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F F8 /r | PSUBB xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt8
  implied: zero-reg-regmem
-----
INSTRUCTION: VEX.128.66.0F.WIG F8 /r | VPSUBB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: VEX.256.66.0F.WIG F8 /r | VPSUBB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.128.66.0F.WIG F8 /r | VPSUBB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.256.66.0F.WIG F8 /r | VPSUBB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.512.66.0F.WIG F8 /r | VPSUBB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt8
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: NP 0F F9 /r | PSUBW mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt16
  implied: zero-reg-regmem
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F F9 /r | PSUBW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt16
  implied: zero-reg-regmem
-----
INSTRUCTION: VEX.128.66.0F.WIG F9 /r | VPSUBW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: VEX.256.66.0F.WIG F9 /r | VPSUBW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.128.66.0F.WIG F9 /r | VPSUBW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.256.66.0F.WIG F9 /r | VPSUBW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.512.66.0F.WIG F9 /r | VPSUBW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt16
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: NP 0F FA /r | PSUBD mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt32
  implied: zero-reg-regmem
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F FA /r | PSUBD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt32
  implied: zero-reg-regmem
-----
INSTRUCTION: VEX.128.66.0F.WIG FA /r | VPSUBD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: VEX.256.66.0F.WIG FA /r | VPSUBD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.128.66.0F.W0 FA /r | VPSUBD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.256.66.0F.W0 FA /r | VPSUBD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.512.66.0F.W0 FA /r | VPSUBD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: NP 0F FB /r | PSUBQ mm1, mm2/m64 | SSE2
  ops: rw=reg r=rm | Int64
  implied: zero-reg-regmem
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F FB /r | PSUBQ xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt64
  implied: zero-reg-regmem
-----
INSTRUCTION: VEX.128.66.0F.WIG FB /r | VPSUBQ xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: VEX.256.66.0F.WIG FB /r | VPSUBQ ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt64
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.128.66.0F.W1 FB /r | VPSUBQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.256.66.0F.W1 FB /r | VPSUBQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: EVEX.512.66.0F.W1 FB /r | VPSUBQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: NP 0F FC /r | PADDB mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt8
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F FC /r | PADDB xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.128.66.0F.WIG FC /r | VPADDB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.66.0F.WIG FC /r | VPADDB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.128.66.0F.WIG FC /r | VPADDB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F.WIG FC /r | VPADDB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F.WIG FC /r | VPADDB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt8
-----
INSTRUCTION: NP 0F FD /r | PADDW mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F FD /r | PADDW xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.66.0F.WIG FD /r | VPADDW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.66.0F.WIG FD /r | VPADDW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.128.66.0F.WIG FD /r | VPADDW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F.WIG FD /r | VPADDW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F.WIG FD /r | VPADDW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt16
-----
INSTRUCTION: NP 0F FE /r | PADDD mm, mm/m64 | MMX
  ops: rw=reg r=rm | Packed64_UInt32
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F FE /r | PADDD xmm1, xmm2/m128 | SSE2
  ops: rw=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.128.66.0F.WIG FE /r | VPADDD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F.WIG FE /r | VPADDD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
-----
INSTRUCTION: EVEX.128.66.0F.W0 FE /r | VPADDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F.W0 FE /r | VPADDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F.W0 FE /r | VPADDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: o16 0F FF /r | UD0 r16, r/m16 | INTEL286
  ops: n=reg n=rm | UInt16
  flags: cflow=ex no-amd-dec intel-vm-exit tsx-impl-abort
  gas: suffix=w
-----
INSTRUCTION: o32 0F FF /r | UD0 r32, r/m32 | INTEL386
  ops: n=reg n=rm | UInt32
  flags: cflow=ex no-amd-dec intel-vm-exit tsx-impl-abort
  gas: suffix=l
-----
INSTRUCTION: o64 0F FF /r | UD0 r64, r/m64 | X64
  ops: n=reg n=rm | UInt64
  flags: 64 cflow=ex no-amd-dec intel-vm-exit tsx-impl-abort
  gas: suffix=q
-----
INSTRUCTION: NP 0F 38 00 /r | PSHUFB mm1, mm2/m64 | SSSE3
  ops: rw=reg r=rm | Packed64_UInt8
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 38 00 /r | PSHUFB xmm1, xmm2/m128 | SSSE3
  ops: rw=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.128.66.0F38.WIG 00 /r | VPSHUFB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.66.0F38.WIG 00 /r | VPSHUFB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 00 /r | VPSHUFB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 00 /r | VPSHUFB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 00 /r | VPSHUFB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt8
-----
INSTRUCTION: NP 0F 38 01 /r | PHADDW mm1, mm2/m64 | SSSE3
  ops: rw=reg r=rm | Packed64_UInt16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 38 01 /r | PHADDW xmm1, xmm2/m128 | SSSE3
  ops: rw=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.66.0F38.WIG 01 /r | VPHADDW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.66.0F38.WIG 01 /r | VPHADDW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: NP 0F 38 02 /r | PHADDD mm1, mm2/m64 | SSSE3
  ops: rw=reg r=rm | Packed64_UInt32
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 38 02 /r | PHADDD xmm1, xmm2/m128 | SSSE3
  ops: rw=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.128.66.0F38.WIG 02 /r | VPHADDD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F38.WIG 02 /r | VPHADDD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
-----
INSTRUCTION: NP 0F 38 03 /r | PHADDSW mm1, mm2/m64 | SSSE3
  ops: rw=reg r=rm | Packed64_Int16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 38 03 /r | PHADDSW xmm1, xmm2/m128 | SSSE3
  ops: rw=reg r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.128.66.0F38.WIG 03 /r | VPHADDSW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F38.WIG 03 /r | VPHADDSW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: NP 0F 38 04 /r | PMADDUBSW mm1, mm2/m64 | SSSE3
  ops: rw=reg r=rm | Packed64_Int8
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 38 04 /r | PMADDUBSW xmm1, xmm2/m128 | SSSE3
  ops: rw=reg r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.128.66.0F38.WIG 04 /r | VPMADDUBSW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.256.66.0F38.WIG 04 /r | VPMADDUBSW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int8
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 04 /r | VPMADDUBSW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 04 /r | VPMADDUBSW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int8
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 04 /r | VPMADDUBSW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int8
-----
INSTRUCTION: NP 0F 38 05 /r | PHSUBW mm1, mm2/m64 | SSSE3
  ops: rw=reg r=rm | Packed64_UInt16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 38 05 /r | PHSUBW xmm1, xmm2/m128 | SSSE3
  ops: rw=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.66.0F38.WIG 05 /r | VPHSUBW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.66.0F38.WIG 05 /r | VPHSUBW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: NP 0F 38 06 /r | PHSUBD mm1, mm2/m64 | SSSE3
  ops: rw=reg r=rm | Packed64_UInt32
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 38 06 /r | PHSUBD xmm1, xmm2/m128 | SSSE3
  ops: rw=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.128.66.0F38.WIG 06 /r | VPHSUBD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F38.WIG 06 /r | VPHSUBD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
-----
INSTRUCTION: NP 0F 38 07 /r | PHSUBSW mm1, mm2/m64 | SSSE3
  ops: rw=reg r=rm | Packed64_Int16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 38 07 /r | PHSUBSW xmm1, xmm2/m128 | SSSE3
  ops: rw=reg r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.128.66.0F38.WIG 07 /r | VPHSUBSW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F38.WIG 07 /r | VPHSUBSW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: NP 0F 38 08 /r | PSIGNB mm1, mm2/m64 | SSSE3
  ops: rw=reg r=rm | Packed64_Int8
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 38 08 /r | PSIGNB xmm1, xmm2/m128 | SSSE3
  ops: rw=reg r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.128.66.0F38.WIG 08 /r | VPSIGNB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.256.66.0F38.WIG 08 /r | VPSIGNB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int8
-----
INSTRUCTION: NP 0F 38 09 /r | PSIGNW mm1, mm2/m64 | SSSE3
  ops: rw=reg r=rm | Packed64_Int16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 38 09 /r | PSIGNW xmm1, xmm2/m128 | SSSE3
  ops: rw=reg r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.128.66.0F38.WIG 09 /r | VPSIGNW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F38.WIG 09 /r | VPSIGNW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: NP 0F 38 0A /r | PSIGND mm1, mm2/m64 | SSSE3
  ops: rw=reg r=rm | Packed64_Int32
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 38 0A /r | PSIGND xmm1, xmm2/m128 | SSSE3
  ops: rw=reg r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.128.66.0F38.WIG 0A /r | VPSIGND xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.256.66.0F38.WIG 0A /r | VPSIGND ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int32
-----
INSTRUCTION: NP 0F 38 0B /r | PMULHRSW mm1, mm2/m64 | SSSE3
  ops: rw=reg r=rm | Packed64_Int16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 38 0B /r | PMULHRSW xmm1, xmm2/m128 | SSSE3
  ops: rw=reg r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.128.66.0F38.WIG 0B /r | VPMULHRSW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F38.WIG 0B /r | VPMULHRSW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 0B /r | VPMULHRSW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 0B /r | VPMULHRSW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 0B /r | VPMULHRSW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int16
-----
INSTRUCTION: VEX.128.66.0F38.W0 0C /r | VPERMILPS xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 0C /r | VPERMILPS ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W0 0C /r | VPERMILPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 0C /r | VPERMILPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 0C /r | VPERMILPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W0 0D /r | VPERMILPD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W0 0D /r | VPERMILPD ymm1, ymm2, ymm3/m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W1 0D /r | VPERMILPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 0D /r | VPERMILPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 0D /r | VPERMILPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.128.66.0F38.W0 0E /r | VTESTPS xmm1, xmm2/m128 | AVX
  ops: r=reg r=rm | Packed128_Float32
  rflags: w=zc 0=osap
-----
INSTRUCTION: VEX.256.66.0F38.W0 0E /r | VTESTPS ymm1, ymm2/m256 | AVX
  ops: r=reg r=rm | Packed256_Float32
  rflags: w=zc 0=osap
-----
INSTRUCTION: VEX.128.66.0F38.W0 0F /r | VTESTPD xmm1, xmm2/m128 | AVX
  ops: r=reg r=rm | Packed128_Float64
  rflags: w=zc 0=osap
-----
INSTRUCTION: VEX.256.66.0F38.W0 0F /r | VTESTPD ymm1, ymm2/m256 | AVX
  ops: r=reg r=rm | Packed256_Float64
  rflags: w=zc 0=osap
-----
INSTRUCTION: 66 0F 38 10 /r | PBLENDVB xmm1, xmm2/m128, <XMM0> | SSE4_1
  ops: rw=reg r=rm | Packed128_UInt8
  implied: r=xmm0
  gas: xmm0
  masm: xmm0
  nasm: flags=mem-size=unknown xmm0
-----
INSTRUCTION: EVEX.128.66.0F38.W1 10 /r | VPSRLVW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F38.W1 10 /r | VPSRLVW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F38.W1 10 /r | VPSRLVW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt16
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 10 /r | VPMOVUSWB xmm1/m64 {k1}{z}, xmm2 | AVX512VL AVX512BW | N8
  ops: w=rm r=reg | Packed64_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 10 /r | VPMOVUSWB xmm1/m128 {k1}{z}, ymm2 | AVX512VL AVX512BW | N16
  ops: w=rm r=reg | Packed128_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 10 /r | VPMOVUSWB ymm1/m256 {k1}{z}, zmm2 | AVX512BW | N32
  ops: w=rm r=reg | Packed256_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W1 11 /r | VPSRAVW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F38.W1 11 /r | VPSRAVW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F38.W1 11 /r | VPSRAVW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt16
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 11 /r | VPMOVUSDB xmm1/m32 {k1}{z}, xmm2 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Packed32_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 11 /r | VPMOVUSDB xmm1/m64 {k1}{z}, ymm2 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Packed64_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 11 /r | VPMOVUSDB xmm1/m128 {k1}{z}, zmm2 | AVX512F | N16
  ops: w=rm r=reg | Packed128_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W1 12 /r | VPSLLVW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F38.W1 12 /r | VPSLLVW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F38.W1 12 /r | VPSLLVW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt16
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 12 /r | VPMOVUSQB xmm1/m16 {k1}{z}, xmm2 | AVX512VL AVX512F | N2
  ops: w=rm r=reg | Packed16_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 12 /r | VPMOVUSQB xmm1/m32 {k1}{z}, ymm2 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Packed32_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 12 /r | VPMOVUSQB xmm1/m64 {k1}{z}, zmm2 | AVX512F | N8
  ops: w=rm r=reg | Packed64_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F38.W0 13 /r | VCVTPH2PS xmm1, xmm2/m64 | F16C
  ops: w=reg r=rm | Packed64_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.W0 13 /r | VCVTPH2PS ymm1, xmm2/m128 | F16C
  ops: w=reg r=rm | Packed128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W0 13 /r | VCVTPH2PS xmm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Packed64_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.W0 13 /r | VCVTPH2PS ymm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W0 13 /r | VCVTPH2PS zmm1 {k1}{z}, ymm2/m256{sae} | AVX512F | N32
  ops: wvmm=reg r=rm | Packed256_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 13 /r | VPMOVUSDW xmm1/m64 {k1}{z}, xmm2 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Packed64_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 13 /r | VPMOVUSDW xmm1/m128 {k1}{z}, ymm2 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 13 /r | VPMOVUSDW ymm1/m256 {k1}{z}, zmm2 | AVX512F | N32
  ops: w=rm r=reg | Packed256_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 38 14 /r | BLENDVPS xmm1, xmm2/m128, <XMM0> | SSE4_1
  ops: rw=reg r=rm | Packed128_Float32
  implied: r=xmm0
  gas: xmm0
  masm: xmm0
  nasm: flags=mem-size=unknown xmm0
-----
INSTRUCTION: EVEX.128.66.0F38.W0 14 /r | VPRORVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 14 /r | VPRORVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 14 /r | VPRORVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 14 /r | VPRORVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 14 /r | VPRORVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 14 /r | VPRORVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 14 /r | VPMOVUSQW xmm1/m32 {k1}{z}, xmm2 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Packed32_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 14 /r | VPMOVUSQW xmm1/m64 {k1}{z}, ymm2 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Packed64_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 14 /r | VPMOVUSQW xmm1/m128 {k1}{z}, zmm2 | AVX512F | N16
  ops: w=rm r=reg | Packed128_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 38 15 /r | BLENDVPD xmm1, xmm2/m128, <XMM0> | SSE4_1
  ops: rw=reg r=rm | Packed128_Float64
  implied: r=xmm0
  gas: xmm0
  masm: xmm0
  nasm: flags=mem-size=unknown xmm0
-----
INSTRUCTION: EVEX.128.66.0F38.W0 15 /r | VPROLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 15 /r | VPROLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 15 /r | VPROLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 15 /r | VPROLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 15 /r | VPROLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 15 /r | VPROLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 15 /r | VPMOVUSQD xmm1/m64 {k1}{z}, xmm2 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Packed64_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 15 /r | VPMOVUSQD xmm1/m128 {k1}{z}, ymm2 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 15 /r | VPMOVUSQD ymm1/m256 {k1}{z}, zmm2 | AVX512F | N32
  ops: w=rm r=reg | Packed256_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.W0 16 /r | VPERMPS ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 16 /r | VPERMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 16 /r | VPERMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W1 16 /r | VPERMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 16 /r | VPERMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: 66 0F 38 17 /r | PTEST xmm1, xmm2/m128 | SSE4_1
  ops: r=reg r=rm | UInt128
  rflags: w=zc 0=osap
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F38.WIG 17 /r | VPTEST xmm1, xmm2/m128 | AVX
  ops: r=reg r=rm | UInt128
  rflags: w=zc 0=osap
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.WIG 17 /r | VPTEST ymm1, ymm2/m256 | AVX
  ops: r=reg r=rm | UInt256
  rflags: w=zc 0=osap
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F38.W0 18 /r | VBROADCASTSS xmm1, m32 | AVX
  ops: w=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.W0 18 /r | VBROADCASTSS ymm1, m32 | AVX
  ops: w=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W0 18 /r | VBROADCASTSS xmm1 {k1}{z}, xmm2/m32 | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.W0 18 /r | VBROADCASTSS ymm1 {k1}{z}, xmm2/m32 | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W0 18 /r | VBROADCASTSS zmm1 {k1}{z}, xmm2/m32 | AVX512F | N4
  ops: wvmm=reg r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.W0 19 /r | VBROADCASTSD ymm1, m64 | AVX
  ops: w=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.W0 19 /r | VBROADCASTF32X2 ymm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512DQ | N8
  ops: w=reg r=rm | Packed64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W0 19 /r | VBROADCASTF32X2 zmm1 {k1}{z}, xmm2/m64 | AVX512DQ | N8
  ops: wvmm=reg r=rm | Packed64_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.W1 19 /r | VBROADCASTSD ymm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W1 19 /r | VBROADCASTSD zmm1 {k1}{z}, xmm2/m64 | AVX512F | N8
  ops: wvmm=reg r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.W0 1A /r | VBROADCASTF128 ymm1, m128 | AVX
  ops: w=reg r=rm | Float128
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.W0 1A /r | VBROADCASTF32X4 ymm1 {k1}{z}, m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W0 1A /r | VBROADCASTF32X4 zmm1 {k1}{z}, m128 | AVX512F | N16
  ops: wvmm=reg r=rm | Packed128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.W1 1A /r | VBROADCASTF64X2 ymm1 {k1}{z}, m128 | AVX512VL AVX512DQ | N16
  ops: w=reg r=rm | Packed128_Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W1 1A /r | VBROADCASTF64X2 zmm1 {k1}{z}, m128 | AVX512DQ | N16
  ops: wvmm=reg r=rm | Packed128_Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W0 1B /r | VBROADCASTF32X8 zmm1 {k1}{z}, m256 | AVX512DQ | N32
  ops: wvmm=reg r=rm | Packed256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W1 1B /r | VBROADCASTF64X4 zmm1 {k1}{z}, m256 | AVX512F | N32
  ops: wvmm=reg r=rm | Packed256_Float64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 38 1C /r | PABSB mm1, mm2/m64 | SSSE3
  ops: w=reg r=rm | Packed64_Int8
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 38 1C /r | PABSB xmm1, xmm2/m128 | SSSE3
  ops: w=reg r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.128.66.0F38.WIG 1C /r | VPABSB xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.256.66.0F38.WIG 1C /r | VPABSB ymm1, ymm2/m256 | AVX2
  ops: w=reg r=rm | Packed256_Int8
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 1C /r | VPABSB xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=rm | Packed128_Int8
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 1C /r | VPABSB ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=rm | Packed256_Int8
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 1C /r | VPABSB zmm1 {k1}{z}, zmm2/m512 | AVX512BW | N64
  ops: wvmm=reg r=rm | Packed512_Int8
-----
INSTRUCTION: NP 0F 38 1D /r | PABSW mm1, mm2/m64 | SSSE3
  ops: w=reg r=rm | Packed64_Int16
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 38 1D /r | PABSW xmm1, xmm2/m128 | SSSE3
  ops: w=reg r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.128.66.0F38.WIG 1D /r | VPABSW xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F38.WIG 1D /r | VPABSW ymm1, ymm2/m256 | AVX2
  ops: w=reg r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 1D /r | VPABSW xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=rm | Packed128_Int16
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 1D /r | VPABSW ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=rm | Packed256_Int16
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 1D /r | VPABSW zmm1 {k1}{z}, zmm2/m512 | AVX512BW | N64
  ops: wvmm=reg r=rm | Packed512_Int16
-----
INSTRUCTION: NP 0F 38 1E /r | PABSD mm1, mm2/m64 | SSSE3
  ops: w=reg r=rm | Packed64_Int32
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 38 1E /r | PABSD xmm1, xmm2/m128 | SSSE3
  ops: w=reg r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.128.66.0F38.WIG 1E /r | VPABSD xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.256.66.0F38.WIG 1E /r | VPABSD ymm1, ymm2/m256 | AVX2
  ops: w=reg r=rm | Packed256_Int32
-----
INSTRUCTION: EVEX.128.66.0F38.W0 1E /r | VPABSD xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm | Packed128_Int32 Broadcast128_Int32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 1E /r | VPABSD ymm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=rm | Packed256_Int32 Broadcast256_Int32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 1E /r | VPABSD zmm1 {k1}{z}, zmm2/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=rm | Packed512_Int32 Broadcast512_Int32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 1F /r | VPABSQ xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=rm | Packed128_Int64 Broadcast128_Int64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 1F /r | VPABSQ ymm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=rm | Packed256_Int64 Broadcast256_Int64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 1F /r | VPABSQ zmm1 {k1}{z}, zmm2/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=rm | Packed512_Int64 Broadcast512_Int64
-----
INSTRUCTION: 66 0F 38 20 /r | PMOVSXBW xmm1, xmm2/m64 | SSE4_1
  ops: w=reg r=rm | Packed64_Int8
-----
INSTRUCTION: VEX.128.66.0F38.WIG 20 /r | VPMOVSXBW xmm1, xmm2/m64 | AVX
  ops: w=reg r=rm | Packed64_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.WIG 20 /r | VPMOVSXBW ymm1, xmm2/m128 | AVX2
  ops: w=reg r=rm | Packed128_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 20 /r | VPMOVSXBW xmm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512BW | N8
  ops: w=reg r=rm | Packed64_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 20 /r | VPMOVSXBW ymm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=rm | Packed128_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 20 /r | VPMOVSXBW zmm1 {k1}{z}, ymm2/m256 | AVX512BW | N32
  ops: wvmm=reg r=rm | Packed256_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 20 /r | VPMOVSWB xmm1/m64 {k1}{z}, xmm2 | AVX512VL AVX512BW | N8
  ops: w=rm r=reg | Packed64_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 20 /r | VPMOVSWB xmm1/m128 {k1}{z}, ymm2 | AVX512VL AVX512BW | N16
  ops: w=rm r=reg | Packed128_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 20 /r | VPMOVSWB ymm1/m256 {k1}{z}, zmm2 | AVX512BW | N32
  ops: w=rm r=reg | Packed256_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 38 21 /r | PMOVSXBD xmm1, xmm2/m32 | SSE4_1
  ops: w=reg r=rm | Packed32_Int8
-----
INSTRUCTION: VEX.128.66.0F38.WIG 21 /r | VPMOVSXBD xmm1, xmm2/m32 | AVX
  ops: w=reg r=rm | Packed32_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.WIG 21 /r | VPMOVSXBD ymm1, xmm2/m64 | AVX2
  ops: w=reg r=rm | Packed64_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 21 /r | VPMOVSXBD xmm1 {k1}{z}, xmm2/m32 | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Packed32_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 21 /r | VPMOVSXBD ymm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Packed64_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 21 /r | VPMOVSXBD zmm1 {k1}{z}, xmm2/m128 | AVX512F | N16
  ops: wvmm=reg r=rm | Packed128_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 21 /r | VPMOVSDB xmm1/m32 {k1}{z}, xmm2 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Packed32_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 21 /r | VPMOVSDB xmm1/m64 {k1}{z}, ymm2 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Packed64_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 21 /r | VPMOVSDB xmm1/m128 {k1}{z}, zmm2 | AVX512F | N16
  ops: w=rm r=reg | Packed128_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 38 22 /r | PMOVSXBQ xmm1, xmm2/m16 | SSE4_1
  ops: w=reg r=rm | Packed16_Int8
-----
INSTRUCTION: VEX.128.66.0F38.WIG 22 /r | VPMOVSXBQ xmm1, xmm2/m16 | AVX
  ops: w=reg r=rm | Packed16_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.WIG 22 /r | VPMOVSXBQ ymm1, xmm2/m32 | AVX2
  ops: w=reg r=rm | Packed32_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 22 /r | VPMOVSXBQ xmm1 {k1}{z}, xmm2/m16 | AVX512VL AVX512F | N2
  ops: w=reg r=rm | Packed16_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 22 /r | VPMOVSXBQ ymm1 {k1}{z}, xmm2/m32 | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Packed32_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 22 /r | VPMOVSXBQ zmm1 {k1}{z}, xmm2/m64 | AVX512F | N8
  ops: wvmm=reg r=rm | Packed64_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 22 /r | VPMOVSQB xmm1/m16 {k1}{z}, xmm2 | AVX512VL AVX512F | N2
  ops: w=rm r=reg | Packed16_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 22 /r | VPMOVSQB xmm1/m32 {k1}{z}, ymm2 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Packed32_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 22 /r | VPMOVSQB xmm1/m64 {k1}{z}, zmm2 | AVX512F | N8
  ops: w=rm r=reg | Packed64_Int8
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 38 23 /r | PMOVSXWD xmm1, xmm2/m64 | SSE4_1
  ops: w=reg r=rm | Packed64_Int16
-----
INSTRUCTION: VEX.128.66.0F38.WIG 23 /r | VPMOVSXWD xmm1, xmm2/m64 | AVX
  ops: w=reg r=rm | Packed64_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.WIG 23 /r | VPMOVSXWD ymm1, xmm2/m128 | AVX2
  ops: w=reg r=rm | Packed128_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 23 /r | VPMOVSXWD xmm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Packed64_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 23 /r | VPMOVSXWD ymm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 23 /r | VPMOVSXWD zmm1 {k1}{z}, ymm2/m256 | AVX512F | N32
  ops: wvmm=reg r=rm | Packed256_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 23 /r | VPMOVSDW xmm1/m64 {k1}{z}, xmm2 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Packed64_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 23 /r | VPMOVSDW xmm1/m128 {k1}{z}, ymm2 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 23 /r | VPMOVSDW ymm1/m256 {k1}{z}, zmm2 | AVX512F | N32
  ops: w=rm r=reg | Packed256_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 38 24 /r | PMOVSXWQ xmm1, xmm2/m32 | SSE4_1
  ops: w=reg r=rm | Packed32_Int16
-----
INSTRUCTION: VEX.128.66.0F38.WIG 24 /r | VPMOVSXWQ xmm1, xmm2/m32 | AVX
  ops: w=reg r=rm | Packed32_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.WIG 24 /r | VPMOVSXWQ ymm1, xmm2/m64 | AVX2
  ops: w=reg r=rm | Packed64_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 24 /r | VPMOVSXWQ xmm1 {k1}{z}, xmm2/m32 | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Packed32_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 24 /r | VPMOVSXWQ ymm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Packed64_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 24 /r | VPMOVSXWQ zmm1 {k1}{z}, xmm2/m128 | AVX512F | N16
  ops: wvmm=reg r=rm | Packed128_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 24 /r | VPMOVSQW xmm1/m32 {k1}{z}, xmm2 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Packed32_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 24 /r | VPMOVSQW xmm1/m64 {k1}{z}, ymm2 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Packed64_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 24 /r | VPMOVSQW xmm1/m128 {k1}{z}, zmm2 | AVX512F | N16
  ops: w=rm r=reg | Packed128_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 38 25 /r | PMOVSXDQ xmm1, xmm2/m64 | SSE4_1
  ops: w=reg r=rm | Packed64_Int32
-----
INSTRUCTION: VEX.128.66.0F38.WIG 25 /r | VPMOVSXDQ xmm1, xmm2/m64 | AVX
  ops: w=reg r=rm | Packed64_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.WIG 25 /r | VPMOVSXDQ ymm1, xmm2/m128 | AVX2
  ops: w=reg r=rm | Packed128_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W0 25 /r | VPMOVSXDQ xmm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Packed64_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.W0 25 /r | VPMOVSXDQ ymm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W0 25 /r | VPMOVSXDQ zmm1 {k1}{z}, ymm2/m256 | AVX512F | N32
  ops: wvmm=reg r=rm | Packed256_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 25 /r | VPMOVSQD xmm1/m64 {k1}{z}, xmm2 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Packed64_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 25 /r | VPMOVSQD xmm1/m128 {k1}{z}, ymm2 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 25 /r | VPMOVSQD ymm1/m256 {k1}{z}, zmm2 | AVX512F | N32
  ops: w=rm r=reg | Packed256_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W0 26 /r | VPTESTMB k2 {k1}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
  flags: implied-z
-----
INSTRUCTION: EVEX.256.66.0F38.W0 26 /r | VPTESTMB k2 {k1}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
  flags: implied-z
-----
INSTRUCTION: EVEX.512.66.0F38.W0 26 /r | VPTESTMB k2 {k1}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: w=reg r=vvvv r=rm | Packed512_UInt8
  flags: implied-z
-----
INSTRUCTION: EVEX.128.66.0F38.W1 26 /r | VPTESTMW k2 {k1}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
  flags: implied-z
-----
INSTRUCTION: EVEX.256.66.0F38.W1 26 /r | VPTESTMW k2 {k1}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
  flags: implied-z
-----
INSTRUCTION: EVEX.512.66.0F38.W1 26 /r | VPTESTMW k2 {k1}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: w=reg r=vvvv r=rm | Packed512_UInt16
  flags: implied-z
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 26 /r | VPTESTNMB k2 {k1}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
  flags: implied-z
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 26 /r | VPTESTNMB k2 {k1}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
  flags: implied-z
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 26 /r | VPTESTNMB k2 {k1}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: w=reg r=vvvv r=rm | Packed512_UInt8
  flags: implied-z
-----
INSTRUCTION: EVEX.128.F3.0F38.W1 26 /r | VPTESTNMW k2 {k1}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
  flags: implied-z
-----
INSTRUCTION: EVEX.256.F3.0F38.W1 26 /r | VPTESTNMW k2 {k1}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
  flags: implied-z
-----
INSTRUCTION: EVEX.512.F3.0F38.W1 26 /r | VPTESTNMW k2 {k1}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: w=reg r=vvvv r=rm | Packed512_UInt16
  flags: implied-z
-----
INSTRUCTION: EVEX.128.66.0F38.W0 27 /r | VPTESTMD k2 {k1}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
  flags: implied-z
-----
INSTRUCTION: EVEX.256.66.0F38.W0 27 /r | VPTESTMD k2 {k1}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
  flags: implied-z
-----
INSTRUCTION: EVEX.512.66.0F38.W0 27 /r | VPTESTMD k2 {k1}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: w=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
  flags: implied-z
-----
INSTRUCTION: EVEX.128.66.0F38.W1 27 /r | VPTESTMQ k2 {k1}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
  flags: implied-z
-----
INSTRUCTION: EVEX.256.66.0F38.W1 27 /r | VPTESTMQ k2 {k1}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
  flags: implied-z
-----
INSTRUCTION: EVEX.512.66.0F38.W1 27 /r | VPTESTMQ k2 {k1}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: w=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
  flags: implied-z
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 27 /r | VPTESTNMD k2 {k1}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
  flags: implied-z
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 27 /r | VPTESTNMD k2 {k1}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
  flags: implied-z
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 27 /r | VPTESTNMD k2 {k1}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: w=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
  flags: implied-z
-----
INSTRUCTION: EVEX.128.F3.0F38.W1 27 /r | VPTESTNMQ k2 {k1}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
  flags: implied-z
-----
INSTRUCTION: EVEX.256.F3.0F38.W1 27 /r | VPTESTNMQ k2 {k1}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
  flags: implied-z
-----
INSTRUCTION: EVEX.512.F3.0F38.W1 27 /r | VPTESTNMQ k2 {k1}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: w=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
  flags: implied-z
-----
INSTRUCTION: 66 0F 38 28 /r | PMULDQ xmm1, xmm2/m128 | SSE4_1
  ops: rw=reg r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.128.66.0F38.WIG 28 /r | VPMULDQ xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.256.66.0F38.WIG 28 /r | VPMULDQ ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 28 /r | VPMULDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Int32 Broadcast128_2xInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W1 28 /r | VPMULDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Int32 Broadcast256_2xInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W1 28 /r | VPMULDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int32 Broadcast512_2xInt32
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 28 /r | VPMOVM2B xmm1, k1 | AVX512VL AVX512BW
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 28 /r | VPMOVM2B ymm1, k1 | AVX512VL AVX512BW
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 28 /r | VPMOVM2B zmm1, k1 | AVX512BW
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.128.F3.0F38.W1 28 /r | VPMOVM2W xmm1, k1 | AVX512VL AVX512BW
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.256.F3.0F38.W1 28 /r | VPMOVM2W ymm1, k1 | AVX512VL AVX512BW
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.512.F3.0F38.W1 28 /r | VPMOVM2W zmm1, k1 | AVX512BW
  ops: w=reg r=rm
-----
INSTRUCTION: 66 0F 38 29 /r | PCMPEQQ xmm1, xmm2/m128 | SSE4_1
  ops: rw=reg r=rm | Packed128_UInt64
-----
INSTRUCTION: VEX.128.66.0F38.WIG 29 /r | VPCMPEQQ xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: VEX.256.66.0F38.WIG 29 /r | VPCMPEQQ ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt64
-----
INSTRUCTION: EVEX.128.66.0F38.W1 29 /r | VPCMPEQQ k1 {k2}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
  flags: implied-z
-----
INSTRUCTION: EVEX.256.66.0F38.W1 29 /r | VPCMPEQQ k1 {k2}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
  flags: implied-z
-----
INSTRUCTION: EVEX.512.66.0F38.W1 29 /r | VPCMPEQQ k1 {k2}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: w=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
  flags: implied-z
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 29 /r | VPMOVB2M k1, xmm1 | AVX512VL AVX512BW
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 29 /r | VPMOVB2M k1, ymm1 | AVX512VL AVX512BW
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 29 /r | VPMOVB2M k1, zmm1 | AVX512BW
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.128.F3.0F38.W1 29 /r | VPMOVW2M k1, xmm1 | AVX512VL AVX512BW
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.256.F3.0F38.W1 29 /r | VPMOVW2M k1, ymm1 | AVX512VL AVX512BW
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.512.F3.0F38.W1 29 /r | VPMOVW2M k1, zmm1 | AVX512BW
  ops: w=reg r=rm
-----
INSTRUCTION: 66 0F 38 2A /r | MOVNTDQA xmm1, m128 | SSE4_1
  ops: w=reg r=rm | UInt128
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F38.WIG 2A /r | VMOVNTDQA xmm1, m128 | AVX
  ops: w=reg r=rm | UInt128
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.WIG 2A /r | VMOVNTDQA ymm1, m256 | AVX2
  ops: w=reg r=rm | UInt256
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W0 2A /r | VMOVNTDQA xmm1, m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | UInt128
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.W0 2A /r | VMOVNTDQA ymm1, m256 | AVX512VL AVX512F | N32
  ops: w=reg r=rm | UInt256
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W0 2A /r | VMOVNTDQA zmm1, m512 | AVX512F | N64
  ops: w=reg r=rm | UInt512
  flags: tsx-impl-abort non-temporal
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F38.W1 2A /r | VPBROADCASTMB2Q xmm1, k1 | AVX512VL AVX512CD
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.256.F3.0F38.W1 2A /r | VPBROADCASTMB2Q ymm1, k1 | AVX512VL AVX512CD
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.512.F3.0F38.W1 2A /r | VPBROADCASTMB2Q zmm1, k1 | AVX512CD
  ops: w=reg r=rm
-----
INSTRUCTION: 66 0F 38 2B /r | PACKUSDW xmm1, xmm2/m128 | SSE4_1
  ops: rw=reg r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.128.66.0F38.WIG 2B /r | VPACKUSDW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.256.66.0F38.WIG 2B /r | VPACKUSDW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int32
-----
INSTRUCTION: EVEX.128.66.0F38.W0 2B /r | VPACKUSDW xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512BW | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Int32 Broadcast128_Int32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 2B /r | VPACKUSDW ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512BW | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Int32 Broadcast256_Int32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 2B /r | VPACKUSDW zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512BW | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int32 Broadcast512_Int32
-----
INSTRUCTION: VEX.128.66.0F38.W0 2C /r | VMASKMOVPS xmm1, xmm2, m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 2C /r | VMASKMOVPS ymm1, ymm2, m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W0 2C /r | VSCALEFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 2C /r | VSCALEFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 2C /r | VSCALEFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 2C /r | VSCALEFPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 2C /r | VSCALEFPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 2C /r | VSCALEFPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.128.66.0F38.W0 2D /r | VMASKMOVPD xmm1, xmm2, m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W0 2D /r | VMASKMOVPD ymm1, ymm2, m256 | AVX
  ops: w=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 2D /r | VSCALEFSS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 2D /r | VSCALEFSD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F38.W0 2E /r | VMASKMOVPS m128, xmm1, xmm2 | AVX
  ops: w=rm r=vvvv r=reg | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 2E /r | VMASKMOVPS m256, ymm1, ymm2 | AVX
  ops: w=rm r=vvvv r=reg | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W0 2F /r | VMASKMOVPD m128, xmm1, xmm2 | AVX
  ops: w=rm r=vvvv r=reg | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W0 2F /r | VMASKMOVPD m256, ymm1, ymm2 | AVX
  ops: w=rm r=vvvv r=reg | Packed256_Float64
-----
INSTRUCTION: 66 0F 38 30 /r | PMOVZXBW xmm1, xmm2/m64 | SSE4_1
  ops: w=reg r=rm | Packed64_UInt8
-----
INSTRUCTION: VEX.128.66.0F38.WIG 30 /r | VPMOVZXBW xmm1, xmm2/m64 | AVX
  ops: w=reg r=rm | Packed64_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.WIG 30 /r | VPMOVZXBW ymm1, xmm2/m128 | AVX2
  ops: w=reg r=rm | Packed128_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 30 /r | VPMOVZXBW xmm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512BW | N8
  ops: w=reg r=rm | Packed64_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 30 /r | VPMOVZXBW ymm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=rm | Packed128_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 30 /r | VPMOVZXBW zmm1 {k1}{z}, ymm2/m256 | AVX512BW | N32
  ops: wvmm=reg r=rm | Packed256_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 30 /r | VPMOVWB xmm1/m64 {k1}{z}, xmm2 | AVX512VL AVX512BW | N8
  ops: w=rm r=reg | Packed64_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 30 /r | VPMOVWB xmm1/m128 {k1}{z}, ymm2 | AVX512VL AVX512BW | N16
  ops: w=rm r=reg | Packed128_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 30 /r | VPMOVWB ymm1/m256 {k1}{z}, zmm2 | AVX512BW | N32
  ops: w=rm r=reg | Packed256_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 38 31 /r | PMOVZXBD xmm1, xmm2/m32 | SSE4_1
  ops: w=reg r=rm | Packed32_UInt8
-----
INSTRUCTION: VEX.128.66.0F38.WIG 31 /r | VPMOVZXBD xmm1, xmm2/m32 | AVX
  ops: w=reg r=rm | Packed32_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.WIG 31 /r | VPMOVZXBD ymm1, xmm2/m64 | AVX2
  ops: w=reg r=rm | Packed64_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 31 /r | VPMOVZXBD xmm1 {k1}{z}, xmm2/m32 | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Packed32_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 31 /r | VPMOVZXBD ymm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Packed64_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 31 /r | VPMOVZXBD zmm1 {k1}{z}, xmm2/m128 | AVX512F | N16
  ops: wvmm=reg r=rm | Packed128_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 31 /r | VPMOVDB xmm1/m32 {k1}{z}, xmm2 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Packed32_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 31 /r | VPMOVDB xmm1/m64 {k1}{z}, ymm2 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Packed64_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 31 /r | VPMOVDB xmm1/m128 {k1}{z}, zmm2 | AVX512F | N16
  ops: w=rm r=reg | Packed128_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 38 32 /r | PMOVZXBQ xmm1, xmm2/m16 | SSE4_1
  ops: w=reg r=rm | Packed16_UInt8
-----
INSTRUCTION: VEX.128.66.0F38.WIG 32 /r | VPMOVZXBQ xmm1, xmm2/m16 | AVX
  ops: w=reg r=rm | Packed16_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.WIG 32 /r | VPMOVZXBQ ymm1, xmm2/m32 | AVX2
  ops: w=reg r=rm | Packed32_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 32 /r | VPMOVZXBQ xmm1 {k1}{z}, xmm2/m16 | AVX512VL AVX512F | N2
  ops: w=reg r=rm | Packed16_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 32 /r | VPMOVZXBQ ymm1 {k1}{z}, xmm2/m32 | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Packed32_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 32 /r | VPMOVZXBQ zmm1 {k1}{z}, xmm2/m64 | AVX512F | N8
  ops: wvmm=reg r=rm | Packed64_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 32 /r | VPMOVQB xmm1/m16 {k1}{z}, xmm2 | AVX512VL AVX512F | N2
  ops: w=rm r=reg | Packed16_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 32 /r | VPMOVQB xmm1/m32 {k1}{z}, ymm2 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Packed32_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 32 /r | VPMOVQB xmm1/m64 {k1}{z}, zmm2 | AVX512F | N8
  ops: w=rm r=reg | Packed64_UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 38 33 /r | PMOVZXWD xmm1, xmm2/m64 | SSE4_1
  ops: w=reg r=rm | Packed64_UInt16
-----
INSTRUCTION: VEX.128.66.0F38.WIG 33 /r | VPMOVZXWD xmm1, xmm2/m64 | AVX
  ops: w=reg r=rm | Packed64_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.WIG 33 /r | VPMOVZXWD ymm1, xmm2/m128 | AVX2
  ops: w=reg r=rm | Packed128_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 33 /r | VPMOVZXWD xmm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Packed64_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 33 /r | VPMOVZXWD ymm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 33 /r | VPMOVZXWD zmm1 {k1}{z}, ymm2/m256 | AVX512F | N32
  ops: wvmm=reg r=rm | Packed256_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 33 /r | VPMOVDW xmm1/m64 {k1}{z}, xmm2 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Packed64_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 33 /r | VPMOVDW xmm1/m128 {k1}{z}, ymm2 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 33 /r | VPMOVDW ymm1/m256 {k1}{z}, zmm2 | AVX512F | N32
  ops: w=rm r=reg | Packed256_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 38 34 /r | PMOVZXWQ xmm1, xmm2/m32 | SSE4_1
  ops: w=reg r=rm | Packed32_UInt16
-----
INSTRUCTION: VEX.128.66.0F38.WIG 34 /r | VPMOVZXWQ xmm1, xmm2/m32 | AVX
  ops: w=reg r=rm | Packed32_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.WIG 34 /r | VPMOVZXWQ ymm1, xmm2/m64 | AVX2
  ops: w=reg r=rm | Packed64_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 34 /r | VPMOVZXWQ xmm1 {k1}{z}, xmm2/m32 | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Packed32_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 34 /r | VPMOVZXWQ ymm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Packed64_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 34 /r | VPMOVZXWQ zmm1 {k1}{z}, xmm2/m128 | AVX512F | N16
  ops: wvmm=reg r=rm | Packed128_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 34 /r | VPMOVQW xmm1/m32 {k1}{z}, xmm2 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Packed32_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 34 /r | VPMOVQW xmm1/m64 {k1}{z}, ymm2 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Packed64_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 34 /r | VPMOVQW xmm1/m128 {k1}{z}, zmm2 | AVX512F | N16
  ops: w=rm r=reg | Packed128_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 38 35 /r | PMOVZXDQ xmm1, xmm2/m64 | SSE4_1
  ops: w=reg r=rm | Packed64_UInt32
-----
INSTRUCTION: VEX.128.66.0F38.WIG 35 /r | VPMOVZXDQ xmm1, xmm2/m64 | AVX
  ops: w=reg r=rm | Packed64_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.WIG 35 /r | VPMOVZXDQ ymm1, xmm2/m128 | AVX2
  ops: w=reg r=rm | Packed128_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W0 35 /r | VPMOVZXDQ xmm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Packed64_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.W0 35 /r | VPMOVZXDQ ymm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W0 35 /r | VPMOVZXDQ zmm1 {k1}{z}, ymm2/m256 | AVX512F | N32
  ops: wvmm=reg r=rm | Packed256_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 35 /r | VPMOVQD xmm1/m64 {k1}{z}, xmm2 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Packed64_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 35 /r | VPMOVQD xmm1/m128 {k1}{z}, ymm2 | AVX512VL AVX512F | N16
  ops: w=rm r=reg | Packed128_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 35 /r | VPMOVQD ymm1/m256 {k1}{z}, zmm2 | AVX512F | N32
  ops: w=rm r=reg | Packed256_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.W0 36 /r | VPERMD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 36 /r | VPERMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 36 /r | VPERMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W1 36 /r | VPERMQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 36 /r | VPERMQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: 66 0F 38 37 /r | PCMPGTQ xmm1, xmm2/m128 | SSE4_2
  ops: rw=reg r=rm | Packed128_Int64
-----
INSTRUCTION: VEX.128.66.0F38.WIG 37 /r | VPCMPGTQ xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int64
-----
INSTRUCTION: VEX.256.66.0F38.WIG 37 /r | VPCMPGTQ ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int64
-----
INSTRUCTION: EVEX.128.66.0F38.W1 37 /r | VPCMPGTQ k1 {k2}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Int64 Broadcast128_Int64
  flags: implied-z
-----
INSTRUCTION: EVEX.256.66.0F38.W1 37 /r | VPCMPGTQ k1 {k2}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Int64 Broadcast256_Int64
  flags: implied-z
-----
INSTRUCTION: EVEX.512.66.0F38.W1 37 /r | VPCMPGTQ k1 {k2}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: w=reg r=vvvv r=rm | Packed512_Int64 Broadcast512_Int64
  flags: implied-z
-----
INSTRUCTION: 66 0F 38 38 /r | PMINSB xmm1, xmm2/m128 | SSE4_1
  ops: rw=reg r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.128.66.0F38.WIG 38 /r | VPMINSB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.256.66.0F38.WIG 38 /r | VPMINSB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int8
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 38 /r | VPMINSB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 38 /r | VPMINSB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int8
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 38 /r | VPMINSB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int8
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 38 /r | VPMOVM2D xmm1, k1 | AVX512VL AVX512DQ
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 38 /r | VPMOVM2D ymm1, k1 | AVX512VL AVX512DQ
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 38 /r | VPMOVM2D zmm1, k1 | AVX512DQ
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.128.F3.0F38.W1 38 /r | VPMOVM2Q xmm1, k1 | AVX512VL AVX512DQ
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.256.F3.0F38.W1 38 /r | VPMOVM2Q ymm1, k1 | AVX512VL AVX512DQ
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.512.F3.0F38.W1 38 /r | VPMOVM2Q zmm1, k1 | AVX512DQ
  ops: w=reg r=rm
-----
INSTRUCTION: 66 0F 38 39 /r | PMINSD xmm1, xmm2/m128 | SSE4_1
  ops: rw=reg r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.128.66.0F38.WIG 39 /r | VPMINSD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.256.66.0F38.WIG 39 /r | VPMINSD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int32
-----
INSTRUCTION: EVEX.128.66.0F38.W0 39 /r | VPMINSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Int32 Broadcast128_Int32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 39 /r | VPMINSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Int32 Broadcast256_Int32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 39 /r | VPMINSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int32 Broadcast512_Int32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 39 /r | VPMINSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Int64 Broadcast128_Int64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 39 /r | VPMINSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Int64 Broadcast256_Int64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 39 /r | VPMINSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int64 Broadcast512_Int64
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 39 /r | VPMOVD2M k1, xmm1 | AVX512VL AVX512DQ
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 39 /r | VPMOVD2M k1, ymm1 | AVX512VL AVX512DQ
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 39 /r | VPMOVD2M k1, zmm1 | AVX512DQ
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.128.F3.0F38.W1 39 /r | VPMOVQ2M k1, xmm1 | AVX512VL AVX512DQ
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.256.F3.0F38.W1 39 /r | VPMOVQ2M k1, ymm1 | AVX512VL AVX512DQ
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.512.F3.0F38.W1 39 /r | VPMOVQ2M k1, zmm1 | AVX512DQ
  ops: w=reg r=rm
-----
INSTRUCTION: 66 0F 38 3A /r | PMINUW xmm1, xmm2/m128 | SSE4_1
  ops: rw=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.66.0F38.WIG 3A /r | VPMINUW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.66.0F38.WIG 3A /r | VPMINUW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 3A /r | VPMINUW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 3A /r | VPMINUW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 3A /r | VPMINUW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt16
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 3A /r | VPBROADCASTMW2D xmm1, k1 | AVX512VL AVX512CD
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 3A /r | VPBROADCASTMW2D ymm1, k1 | AVX512VL AVX512CD
  ops: w=reg r=rm
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 3A /r | VPBROADCASTMW2D zmm1, k1 | AVX512CD
  ops: w=reg r=rm
-----
INSTRUCTION: 66 0F 38 3B /r | PMINUD xmm1, xmm2/m128 | SSE4_1
  ops: rw=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.128.66.0F38.WIG 3B /r | VPMINUD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F38.WIG 3B /r | VPMINUD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W0 3B /r | VPMINUD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 3B /r | VPMINUD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 3B /r | VPMINUD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 3B /r | VPMINUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 3B /r | VPMINUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 3B /r | VPMINUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: 66 0F 38 3C /r | PMAXSB xmm1, xmm2/m128 | SSE4_1
  ops: rw=reg r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.128.66.0F38.WIG 3C /r | VPMAXSB xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.256.66.0F38.WIG 3C /r | VPMAXSB ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int8
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 3C /r | VPMAXSB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 3C /r | VPMAXSB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_Int8
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 3C /r | VPMAXSB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int8
-----
INSTRUCTION: 66 0F 38 3D /r | PMAXSD xmm1, xmm2/m128 | SSE4_1
  ops: rw=reg r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.128.66.0F38.WIG 3D /r | VPMAXSD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.256.66.0F38.WIG 3D /r | VPMAXSD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int32
-----
INSTRUCTION: EVEX.128.66.0F38.W0 3D /r | VPMAXSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Int32 Broadcast128_Int32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 3D /r | VPMAXSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Int32 Broadcast256_Int32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 3D /r | VPMAXSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int32 Broadcast512_Int32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 3D /r | VPMAXSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Int64 Broadcast128_Int64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 3D /r | VPMAXSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Int64 Broadcast256_Int64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 3D /r | VPMAXSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int64 Broadcast512_Int64
-----
INSTRUCTION: 66 0F 38 3E /r | PMAXUW xmm1, xmm2/m128 | SSE4_1
  ops: rw=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.66.0F38.WIG 3E /r | VPMAXUW xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.66.0F38.WIG 3E /r | VPMAXUW ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.128.66.0F38.WIG 3E /r | VPMAXUW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F38.WIG 3E /r | VPMAXUW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F38.WIG 3E /r | VPMAXUW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt16
-----
INSTRUCTION: 66 0F 38 3F /r | PMAXUD xmm1, xmm2/m128 | SSE4_1
  ops: rw=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.128.66.0F38.WIG 3F /r | VPMAXUD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F38.WIG 3F /r | VPMAXUD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W0 3F /r | VPMAXUD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 3F /r | VPMAXUD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 3F /r | VPMAXUD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 3F /r | VPMAXUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 3F /r | VPMAXUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 3F /r | VPMAXUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: 66 0F 38 40 /r | PMULLD xmm1, xmm2/m128 | SSE4_1
  ops: rw=reg r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.128.66.0F38.WIG 40 /r | VPMULLD xmm1, xmm2, xmm3/m128 | AVX
  ops: w=reg r=vvvv r=rm | Packed128_Int32
-----
INSTRUCTION: VEX.256.66.0F38.WIG 40 /r | VPMULLD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_Int32
-----
INSTRUCTION: EVEX.128.66.0F38.W0 40 /r | VPMULLD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Int32 Broadcast128_Int32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 40 /r | VPMULLD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Int32 Broadcast256_Int32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 40 /r | VPMULLD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int32 Broadcast512_Int32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 40 /r | VPMULLQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512DQ | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Int64 Broadcast128_Int64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 40 /r | VPMULLQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512DQ | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Int64 Broadcast256_Int64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 40 /r | VPMULLQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512DQ | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_Int64 Broadcast512_Int64
-----
INSTRUCTION: 66 0F 38 41 /r | PHMINPOSUW xmm1, xmm2/m128 | SSE4_1
  ops: w=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.66.0F38.WIG 41 /r | VPHMINPOSUW xmm1, xmm2/m128 | AVX
  ops: w=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.128.66.0F38.W0 42 /r | VGETEXPPS xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 42 /r | VGETEXPPS ymm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 42 /r | VGETEXPPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae} | AVX512F | N64b4
  ops: wvmm=reg r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 42 /r | VGETEXPPD xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 42 /r | VGETEXPPD ymm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 42 /r | VGETEXPPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae} | AVX512F | N64b8
  ops: wvmm=reg r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 43 /r | VGETEXPSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae} | AVX512F | N4
  ops: w=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 43 /r | VGETEXPSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae} | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 44 /r | VPLZCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512CD | N16b4
  ops: w=reg r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 44 /r | VPLZCNTD ymm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512CD | N32b4
  ops: w=reg r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 44 /r | VPLZCNTD zmm1 {k1}{z}, zmm2/m512/m32bcst | AVX512CD | N64b4
  ops: wvmm=reg r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 44 /r | VPLZCNTQ xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512CD | N16b8
  ops: w=reg r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 44 /r | VPLZCNTQ ymm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512CD | N32b8
  ops: w=reg r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 44 /r | VPLZCNTQ zmm1 {k1}{z}, zmm2/m512/m64bcst | AVX512CD | N64b8
  ops: wvmm=reg r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: VEX.128.66.0F38.W0 45 /r | VPSRLVD xmm1, xmm2, xmm3/m128 | AVX2
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F38.W0 45 /r | VPSRLVD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
-----
INSTRUCTION: VEX.128.66.0F38.W1 45 /r | VPSRLVQ xmm1, xmm2, xmm3/m128 | AVX2
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: VEX.256.66.0F38.W1 45 /r | VPSRLVQ ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 45 /r | VPSRLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 45 /r | VPSRLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 45 /r | VPSRLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 45 /r | VPSRLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 45 /r | VPSRLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 45 /r | VPSRLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: VEX.128.66.0F38.W0 46 /r | VPSRAVD xmm1, xmm2, xmm3/m128 | AVX2
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F38.W0 46 /r | VPSRAVD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W0 46 /r | VPSRAVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 46 /r | VPSRAVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 46 /r | VPSRAVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 46 /r | VPSRAVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 46 /r | VPSRAVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 46 /r | VPSRAVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: VEX.128.66.0F38.W0 47 /r | VPSLLVD xmm1, xmm2, xmm3/m128 | AVX2
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F38.W0 47 /r | VPSLLVD ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
-----
INSTRUCTION: VEX.128.66.0F38.W1 47 /r | VPSLLVQ xmm1, xmm2, xmm3/m128 | AVX2
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: VEX.256.66.0F38.W1 47 /r | VPSLLVQ ymm1, ymm2, ymm3/m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 47 /r | VPSLLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 47 /r | VPSLLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 47 /r | VPSLLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 47 /r | VPSLLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 47 /r | VPSLLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 47 /r | VPSLLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 4C /r | VRCP14PS xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 4C /r | VRCP14PS ymm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 4C /r | VRCP14PS zmm1 {k1}{z}, zmm2/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 4C /r | VRCP14PD xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 4C /r | VRCP14PD ymm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 4C /r | VRCP14PD zmm1 {k1}{z}, zmm2/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 4D /r | VRCP14SS xmm1 {k1}{z}, xmm2, xmm3/m32 | AVX512F | N4
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 4D /r | VRCP14SD xmm1 {k1}{z}, xmm2, xmm3/m64 | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W0 4E /r | VRSQRT14PS xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 4E /r | VRSQRT14PS ymm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 4E /r | VRSQRT14PS zmm1 {k1}{z}, zmm2/m512/m32bcst | AVX512F | N64b4
  ops: wvmm=reg r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 4E /r | VRSQRT14PD xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 4E /r | VRSQRT14PD ymm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 4E /r | VRSQRT14PD zmm1 {k1}{z}, zmm2/m512/m64bcst | AVX512F | N64b8
  ops: wvmm=reg r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 4F /r | VRSQRT14SS xmm1 {k1}{z}, xmm2, xmm3/m32 | AVX512F | N4
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 4F /r | VRSQRT14SD xmm1 {k1}{z}, xmm2, xmm3/m64 | AVX512F | N8
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W0 50 /r | VPDPBUSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512_VNNI | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Int8 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 50 /r | VPDPBUSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512_VNNI | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Int8 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 50 /r | VPDPBUSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512_VNNI | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Int8 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W0 51 /r | VPDPBUSDS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512_VNNI | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Int8 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 51 /r | VPDPBUSDS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512_VNNI | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Int8 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 51 /r | VPDPBUSDS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512_VNNI | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Int8 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W0 52 /r | VPDPWSSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512_VNNI | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Int16 Broadcast128_2xInt16
-----
INSTRUCTION: EVEX.256.66.0F38.W0 52 /r | VPDPWSSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512_VNNI | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Int16 Broadcast256_2xInt16
-----
INSTRUCTION: EVEX.512.66.0F38.W0 52 /r | VPDPWSSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512_VNNI | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Int16 Broadcast512_2xInt16
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 52 /r | VDPBF16PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512_BF16 | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_2xBFloat16 Broadcast128_2xBFloat16
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 52 /r | VDPBF16PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512_BF16 | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_2xBFloat16 Broadcast256_2xBFloat16
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 52 /r | VDPBF16PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F AVX512_BF16 | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_2xBFloat16 Broadcast512_2xBFloat16
-----
INSTRUCTION: EVEX.512.F2.0F38.W0 52 /r | VP4DPWSSD zmm1 {k1}{z}, zmm2+3, m128 | AVX512_4VNNIW | N16
  ops: rwvmm=reg r=vvvv;p3 r=rm | Packed128_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W0 53 /r | VPDPWSSDS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512_VNNI | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Int16 Broadcast128_2xInt16
-----
INSTRUCTION: EVEX.256.66.0F38.W0 53 /r | VPDPWSSDS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512_VNNI | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Int16 Broadcast256_2xInt16
-----
INSTRUCTION: EVEX.512.66.0F38.W0 53 /r | VPDPWSSDS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512_VNNI | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Int16 Broadcast512_2xInt16
-----
INSTRUCTION: EVEX.512.F2.0F38.W0 53 /r | VP4DPWSSDS zmm1 {k1}{z}, zmm2+3, m128 | AVX512_4VNNIW | N16
  ops: rwvmm=reg r=vvvv;p3 r=rm | Packed128_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W0 54 /r | VPOPCNTB xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512_BITALG | N16
  ops: w=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F38.W0 54 /r | VPOPCNTB ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512_BITALG | N32
  ops: w=reg r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F38.W0 54 /r | VPOPCNTB zmm1 {k1}{z}, zmm2/m512 | AVX512_BITALG | N64
  ops: wvmm=reg r=rm | Packed512_UInt8
-----
INSTRUCTION: EVEX.128.66.0F38.W1 54 /r | VPOPCNTW xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512_BITALG | N16
  ops: w=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F38.W1 54 /r | VPOPCNTW ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512_BITALG | N32
  ops: w=reg r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F38.W1 54 /r | VPOPCNTW zmm1 {k1}{z}, zmm2/m512 | AVX512_BITALG | N64
  ops: wvmm=reg r=rm | Packed512_UInt16
-----
INSTRUCTION: EVEX.128.66.0F38.W0 55 /r | VPOPCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512_VPOPCNTDQ | N16b4
  ops: w=reg r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 55 /r | VPOPCNTD ymm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512_VPOPCNTDQ | N32b4
  ops: w=reg r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 55 /r | VPOPCNTD zmm1 {k1}{z}, zmm2/m512/m32bcst | AVX512_VPOPCNTDQ | N64b4
  ops: wvmm=reg r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 55 /r | VPOPCNTQ xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512_VPOPCNTDQ | N16b8
  ops: w=reg r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 55 /r | VPOPCNTQ ymm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512_VPOPCNTDQ | N32b8
  ops: w=reg r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 55 /r | VPOPCNTQ zmm1 {k1}{z}, zmm2/m512/m64bcst | AVX512_VPOPCNTDQ | N64b8
  ops: wvmm=reg r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: VEX.128.66.0F38.W0 58 /r | VPBROADCASTD xmm1, xmm2/m32 | AVX2
  ops: w=reg r=rm | Int32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.W0 58 /r | VPBROADCASTD ymm1, xmm2/m32 | AVX2
  ops: w=reg r=rm | Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W0 58 /r | VPBROADCASTD xmm1 {k1}{z}, xmm2/m32 | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.W0 58 /r | VPBROADCASTD ymm1 {k1}{z}, xmm2/m32 | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W0 58 /r | VPBROADCASTD zmm1 {k1}{z}, xmm2/m32 | AVX512F | N4
  ops: wvmm=reg r=rm | Int32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F38.W0 59 /r | VPBROADCASTQ xmm1, xmm2/m64 | AVX2
  ops: w=reg r=rm | Int64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.W0 59 /r | VPBROADCASTQ ymm1, xmm2/m64 | AVX2
  ops: w=reg r=rm | Int64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W0 59 /r | VBROADCASTI32X2 xmm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512DQ | N8
  ops: w=reg r=rm | Packed64_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.W0 59 /r | VBROADCASTI32X2 ymm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512DQ | N8
  ops: w=reg r=rm | Packed64_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W0 59 /r | VBROADCASTI32X2 zmm1 {k1}{z}, xmm2/m64 | AVX512DQ | N8
  ops: wvmm=reg r=rm | Packed64_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W1 59 /r | VPBROADCASTQ xmm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Int64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.W1 59 /r | VPBROADCASTQ ymm1 {k1}{z}, xmm2/m64 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Int64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W1 59 /r | VPBROADCASTQ zmm1 {k1}{z}, xmm2/m64 | AVX512F | N8
  ops: wvmm=reg r=rm | Int64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.W0 5A /r | VBROADCASTI128 ymm1, m128 | AVX2
  ops: w=reg r=rm | Int128
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.W0 5A /r | VBROADCASTI32X4 ymm1 {k1}{z}, m128 | AVX512VL AVX512F | N16
  ops: w=reg r=rm | Packed128_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W0 5A /r | VBROADCASTI32X4 zmm1 {k1}{z}, m128 | AVX512F | N16
  ops: wvmm=reg r=rm | Packed128_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.W1 5A /r | VBROADCASTI64X2 ymm1 {k1}{z}, m128 | AVX512VL AVX512DQ | N16
  ops: w=reg r=rm | Packed128_UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W1 5A /r | VBROADCASTI64X2 zmm1 {k1}{z}, m128 | AVX512DQ | N16
  ops: wvmm=reg r=rm | Packed128_UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W0 5B /r | VBROADCASTI32X8 zmm1 {k1}{z}, m256 | AVX512DQ | N32
  ops: wvmm=reg r=rm | Packed256_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W1 5B /r | VBROADCASTI64X4 zmm1 {k1}{z}, m256 | AVX512F | N32
  ops: wvmm=reg r=rm | Packed256_UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W0 62 /r | VPEXPANDB xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512_VBMI2 | N1
  ops: w=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F38.W0 62 /r | VPEXPANDB ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512_VBMI2 | N1
  ops: w=reg r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F38.W0 62 /r | VPEXPANDB zmm1 {k1}{z}, zmm2/m512 | AVX512_VBMI2 | N1
  ops: wvmm=reg r=rm | Packed512_UInt8
-----
INSTRUCTION: EVEX.128.66.0F38.W1 62 /r | VPEXPANDW xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512_VBMI2 | N2
  ops: w=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F38.W1 62 /r | VPEXPANDW ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512_VBMI2 | N2
  ops: w=reg r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F38.W1 62 /r | VPEXPANDW zmm1 {k1}{z}, zmm2/m512 | AVX512_VBMI2 | N2
  ops: wvmm=reg r=rm | Packed512_UInt16
-----
INSTRUCTION: EVEX.128.66.0F38.W0 63 /r | VPCOMPRESSB xmm1/m128 {k1}{z}, xmm2 | AVX512VL AVX512_VBMI2 | N1
  ops: w=rm r=reg | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F38.W0 63 /r | VPCOMPRESSB ymm1/m256 {k1}{z}, ymm2 | AVX512VL AVX512_VBMI2 | N1
  ops: w=rm r=reg | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F38.W0 63 /r | VPCOMPRESSB zmm1/m512 {k1}{z}, zmm2 | AVX512_VBMI2 | N1
  ops: wvmm=rm r=reg | Packed512_UInt8
-----
INSTRUCTION: EVEX.128.66.0F38.W1 63 /r | VPCOMPRESSW xmm1/m128 {k1}{z}, xmm2 | AVX512VL AVX512_VBMI2 | N2
  ops: w=rm r=reg | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F38.W1 63 /r | VPCOMPRESSW ymm1/m256 {k1}{z}, ymm2 | AVX512VL AVX512_VBMI2 | N2
  ops: w=rm r=reg | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F38.W1 63 /r | VPCOMPRESSW zmm1/m512 {k1}{z}, zmm2 | AVX512_VBMI2 | N2
  ops: wvmm=rm r=reg | Packed512_UInt16
-----
INSTRUCTION: EVEX.128.66.0F38.W0 64 /r | VPBLENDMD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.256.66.0F38.W0 64 /r | VPBLENDMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.512.66.0F38.W0 64 /r | VPBLENDMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: w=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.128.66.0F38.W1 64 /r | VPBLENDMQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.256.66.0F38.W1 64 /r | VPBLENDMQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.512.66.0F38.W1 64 /r | VPBLENDMQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: w=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.128.66.0F38.W0 65 /r | VBLENDMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.256.66.0F38.W0 65 /r | VBLENDMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.512.66.0F38.W0 65 /r | VBLENDMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: w=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.128.66.0F38.W1 65 /r | VBLENDMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.256.66.0F38.W1 65 /r | VBLENDMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.512.66.0F38.W1 65 /r | VBLENDMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: w=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.128.66.0F38.W0 66 /r | VPBLENDMB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.256.66.0F38.W0 66 /r | VPBLENDMB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.512.66.0F38.W0 66 /r | VPBLENDMB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: w=reg r=vvvv r=rm | Packed512_UInt8
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.128.66.0F38.W1 66 /r | VPBLENDMW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.256.66.0F38.W1 66 /r | VPBLENDMW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.512.66.0F38.W1 66 /r | VPBLENDMW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: w=reg r=vvvv r=rm | Packed512_UInt16
  flags: k-elem-selector
-----
INSTRUCTION: EVEX.128.F2.0F38.W0 68 /r | VP2INTERSECTD k1+1, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512_VP2INTERSECT | N16b4
  ops: wf=reg;p1 r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.F2.0F38.W0 68 /r | VP2INTERSECTD k1+1, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512_VP2INTERSECT | N32b4
  ops: wf=reg;p1 r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.F2.0F38.W0 68 /r | VP2INTERSECTD k1+1, zmm2, zmm3/m512/m32bcst | AVX512F AVX512_VP2INTERSECT | N64b4
  ops: wf=reg;p1 r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.F2.0F38.W1 68 /r | VP2INTERSECTQ k1+1, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512_VP2INTERSECT | N16b8
  ops: wf=reg;p1 r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.F2.0F38.W1 68 /r | VP2INTERSECTQ k1+1, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512_VP2INTERSECT | N32b8
  ops: wf=reg;p1 r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.F2.0F38.W1 68 /r | VP2INTERSECTQ k1+1, zmm2, zmm3/m512/m64bcst | AVX512F AVX512_VP2INTERSECT | N64b8
  ops: wf=reg;p1 r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: EVEX.128.66.0F38.W1 70 /r | VPSHLDVW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512_VBMI2 | N16
  ops: rw=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F38.W1 70 /r | VPSHLDVW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512_VBMI2 | N32
  ops: rw=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F38.W1 70 /r | VPSHLDVW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512_VBMI2 | N64
  ops: rwvmm=reg r=vvvv r=rm | Packed512_UInt16
-----
INSTRUCTION: EVEX.128.66.0F38.W0 71 /r | VPSHLDVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512_VBMI2 | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 71 /r | VPSHLDVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512_VBMI2 | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 71 /r | VPSHLDVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512_VBMI2 | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 71 /r | VPSHLDVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512_VBMI2 | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 71 /r | VPSHLDVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512_VBMI2 | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 71 /r | VPSHLDVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512_VBMI2 | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: EVEX.128.66.0F38.W1 72 /r | VPSHRDVW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512_VBMI2 | N16
  ops: rw=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F38.W1 72 /r | VPSHRDVW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512_VBMI2 | N32
  ops: rw=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F38.W1 72 /r | VPSHRDVW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512_VBMI2 | N64
  ops: rwvmm=reg r=vvvv r=rm | Packed512_UInt16
-----
INSTRUCTION: EVEX.128.F3.0F38.W0 72 /r | VCVTNEPS2BF16 xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512_BF16 | N16b4
  ops: w=reg r=rm | Packed128_Float32 Broadcast128_Float32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.F3.0F38.W0 72 /r | VCVTNEPS2BF16 xmm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512_BF16 | N32b4
  ops: w=reg r=rm | Packed256_Float32 Broadcast256_Float32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.F3.0F38.W0 72 /r | VCVTNEPS2BF16 ymm1 {k1}{z}, zmm2/m512/m32bcst | AVX512F AVX512_BF16 | N64b4
  ops: w=reg r=rm | Packed512_Float32 Broadcast512_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F2.0F38.W0 72 /r | VCVTNE2PS2BF16 xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512_BF16 | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.F2.0F38.W0 72 /r | VCVTNE2PS2BF16 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512_BF16 | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.F2.0F38.W0 72 /r | VCVTNE2PS2BF16 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F AVX512_BF16 | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W0 73 /r | VPSHRDVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512_VBMI2 | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 73 /r | VPSHRDVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512_VBMI2 | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 73 /r | VPSHRDVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512_VBMI2 | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 73 /r | VPSHRDVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512_VBMI2 | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 73 /r | VPSHRDVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512_VBMI2 | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 73 /r | VPSHRDVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512_VBMI2 | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 75 /r | VPERMI2B xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512_VBMI | N16
  ops: rw=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F38.W0 75 /r | VPERMI2B ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512_VBMI | N32
  ops: rw=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F38.W0 75 /r | VPERMI2B zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512_VBMI | N64
  ops: rwvmm=reg r=vvvv r=rm | Packed512_UInt8
-----
INSTRUCTION: EVEX.128.66.0F38.W1 75 /r | VPERMI2W xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: rw=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F38.W1 75 /r | VPERMI2W ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: rw=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F38.W1 75 /r | VPERMI2W zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: rwvmm=reg r=vvvv r=rm | Packed512_UInt16
-----
INSTRUCTION: EVEX.128.66.0F38.W0 76 /r | VPERMI2D xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 76 /r | VPERMI2D ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 76 /r | VPERMI2D zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 76 /r | VPERMI2Q xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 76 /r | VPERMI2Q ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 76 /r | VPERMI2Q zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 77 /r | VPERMI2PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 77 /r | VPERMI2PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 77 /r | VPERMI2PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 77 /r | VPERMI2PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 77 /r | VPERMI2PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 77 /r | VPERMI2PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.128.66.0F38.W0 78 /r | VPBROADCASTB xmm1, xmm2/m8 | AVX2
  ops: w=reg r=rm | Int8
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.W0 78 /r | VPBROADCASTB ymm1, xmm2/m8 | AVX2
  ops: w=reg r=rm | Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W0 78 /r | VPBROADCASTB xmm1 {k1}{z}, xmm2/m8 | AVX512VL AVX512BW | N1
  ops: w=reg r=rm | Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.W0 78 /r | VPBROADCASTB ymm1 {k1}{z}, xmm2/m8 | AVX512VL AVX512BW | N1
  ops: w=reg r=rm | Int8
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W0 78 /r | VPBROADCASTB zmm1 {k1}{z}, xmm2/m8 | AVX512BW | N1
  ops: wvmm=reg r=rm | Int8
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F38.W0 79 /r | VPBROADCASTW xmm1, xmm2/m16 | AVX2
  ops: w=reg r=rm | Int16
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F38.W0 79 /r | VPBROADCASTW ymm1, xmm2/m16 | AVX2
  ops: w=reg r=rm | Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W0 79 /r | VPBROADCASTW xmm1 {k1}{z}, xmm2/m16 | AVX512VL AVX512BW | N2
  ops: w=reg r=rm | Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F38.W0 79 /r | VPBROADCASTW ymm1 {k1}{z}, xmm2/m16 | AVX512VL AVX512BW | N2
  ops: w=reg r=rm | Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F38.W0 79 /r | VPBROADCASTW zmm1 {k1}{z}, xmm2/m16 | AVX512BW | N2
  ops: wvmm=reg r=rm | Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W0 7A /r | VPBROADCASTB xmm1 {k1}{z}, r32 | AVX512VL AVX512BW
  ops: w=reg r=rm
  implied: last-gpr-8
-----
INSTRUCTION: EVEX.256.66.0F38.W0 7A /r | VPBROADCASTB ymm1 {k1}{z}, r32 | AVX512VL AVX512BW
  ops: w=reg r=rm
  implied: last-gpr-8
-----
INSTRUCTION: EVEX.512.66.0F38.W0 7A /r | VPBROADCASTB zmm1 {k1}{z}, r32 | AVX512BW
  ops: wvmm=reg r=rm
  implied: last-gpr-8
-----
INSTRUCTION: EVEX.128.66.0F38.W0 7B /r | VPBROADCASTW xmm1 {k1}{z}, r32 | AVX512VL AVX512BW
  ops: w=reg r=rm
  implied: last-gpr-16
-----
INSTRUCTION: EVEX.256.66.0F38.W0 7B /r | VPBROADCASTW ymm1 {k1}{z}, r32 | AVX512VL AVX512BW
  ops: w=reg r=rm
  implied: last-gpr-16
-----
INSTRUCTION: EVEX.512.66.0F38.W0 7B /r | VPBROADCASTW zmm1 {k1}{z}, r32 | AVX512BW
  ops: wvmm=reg r=rm
  implied: last-gpr-16
-----
INSTRUCTION: EVEX.128.66.0F38.W0 7C /r | VPBROADCASTD xmm1 {k1}{z}, r32 | AVX512VL AVX512F
  ops: w=reg r=rm
  flags: wig32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 7C /r | VPBROADCASTD ymm1 {k1}{z}, r32 | AVX512VL AVX512F
  ops: w=reg r=rm
  flags: wig32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 7C /r | VPBROADCASTD zmm1 {k1}{z}, r32 | AVX512F
  ops: wvmm=reg r=rm
  flags: wig32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 7C /r | VPBROADCASTQ xmm1 {k1}{z}, r64 | AVX512VL AVX512F
  ops: w=reg r=rm
  flags: 64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 7C /r | VPBROADCASTQ ymm1 {k1}{z}, r64 | AVX512VL AVX512F
  ops: w=reg r=rm
  flags: 64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 7C /r | VPBROADCASTQ zmm1 {k1}{z}, r64 | AVX512F
  ops: wvmm=reg r=rm
  flags: 64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 7D /r | VPERMT2B xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512_VBMI | N16
  ops: rw=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F38.W0 7D /r | VPERMT2B ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512_VBMI | N32
  ops: rw=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F38.W0 7D /r | VPERMT2B zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512_VBMI | N64
  ops: rwvmm=reg r=vvvv r=rm | Packed512_UInt8
-----
INSTRUCTION: EVEX.128.66.0F38.W1 7D /r | VPERMT2W xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: rw=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F38.W1 7D /r | VPERMT2W ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: rw=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F38.W1 7D /r | VPERMT2W zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: rwvmm=reg r=vvvv r=rm | Packed512_UInt16
-----
INSTRUCTION: EVEX.128.66.0F38.W0 7E /r | VPERMT2D xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 7E /r | VPERMT2D ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 7E /r | VPERMT2D zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 7E /r | VPERMT2Q xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 7E /r | VPERMT2Q ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 7E /r | VPERMT2Q zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 7F /r | VPERMT2PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 7F /r | VPERMT2PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 7F /r | VPERMT2PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 7F /r | VPERMT2PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 7F /r | VPERMT2PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 7F /r | VPERMT2PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: 66 0F 38 80 /r | INVEPT r32, m128 | VMX INVEPT
  ops: r=reg r=rm | UInt128
  rflags: w=zc 0=osap
  flags: 16 32 cpl0 no-rm no-v86 no-cm serialize-intel vmx=op intel-vm-exit tdx-non-root-ud tsx-impl-abort
  masm: flags=mem-size=normal;force-size=default
-----
INSTRUCTION: 66 0F 38 80 /r | INVEPT r64, m128 | VMX INVEPT
  ops: r=reg r=rm | UInt128
  rflags: w=zc 0=osap
  flags: 64 cpl0 no-rm no-v86 no-cm serialize-intel vmx=op intel-vm-exit tdx-non-root-ud tsx-impl-abort
  masm: flags=mem-size=normal;force-size=default
-----
INSTRUCTION: 66 0F 38 81 /r | INVVPID r32, m128 | VMX INVVPID
  ops: r=reg r=rm | UInt128
  rflags: w=zc 0=osap
  flags: 16 32 cpl0 no-rm no-v86 no-cm serialize-intel vmx=op intel-vm-exit tdx-non-root-ud tsx-impl-abort
  masm: flags=mem-size=normal;force-size=default
-----
INSTRUCTION: 66 0F 38 81 /r | INVVPID r64, m128 | VMX INVVPID
  ops: r=reg r=rm | UInt128
  rflags: w=zc 0=osap
  flags: 64 cpl0 no-rm no-v86 no-cm serialize-intel vmx=op intel-vm-exit tdx-non-root-ud tsx-impl-abort
  masm: flags=mem-size=normal;force-size=default
-----
INSTRUCTION: 66 0F 38 82 /r | INVPCID r32, m128 | INVPCID
  ops: r=reg r=rm | UInt128
  # AMD: no-rm no-v86
  flags: 16 32 cpl0 serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  masm: flags=mem-size=normal;force-size=default
-----
INSTRUCTION: 66 0F 38 82 /r | INVPCID r64, m128 | INVPCID
  ops: r=reg r=rm | UInt128
  # AMD: no-rm no-v86
  flags: 64 cpl0 serialize-intel serialize-amd intel-may-vm-exit amd-may-vm-exit tsx-impl-abort
  masm: flags=mem-size=normal;force-size=default
-----
INSTRUCTION: EVEX.128.66.0F38.W1 83 /r | VPMULTISHIFTQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512_VBMI | N16b8
  ops: w=reg r=vvvv r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 83 /r | VPMULTISHIFTQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512_VBMI | N32b8
  ops: w=reg r=vvvv r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 83 /r | VPMULTISHIFTQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512_VBMI | N64b8
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 88 /r | VEXPANDPS xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 88 /r | VEXPANDPS ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Packed256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 88 /r | VEXPANDPS zmm1 {k1}{z}, zmm2/m512 | AVX512F | N4
  ops: wvmm=reg r=rm | Packed512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 88 /r | VEXPANDPD xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Packed128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 88 /r | VEXPANDPD ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 88 /r | VEXPANDPD zmm1 {k1}{z}, zmm2/m512 | AVX512F | N8
  ops: wvmm=reg r=rm | Packed512_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 89 /r | VPEXPANDD xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 89 /r | VPEXPANDD ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Packed256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 89 /r | VPEXPANDD zmm1 {k1}{z}, zmm2/m512 | AVX512F | N4
  ops: wvmm=reg r=rm | Packed512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 89 /r | VPEXPANDQ xmm1 {k1}{z}, xmm2/m128 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Packed128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 89 /r | VPEXPANDQ ymm1 {k1}{z}, ymm2/m256 | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Packed256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 89 /r | VPEXPANDQ zmm1 {k1}{z}, zmm2/m512 | AVX512F | N8
  ops: wvmm=reg r=rm | Packed512_UInt64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 8A /r | VCOMPRESSPS xmm1/m128 {k1}{z}, xmm2 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Packed128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 8A /r | VCOMPRESSPS ymm1/m256 {k1}{z}, ymm2 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Packed256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 8A /r | VCOMPRESSPS zmm1/m512 {k1}{z}, zmm2 | AVX512F | N4
  ops: wvmm=rm r=reg | Packed512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 8A /r | VCOMPRESSPD xmm1/m128 {k1}{z}, xmm2 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Packed128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 8A /r | VCOMPRESSPD ymm1/m256 {k1}{z}, ymm2 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Packed256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 8A /r | VCOMPRESSPD zmm1/m512 {k1}{z}, zmm2 | AVX512F | N8
  ops: wvmm=rm r=reg | Packed512_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 8B /r | VPCOMPRESSD xmm1/m128 {k1}{z}, xmm2 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Packed128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 8B /r | VPCOMPRESSD ymm1/m256 {k1}{z}, ymm2 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Packed256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 8B /r | VPCOMPRESSD zmm1/m512 {k1}{z}, zmm2 | AVX512F | N4
  ops: wvmm=rm r=reg | Packed512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 8B /r | VPCOMPRESSQ xmm1/m128 {k1}{z}, xmm2 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Packed128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 8B /r | VPCOMPRESSQ ymm1/m256 {k1}{z}, ymm2 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Packed256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 8B /r | VPCOMPRESSQ zmm1/m512 {k1}{z}, zmm2 | AVX512F | N8
  ops: wvmm=rm r=reg | Packed512_UInt64
-----
INSTRUCTION: VEX.128.66.0F38.W0 8C /r | VPMASKMOVD xmm1, xmm2, m128 | AVX2
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F38.W0 8C /r | VPMASKMOVD ymm1, ymm2, m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
-----
INSTRUCTION: VEX.128.66.0F38.W1 8C /r | VPMASKMOVQ xmm1, xmm2, m128 | AVX2
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: VEX.256.66.0F38.W1 8C /r | VPMASKMOVQ ymm1, ymm2, m256 | AVX2
  ops: w=reg r=vvvv r=rm | Packed256_UInt64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 8D /r | VPERMB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512_VBMI | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F38.W0 8D /r | VPERMB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512_VBMI | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F38.W0 8D /r | VPERMB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512_VBMI | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt8
-----
INSTRUCTION: EVEX.128.66.0F38.W1 8D /r | VPERMW xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F38.W1 8D /r | VPERMW ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F38.W1 8D /r | VPERMW zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt16
-----
INSTRUCTION: VEX.128.66.0F38.W0 8E /r | VPMASKMOVD m128, xmm1, xmm2 | AVX2
  ops: w=rm r=vvvv r=reg | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F38.W0 8E /r | VPMASKMOVD m256, ymm1, ymm2 | AVX2
  ops: w=rm r=vvvv r=reg | Packed256_UInt32
-----
INSTRUCTION: VEX.128.66.0F38.W1 8E /r | VPMASKMOVQ m128, xmm1, xmm2 | AVX2
  ops: w=rm r=vvvv r=reg | Packed128_UInt64
-----
INSTRUCTION: VEX.256.66.0F38.W1 8E /r | VPMASKMOVQ m256, ymm1, ymm2 | AVX2
  ops: w=rm r=vvvv r=reg | Packed256_UInt64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 8F /r | VPSHUFBITQMB k1 {k2}, xmm2, xmm3/m128 | AVX512VL AVX512_BITALG | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
  flags: implied-z
-----
INSTRUCTION: EVEX.256.66.0F38.W0 8F /r | VPSHUFBITQMB k1 {k2}, ymm2, ymm3/m256 | AVX512VL AVX512_BITALG | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
  flags: implied-z
-----
INSTRUCTION: EVEX.512.66.0F38.W0 8F /r | VPSHUFBITQMB k1 {k2}, zmm2, zmm3/m512 | AVX512_BITALG | N64
  ops: w=reg r=vvvv r=rm | Packed512_UInt8
  flags: implied-z
-----
INSTRUCTION: VEX.128.66.0F38.W0 90 /r | VPGATHERDD xmm1, vm32x, xmm2 | AVX2
  ops: rw=reg r=rm rw=vvvv | Int32
  flags: unique-reg-num
-----
INSTRUCTION: VEX.256.66.0F38.W0 90 /r | VPGATHERDD ymm1, vm32y, ymm2 | AVX2
  ops: rw=reg r=rm rw=vvvv | Int32
  flags: unique-reg-num
-----
INSTRUCTION: VEX.128.66.0F38.W1 90 /r | VPGATHERDQ xmm1, vm32x, xmm2 | AVX2
  ops: rw=reg r=rm rw=vvvv | Int64
  flags: unique-reg-num
-----
INSTRUCTION: VEX.256.66.0F38.W1 90 /r | VPGATHERDQ ymm1, vm32x, ymm2 | AVX2
  ops: rw=reg r=rm rw=vvvv | Int64
  flags: unique-reg-num
-----
INSTRUCTION: EVEX.128.66.0F38.W0 90 /vsib | VPGATHERDD xmm1 {k1}, vm32x | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Int32
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.256.66.0F38.W0 90 /vsib | VPGATHERDD ymm1 {k1}, vm32y | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Int32
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W0 90 /vsib | VPGATHERDD zmm1 {k1}, vm32z | AVX512F | N4
  ops: wvmm=reg r=rm | Int32
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.128.66.0F38.W1 90 /vsib | VPGATHERDQ xmm1 {k1}, vm32x | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Int64
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.256.66.0F38.W1 90 /vsib | VPGATHERDQ ymm1 {k1}, vm32x | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Int64
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W1 90 /vsib | VPGATHERDQ zmm1 {k1}, vm32y | AVX512F | N8
  ops: wvmm=reg r=rm | Int64
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: VEX.128.66.0F38.W0 91 /r | VPGATHERQD xmm1, vm64x, xmm2 | AVX2
  ops: rw=reg r=rm rw=vvvv | Int32
  flags: unique-reg-num
-----
INSTRUCTION: VEX.256.66.0F38.W0 91 /r | VPGATHERQD xmm1, vm64y, xmm2 | AVX2
  ops: rw=reg r=rm rw=vvvv | Int32
  flags: unique-reg-num
-----
INSTRUCTION: VEX.128.66.0F38.W1 91 /r | VPGATHERQQ xmm1, vm64x, xmm2 | AVX2
  ops: rw=reg r=rm rw=vvvv | Int64
  flags: unique-reg-num
-----
INSTRUCTION: VEX.256.66.0F38.W1 91 /r | VPGATHERQQ ymm1, vm64y, ymm2 | AVX2
  ops: rw=reg r=rm rw=vvvv | Int64
  flags: unique-reg-num
-----
INSTRUCTION: EVEX.128.66.0F38.W0 91 /vsib | VPGATHERQD xmm1 {k1}, vm64x | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Int32
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.256.66.0F38.W0 91 /vsib | VPGATHERQD xmm1 {k1}, vm64y | AVX512VL AVX512F | N4
  ops: w=reg r=rm | Int32
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W0 91 /vsib | VPGATHERQD ymm1 {k1}, vm64z | AVX512F | N4
  ops: w=reg r=rm | Int32
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.128.66.0F38.W1 91 /vsib | VPGATHERQQ xmm1 {k1}, vm64x | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Int64
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.256.66.0F38.W1 91 /vsib | VPGATHERQQ ymm1 {k1}, vm64y | AVX512VL AVX512F | N8
  ops: w=reg r=rm | Int64
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W1 91 /vsib | VPGATHERQQ zmm1 {k1}, vm64z | AVX512F | N8
  ops: wvmm=reg r=rm | Int64
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: VEX.128.66.0F38.W0 92 /r | VGATHERDPS xmm1, vm32x, xmm2 | AVX2
  ops: rw=reg r=rm rw=vvvv | Float32
  flags: unique-reg-num
-----
INSTRUCTION: VEX.256.66.0F38.W0 92 /r | VGATHERDPS ymm1, vm32y, ymm2 | AVX2
  ops: rw=reg r=rm rw=vvvv | Float32
  flags: unique-reg-num
-----
INSTRUCTION: VEX.128.66.0F38.W1 92 /r | VGATHERDPD xmm1, vm32x, xmm2 | AVX2
  ops: rw=reg r=rm rw=vvvv | Float64
  flags: unique-reg-num
-----
INSTRUCTION: VEX.256.66.0F38.W1 92 /r | VGATHERDPD ymm1, vm32x, ymm2 | AVX2
  ops: rw=reg r=rm rw=vvvv | Float64
  flags: unique-reg-num
-----
INSTRUCTION: EVEX.128.66.0F38.W0 92 /vsib | VGATHERDPS xmm1 {k1}, vm32x | AVX512VL AVX512F | N4
  ops: rw=reg r=rm | Float32
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.256.66.0F38.W0 92 /vsib | VGATHERDPS ymm1 {k1}, vm32y | AVX512VL AVX512F | N4
  ops: rw=reg r=rm | Float32
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W0 92 /vsib | VGATHERDPS zmm1 {k1}, vm32z | AVX512F | N4
  ops: rwvmm=reg r=rm | Float32
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.128.66.0F38.W1 92 /vsib | VGATHERDPD xmm1 {k1}, vm32x | AVX512VL AVX512F | N8
  ops: rw=reg r=rm | Float64
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.256.66.0F38.W1 92 /vsib | VGATHERDPD ymm1 {k1}, vm32x | AVX512VL AVX512F | N8
  ops: rw=reg r=rm | Float64
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W1 92 /vsib | VGATHERDPD zmm1 {k1}, vm32y | AVX512F | N8
  ops: rwvmm=reg r=rm | Float64
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: VEX.128.66.0F38.W0 93 /r | VGATHERQPS xmm1, vm64x, xmm2 | AVX2
  ops: rw=reg r=rm rw=vvvv | Float32
  flags: unique-reg-num
-----
INSTRUCTION: VEX.256.66.0F38.W0 93 /r | VGATHERQPS xmm1, vm64y, xmm2 | AVX2
  ops: rw=reg r=rm rw=vvvv | Float32
  flags: unique-reg-num
-----
INSTRUCTION: VEX.128.66.0F38.W1 93 /r | VGATHERQPD xmm1, vm64x, xmm2 | AVX2
  ops: rw=reg r=rm rw=vvvv | Float64
  flags: unique-reg-num
-----
INSTRUCTION: VEX.256.66.0F38.W1 93 /r | VGATHERQPD ymm1, vm64y, ymm2 | AVX2
  ops: rw=reg r=rm rw=vvvv | Float64
  flags: unique-reg-num
-----
INSTRUCTION: EVEX.128.66.0F38.W0 93 /vsib | VGATHERQPS xmm1 {k1}, vm64x | AVX512VL AVX512F | N4
  ops: rw=reg r=rm | Float32
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.256.66.0F38.W0 93 /vsib | VGATHERQPS xmm1 {k1}, vm64y | AVX512VL AVX512F | N4
  ops: rw=reg r=rm | Float32
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W0 93 /vsib | VGATHERQPS ymm1 {k1}, vm64z | AVX512F | N4
  ops: rw=reg r=rm | Float32
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.128.66.0F38.W1 93 /vsib | VGATHERQPD xmm1 {k1}, vm64x | AVX512VL AVX512F | N8
  ops: rw=reg r=rm | Float64
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.256.66.0F38.W1 93 /vsib | VGATHERQPD ymm1 {k1}, vm64y | AVX512VL AVX512F | N8
  ops: rw=reg r=rm | Float64
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W1 93 /vsib | VGATHERQPD zmm1 {k1}, vm64z | AVX512F | N8
  ops: rwvmm=reg r=rm | Float64
  flags: krw knz unique-reg-num
  intel: kmask-op
-----
INSTRUCTION: VEX.128.66.0F38.W0 96 /r | VFMADDSUB132PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 96 /r | VFMADDSUB132PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 96 /r | VFMADDSUB132PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 96 /r | VFMADDSUB132PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 96 /r | VFMADDSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 96 /r | VFMADDSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 96 /r | VFMADDSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 96 /r | VFMADDSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 96 /r | VFMADDSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 96 /r | VFMADDSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.128.66.0F38.W0 97 /r | VFMSUBADD132PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 97 /r | VFMSUBADD132PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 97 /r | VFMSUBADD132PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 97 /r | VFMSUBADD132PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 97 /r | VFMSUBADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 97 /r | VFMSUBADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 97 /r | VFMSUBADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 97 /r | VFMSUBADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 97 /r | VFMSUBADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 97 /r | VFMSUBADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.128.66.0F38.W0 98 /r | VFMADD132PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 98 /r | VFMADD132PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 98 /r | VFMADD132PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 98 /r | VFMADD132PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 98 /r | VFMADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 98 /r | VFMADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 98 /r | VFMADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 98 /r | VFMADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 98 /r | VFMADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 98 /r | VFMADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.LIG.66.0F38.W0 99 /r | VFMADD132SS xmm1, xmm2, xmm3/m32 | FMA
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F38.W1 99 /r | VFMADD132SD xmm1, xmm2, xmm3/m64 | FMA
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 99 /r | VFMADD132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 99 /r | VFMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: VEX.128.66.0F38.W0 9A /r | VFMSUB132PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 9A /r | VFMSUB132PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 9A /r | VFMSUB132PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 9A /r | VFMSUB132PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 9A /r | VFMSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 9A /r | VFMSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 9A /r | VFMSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 9A /r | VFMSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 9A /r | VFMSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 9A /r | VFMSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: EVEX.512.F2.0F38.W0 9A /r | V4FMADDPS zmm1 {k1}{z}, zmm2+3, m128 | AVX512_4FMAPS | N16
  ops: rwvmm=reg r=vvvv;p3 r=rm | Packed128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.LIG.66.0F38.W0 9B /r | VFMSUB132SS xmm1, xmm2, xmm3/m32 | FMA
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F38.W1 9B /r | VFMSUB132SD xmm1, xmm2, xmm3/m64 | FMA
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 9B /r | VFMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 9B /r | VFMSUB132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.LIG.F2.0F38.W0 9B /r | V4FMADDSS xmm1 {k1}{z}, xmm2+3, m128 | AVX512_4FMAPS | N16
  ops: rw=reg r=vvvv;p3 r=rm | Packed128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F38.W0 9C /r | VFNMADD132PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 9C /r | VFNMADD132PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 9C /r | VFNMADD132PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 9C /r | VFNMADD132PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 9C /r | VFNMADD132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 9C /r | VFNMADD132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 9C /r | VFNMADD132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 9C /r | VFNMADD132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 9C /r | VFNMADD132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 9C /r | VFNMADD132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.LIG.66.0F38.W0 9D /r | VFNMADD132SS xmm1, xmm2, xmm3/m32 | FMA
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F38.W1 9D /r | VFNMADD132SD xmm1, xmm2, xmm3/m64 | FMA
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 9D /r | VFNMADD132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 9D /r | VFNMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: VEX.128.66.0F38.W0 9E /r | VFNMSUB132PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 9E /r | VFNMSUB132PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 9E /r | VFNMSUB132PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 9E /r | VFNMSUB132PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 9E /r | VFNMSUB132PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 9E /r | VFNMSUB132PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 9E /r | VFNMSUB132PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 9E /r | VFNMSUB132PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 9E /r | VFNMSUB132PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 9E /r | VFNMSUB132PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.LIG.66.0F38.W0 9F /r | VFNMSUB132SS xmm1, xmm2, xmm3/m32 | FMA
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F38.W1 9F /r | VFNMSUB132SD xmm1, xmm2, xmm3/m64 | FMA
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 9F /r | VFNMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 9F /r | VFNMSUB132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 A0 /vsib | VPSCATTERDD vm32x {k1}, xmm1 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Int32
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.256.66.0F38.W0 A0 /vsib | VPSCATTERDD vm32y {k1}, ymm1 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Int32
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W0 A0 /vsib | VPSCATTERDD vm32z {k1}, zmm1 | AVX512F | N4
  ops: w=rm r=reg | Int32
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.128.66.0F38.W1 A0 /vsib | VPSCATTERDQ vm32x {k1}, xmm1 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Int64
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.256.66.0F38.W1 A0 /vsib | VPSCATTERDQ vm32x {k1}, ymm1 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Int64
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W1 A0 /vsib | VPSCATTERDQ vm32y {k1}, zmm1 | AVX512F | N8
  ops: w=rm r=reg | Int64
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.128.66.0F38.W0 A1 /vsib | VPSCATTERQD vm64x {k1}, xmm1 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Int32
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.256.66.0F38.W0 A1 /vsib | VPSCATTERQD vm64y {k1}, xmm1 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Int32
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W0 A1 /vsib | VPSCATTERQD vm64z {k1}, ymm1 | AVX512F | N4
  ops: w=rm r=reg | Int32
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.128.66.0F38.W1 A1 /vsib | VPSCATTERQQ vm64x {k1}, xmm1 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Int64
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.256.66.0F38.W1 A1 /vsib | VPSCATTERQQ vm64y {k1}, ymm1 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Int64
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W1 A1 /vsib | VPSCATTERQQ vm64z {k1}, zmm1 | AVX512F | N8
  ops: w=rm r=reg | Int64
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.128.66.0F38.W0 A2 /vsib | VSCATTERDPS vm32x {k1}, xmm1 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Float32
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.256.66.0F38.W0 A2 /vsib | VSCATTERDPS vm32y {k1}, ymm1 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Float32
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W0 A2 /vsib | VSCATTERDPS vm32z {k1}, zmm1 | AVX512F | N4
  ops: w=rm r=reg | Float32
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.128.66.0F38.W1 A2 /vsib | VSCATTERDPD vm32x {k1}, xmm1 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Float64
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.256.66.0F38.W1 A2 /vsib | VSCATTERDPD vm32x {k1}, ymm1 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Float64
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W1 A2 /vsib | VSCATTERDPD vm32y {k1}, zmm1 | AVX512F | N8
  ops: w=rm r=reg | Float64
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.128.66.0F38.W0 A3 /vsib | VSCATTERQPS vm64x {k1}, xmm1 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Float32
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.256.66.0F38.W0 A3 /vsib | VSCATTERQPS vm64y {k1}, xmm1 | AVX512VL AVX512F | N4
  ops: w=rm r=reg | Float32
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W0 A3 /vsib | VSCATTERQPS vm64z {k1}, ymm1 | AVX512F | N4
  ops: w=rm r=reg | Float32
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.128.66.0F38.W1 A3 /vsib | VSCATTERQPD vm64x {k1}, xmm1 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Float64
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.256.66.0F38.W1 A3 /vsib | VSCATTERQPD vm64y {k1}, ymm1 | AVX512VL AVX512F | N8
  ops: w=rm r=reg | Float64
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W1 A3 /vsib | VSCATTERQPD vm64z {k1}, zmm1 | AVX512F | N8
  ops: w=rm r=reg | Float64
  flags: krw knz
  intel: kmask-op
-----
INSTRUCTION: VEX.128.66.0F38.W0 A6 /r | VFMADDSUB213PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 A6 /r | VFMADDSUB213PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 A6 /r | VFMADDSUB213PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 A6 /r | VFMADDSUB213PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 A6 /r | VFMADDSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 A6 /r | VFMADDSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 A6 /r | VFMADDSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 A6 /r | VFMADDSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 A6 /r | VFMADDSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 A6 /r | VFMADDSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.128.66.0F38.W0 A7 /r | VFMSUBADD213PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 A7 /r | VFMSUBADD213PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 A7 /r | VFMSUBADD213PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 A7 /r | VFMSUBADD213PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 A7 /r | VFMSUBADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 A7 /r | VFMSUBADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 A7 /r | VFMSUBADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 A7 /r | VFMSUBADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 A7 /r | VFMSUBADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 A7 /r | VFMSUBADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.128.66.0F38.W0 A8 /r | VFMADD213PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 A8 /r | VFMADD213PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 A8 /r | VFMADD213PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 A8 /r | VFMADD213PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 A8 /r | VFMADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 A8 /r | VFMADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 A8 /r | VFMADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 A8 /r | VFMADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 A8 /r | VFMADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 A8 /r | VFMADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.LIG.66.0F38.W0 A9 /r | VFMADD213SS xmm1, xmm2, xmm3/m32 | FMA
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F38.W1 A9 /r | VFMADD213SD xmm1, xmm2, xmm3/m64 | FMA
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 A9 /r | VFMADD213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 A9 /r | VFMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: VEX.128.66.0F38.W0 AA /r | VFMSUB213PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 AA /r | VFMSUB213PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 AA /r | VFMSUB213PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 AA /r | VFMSUB213PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 AA /r | VFMSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 AA /r | VFMSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 AA /r | VFMSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 AA /r | VFMSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 AA /r | VFMSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 AA /r | VFMSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: EVEX.512.F2.0F38.W0 AA /r | V4FNMADDPS zmm1 {k1}{z}, zmm2+3, m128 | AVX512_4FMAPS | N16
  ops: rwvmm=reg r=vvvv;p3 r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.LIG.66.0F38.W0 AB /r | VFMSUB213SS xmm1, xmm2, xmm3/m32 | FMA
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F38.W1 AB /r | VFMSUB213SD xmm1, xmm2, xmm3/m64 | FMA
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 AB /r | VFMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 AB /r | VFMSUB213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.LIG.F2.0F38.W0 AB /r | V4FNMADDSS xmm1 {k1}{z}, xmm2+3, m128 | AVX512_4FMAPS | N16
  ops: rw=reg r=vvvv;p3 r=rm | Packed128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F38.W0 AC /r | VFNMADD213PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 AC /r | VFNMADD213PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 AC /r | VFNMADD213PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 AC /r | VFNMADD213PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 AC /r | VFNMADD213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 AC /r | VFNMADD213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 AC /r | VFNMADD213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 AC /r | VFNMADD213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 AC /r | VFNMADD213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 AC /r | VFNMADD213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.LIG.66.0F38.W0 AD /r | VFNMADD213SS xmm1, xmm2, xmm3/m32 | FMA
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F38.W1 AD /r | VFNMADD213SD xmm1, xmm2, xmm3/m64 | FMA
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 AD /r | VFNMADD213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 AD /r | VFNMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: VEX.128.66.0F38.W0 AE /r | VFNMSUB213PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 AE /r | VFNMSUB213PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 AE /r | VFNMSUB213PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 AE /r | VFNMSUB213PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 AE /r | VFNMSUB213PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 AE /r | VFNMSUB213PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 AE /r | VFNMSUB213PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 AE /r | VFNMSUB213PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 AE /r | VFNMSUB213PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 AE /r | VFNMSUB213PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.LIG.66.0F38.W0 AF /r | VFNMSUB213SS xmm1, xmm2, xmm3/m32 | FMA
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F38.W1 AF /r | VFNMSUB213SD xmm1, xmm2, xmm3/m64 | FMA
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 AF /r | VFNMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 AF /r | VFNMSUB213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W1 B4 /r | VPMADD52LUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512_IFMA | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_UInt52 Broadcast128_UInt52
-----
INSTRUCTION: EVEX.256.66.0F38.W1 B4 /r | VPMADD52LUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512_IFMA | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_UInt52 Broadcast256_UInt52
-----
INSTRUCTION: EVEX.512.66.0F38.W1 B4 /r | VPMADD52LUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512_IFMA | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_UInt52 Broadcast512_UInt52
-----
INSTRUCTION: EVEX.128.66.0F38.W1 B5 /r | VPMADD52HUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512_IFMA | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_UInt52 Broadcast128_UInt52
-----
INSTRUCTION: EVEX.256.66.0F38.W1 B5 /r | VPMADD52HUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512_IFMA | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_UInt52 Broadcast256_UInt52
-----
INSTRUCTION: EVEX.512.66.0F38.W1 B5 /r | VPMADD52HUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst | AVX512_IFMA | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_UInt52 Broadcast512_UInt52
-----
INSTRUCTION: VEX.128.66.0F38.W0 B6 /r | VFMADDSUB231PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 B6 /r | VFMADDSUB231PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 B6 /r | VFMADDSUB231PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 B6 /r | VFMADDSUB231PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 B6 /r | VFMADDSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 B6 /r | VFMADDSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 B6 /r | VFMADDSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 B6 /r | VFMADDSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 B6 /r | VFMADDSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 B6 /r | VFMADDSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.128.66.0F38.W0 B7 /r | VFMSUBADD231PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 B7 /r | VFMSUBADD231PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 B7 /r | VFMSUBADD231PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 B7 /r | VFMSUBADD231PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 B7 /r | VFMSUBADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 B7 /r | VFMSUBADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 B7 /r | VFMSUBADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 B7 /r | VFMSUBADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 B7 /r | VFMSUBADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 B7 /r | VFMSUBADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.128.66.0F38.W0 B8 /r | VFMADD231PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 B8 /r | VFMADD231PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 B8 /r | VFMADD231PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 B8 /r | VFMADD231PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 B8 /r | VFMADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 B8 /r | VFMADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 B8 /r | VFMADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 B8 /r | VFMADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 B8 /r | VFMADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 B8 /r | VFMADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.LIG.66.0F38.W0 B9 /r | VFMADD231SS xmm1, xmm2, xmm3/m32 | FMA
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F38.W1 B9 /r | VFMADD231SD xmm1, xmm2, xmm3/m64 | FMA
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 B9 /r | VFMADD231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 B9 /r | VFMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: VEX.128.66.0F38.W0 BA /r | VFMSUB231PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 BA /r | VFMSUB231PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 BA /r | VFMSUB231PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 BA /r | VFMSUB231PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 BA /r | VFMSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 BA /r | VFMSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 BA /r | VFMSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 BA /r | VFMSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 BA /r | VFMSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 BA /r | VFMSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.LIG.66.0F38.W0 BB /r | VFMSUB231SS xmm1, xmm2, xmm3/m32 | FMA
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F38.W1 BB /r | VFMSUB231SD xmm1, xmm2, xmm3/m64 | FMA
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 BB /r | VFMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 BB /r | VFMSUB231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: VEX.128.66.0F38.W0 BC /r | VFNMADD231PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 BC /r | VFNMADD231PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 BC /r | VFNMADD231PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 BC /r | VFNMADD231PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 BC /r | VFNMADD231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 BC /r | VFNMADD231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 BC /r | VFNMADD231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 BC /r | VFNMADD231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 BC /r | VFNMADD231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 BC /r | VFNMADD231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.LIG.66.0F38.W0 BD /r | VFNMADD231SS xmm1, xmm2, xmm3/m32 | FMA
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F38.W1 BD /r | VFNMADD231SD xmm1, xmm2, xmm3/m64 | FMA
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 BD /r | VFNMADD231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 BD /r | VFNMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: VEX.128.66.0F38.W0 BE /r | VFNMSUB231PS xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F38.W0 BE /r | VFNMSUB231PS ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F38.W1 BE /r | VFNMSUB231PD xmm1, xmm2, xmm3/m128 | FMA
  ops: rw=reg r=vvvv r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F38.W1 BE /r | VFNMSUB231PD ymm1, ymm2, ymm3/m256 | FMA
  ops: rw=reg r=vvvv r=rm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 BE /r | VFNMSUB231PS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 BE /r | VFNMSUB231PS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 BE /r | VFNMSUB231PS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 BE /r | VFNMSUB231PD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 BE /r | VFNMSUB231PD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 BE /r | VFNMSUB231PD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{er} | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.LIG.66.0F38.W0 BF /r | VFNMSUB231SS xmm1, xmm2, xmm3/m32 | FMA
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F38.W1 BF /r | VFNMSUB231SD xmm1, xmm2, xmm3/m64 | FMA
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 BF /r | VFNMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512F | N4
  ops: rw=reg r=vvvv r=rm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 BF /r | VFNMSUB231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512F | N8
  ops: rw=reg r=vvvv r=rm | Float64
-----
INSTRUCTION: EVEX.128.66.0F38.W0 C4 /r | VPCONFLICTD xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512CD | N16b4
  ops: w=reg r=rm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F38.W0 C4 /r | VPCONFLICTD ymm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512CD | N32b4
  ops: w=reg r=rm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 C4 /r | VPCONFLICTD zmm1 {k1}{z}, zmm2/m512/m32bcst | AVX512CD | N64b4
  ops: wvmm=reg r=rm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F38.W1 C4 /r | VPCONFLICTQ xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512CD | N16b8
  ops: w=reg r=rm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F38.W1 C4 /r | VPCONFLICTQ ymm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512CD | N32b8
  ops: w=reg r=rm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W1 C4 /r | VPCONFLICTQ zmm1 {k1}{z}, zmm2/m512/m64bcst | AVX512CD | N64b8
  ops: wvmm=reg r=rm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: EVEX.512.66.0F38.W0 C6 /1 /vsib | VGATHERPF0DPS vm32z {k1} | AVX512PF | N4
  ops: nma=rm | Float32
  flags: knz prefetch
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W1 C6 /1 /vsib | VGATHERPF0DPD vm32y {k1} | AVX512PF | N8
  ops: nma=rm | Float64
  flags: knz prefetch
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W0 C6 /2 /vsib | VGATHERPF1DPS vm32z {k1} | AVX512PF | N4
  ops: nma=rm | Float32
  flags: knz prefetch
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W1 C6 /2 /vsib | VGATHERPF1DPD vm32y {k1} | AVX512PF | N8
  ops: nma=rm | Float64
  flags: knz prefetch
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W0 C6 /5 /vsib | VSCATTERPF0DPS vm32z {k1} | AVX512PF | N4
  ops: nma=rm | Float32
  flags: knz prefetch
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W1 C6 /5 /vsib | VSCATTERPF0DPD vm32y {k1} | AVX512PF | N8
  ops: nma=rm | Float64
  flags: knz prefetch
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W0 C6 /6 /vsib | VSCATTERPF1DPS vm32z {k1} | AVX512PF | N4
  ops: nma=rm | Float32
  flags: knz prefetch
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W1 C6 /6 /vsib | VSCATTERPF1DPD vm32y {k1} | AVX512PF | N8
  ops: nma=rm | Float64
  flags: knz prefetch
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W0 C7 /1 /vsib | VGATHERPF0QPS vm64z {k1} | AVX512PF | N4
  ops: nma=rm | Float32
  flags: knz prefetch
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W1 C7 /1 /vsib | VGATHERPF0QPD vm64z {k1} | AVX512PF | N8
  ops: nma=rm | Float64
  flags: knz prefetch
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W0 C7 /2 /vsib | VGATHERPF1QPS vm64z {k1} | AVX512PF | N4
  ops: nma=rm | Float32
  flags: knz prefetch
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W1 C7 /2 /vsib | VGATHERPF1QPD vm64z {k1} | AVX512PF | N8
  ops: nma=rm | Float64
  flags: knz prefetch
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W0 C7 /5 /vsib | VSCATTERPF0QPS vm64z {k1} | AVX512PF | N4
  ops: nma=rm | Float32
  flags: knz prefetch
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W1 C7 /5 /vsib | VSCATTERPF0QPD vm64z {k1} | AVX512PF | N8
  ops: nma=rm | Float64
  flags: knz prefetch
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W0 C7 /6 /vsib | VSCATTERPF1QPS vm64z {k1} | AVX512PF | N4
  ops: nma=rm | Float32
  flags: knz prefetch
  intel: kmask-op
-----
INSTRUCTION: EVEX.512.66.0F38.W1 C7 /6 /vsib | VSCATTERPF1QPD vm64z {k1} | AVX512PF | N8
  ops: nma=rm | Float64
  flags: knz prefetch
  intel: kmask-op
-----
INSTRUCTION: NP 0F 38 C8 /r | SHA1NEXTE xmm1, xmm2/m128 | SHA
  ops: rw=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 C8 /r | VEXP2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae} | AVX512ER | N64b4
  ops: wvmm=reg r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W1 C8 /r | VEXP2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae} | AVX512ER | N64b8
  ops: wvmm=reg r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: NP 0F 38 C9 /r | SHA1MSG1 xmm1, xmm2/m128 | SHA
  ops: rw=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: NP 0F 38 CA /r | SHA1MSG2 xmm1, xmm2/m128 | SHA
  ops: rw=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 CA /r | VRCP28PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae} | AVX512ER | N64b4
  ops: wvmm=reg r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W1 CA /r | VRCP28PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae} | AVX512ER | N64b8
  ops: wvmm=reg r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: NP 0F 38 CB /r | SHA256RNDS2 xmm1, xmm2/m128, <XMM0> | SHA
  ops: rw=reg r=rm | Packed128_UInt32
  implied: r=xmm0
  gas: xmm0
  masm: xmm0
  nasm: xmm0
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 CB /r | VRCP28SS xmm1 {k1}{z}, xmm2, xmm3/m32{sae} | AVX512ER | N4
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 CB /r | VRCP28SD xmm1 {k1}{z}, xmm2, xmm3/m64{sae} | AVX512ER | N8
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: NP 0F 38 CC /r | SHA256MSG1 xmm1, xmm2/m128 | SHA
  ops: rw=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: EVEX.512.66.0F38.W0 CC /r | VRSQRT28PS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae} | AVX512ER | N64b4
  ops: wvmm=reg r=rm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.512.66.0F38.W1 CC /r | VRSQRT28PD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae} | AVX512ER | N64b8
  ops: wvmm=reg r=rm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: NP 0F 38 CD /r | SHA256MSG2 xmm1, xmm2/m128 | SHA
  ops: rw=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: EVEX.LIG.66.0F38.W0 CD /r | VRSQRT28SS xmm1 {k1}{z}, xmm2, xmm3/m32{sae} | AVX512ER | N4
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.66.0F38.W1 CD /r | VRSQRT28SD xmm1 {k1}{z}, xmm2, xmm3/m64{sae} | AVX512ER | N8
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 38 CF /r | GF2P8MULB xmm1, xmm2/m128 | GFNI
  ops: rw=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.128.66.0F38.W0 CF /r | VGF2P8MULB xmm1, xmm2, xmm3/m128 | AVX GFNI
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.66.0F38.W0 CF /r | VGF2P8MULB ymm1, ymm2, ymm3/m256 | AVX GFNI
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.128.66.0F38.W0 CF /r | VGF2P8MULB xmm1 {k1}{z}, xmm2, xmm3/m128 | AVX512VL GFNI | N16
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F38.W0 CF /r | VGF2P8MULB ymm1 {k1}{z}, ymm2, ymm3/m256 | AVX512VL GFNI | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F38.W0 CF /r | VGF2P8MULB zmm1 {k1}{z}, zmm2, zmm3/m512 | AVX512F GFNI | N64
  ops: wvmm=reg r=vvvv r=rm | Packed512_UInt8
-----
INSTRUCTION: 66 0F 38 DB /r | AESIMC xmm1, xmm2/m128 | AES
  ops: w=reg r=rm | UInt128
-----
INSTRUCTION: VEX.128.66.0F38.WIG DB /r | VAESIMC xmm1, xmm2/m128 | AES AVX
  ops: w=reg r=rm | UInt128
-----
INSTRUCTION: 66 0F 38 DC /r | AESENC xmm1, xmm2/m128 | AES
  ops: rw=reg r=rm | UInt128
-----
INSTRUCTION: VEX.128.66.0F38.WIG DC /r | VAESENC xmm1, xmm2, xmm3/m128 | AES AVX
  ops: w=reg r=vvvv r=rm | UInt128
-----
INSTRUCTION: VEX.256.66.0F38.WIG DC /r | VAESENC ymm1, ymm2, ymm3/m256 | VAES
  ops: w=reg r=vvvv r=rm | Packed256_UInt128
-----
INSTRUCTION: EVEX.128.66.0F38.WIG DC /r | VAESENC xmm1, xmm2, xmm3/m128 | AVX512VL VAES | N16
  ops: w=reg r=vvvv r=rm | UInt128
-----
INSTRUCTION: EVEX.256.66.0F38.WIG DC /r | VAESENC ymm1, ymm2, ymm3/m256 | AVX512VL VAES | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt128
-----
INSTRUCTION: EVEX.512.66.0F38.WIG DC /r | VAESENC zmm1, zmm2, zmm3/m512 | AVX512F VAES | N64
  ops: w=reg r=vvvv r=rm | Packed512_UInt128
-----
INSTRUCTION: 66 0F 38 DD /r | AESENCLAST xmm1, xmm2/m128 | AES
  ops: rw=reg r=rm | UInt128
-----
INSTRUCTION: VEX.128.66.0F38.WIG DD /r | VAESENCLAST xmm1, xmm2, xmm3/m128 | AES AVX
  ops: w=reg r=vvvv r=rm | UInt128
-----
INSTRUCTION: VEX.256.66.0F38.WIG DD /r | VAESENCLAST ymm1, ymm2, ymm3/m256 | VAES
  ops: w=reg r=vvvv r=rm | Packed256_UInt128
-----
INSTRUCTION: EVEX.128.66.0F38.WIG DD /r | VAESENCLAST xmm1, xmm2, xmm3/m128 | AVX512VL VAES | N16
  ops: w=reg r=vvvv r=rm | UInt128
-----
INSTRUCTION: EVEX.256.66.0F38.WIG DD /r | VAESENCLAST ymm1, ymm2, ymm3/m256 | AVX512VL VAES | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt128
-----
INSTRUCTION: EVEX.512.66.0F38.WIG DD /r | VAESENCLAST zmm1, zmm2, zmm3/m512 | AVX512F VAES | N64
  ops: w=reg r=vvvv r=rm | Packed512_UInt128
-----
INSTRUCTION: 66 0F 38 DE /r | AESDEC xmm1, xmm2/m128 | AES
  ops: rw=reg r=rm | UInt128
-----
INSTRUCTION: VEX.128.66.0F38.WIG DE /r | VAESDEC xmm1, xmm2, xmm3/m128 | AES AVX
  ops: w=reg r=vvvv r=rm | UInt128
-----
INSTRUCTION: VEX.256.66.0F38.WIG DE /r | VAESDEC ymm1, ymm2, ymm3/m256 | VAES
  ops: w=reg r=vvvv r=rm | Packed256_UInt128
-----
INSTRUCTION: EVEX.128.66.0F38.WIG DE /r | VAESDEC xmm1, xmm2, xmm3/m128 | AVX512VL VAES | N16
  ops: w=reg r=vvvv r=rm | UInt128
-----
INSTRUCTION: EVEX.256.66.0F38.WIG DE /r | VAESDEC ymm1, ymm2, ymm3/m256 | AVX512VL VAES | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt128
-----
INSTRUCTION: EVEX.512.66.0F38.WIG DE /r | VAESDEC zmm1, zmm2, zmm3/m512 | AVX512F VAES | N64
  ops: w=reg r=vvvv r=rm | Packed512_UInt128
-----
INSTRUCTION: 66 0F 38 DF /r | AESDECLAST xmm1, xmm2/m128 | AES
  ops: rw=reg r=rm | UInt128
-----
INSTRUCTION: VEX.128.66.0F38.WIG DF /r | VAESDECLAST xmm1, xmm2, xmm3/m128 | AES AVX
  ops: w=reg r=vvvv r=rm | UInt128
-----
INSTRUCTION: VEX.256.66.0F38.WIG DF /r | VAESDECLAST ymm1, ymm2, ymm3/m256 | VAES
  ops: w=reg r=vvvv r=rm | Packed256_UInt128
-----
INSTRUCTION: EVEX.128.66.0F38.WIG DF /r | VAESDECLAST xmm1, xmm2, xmm3/m128 | AVX512VL VAES | N16
  ops: w=reg r=vvvv r=rm | UInt128
-----
INSTRUCTION: EVEX.256.66.0F38.WIG DF /r | VAESDECLAST ymm1, ymm2, ymm3/m256 | AVX512VL VAES | N32
  ops: w=reg r=vvvv r=rm | Packed256_UInt128
-----
INSTRUCTION: EVEX.512.66.0F38.WIG DF /r | VAESDECLAST zmm1, zmm2, zmm3/m512 | AVX512F VAES | N64
  ops: w=reg r=vvvv r=rm | Packed512_UInt128
-----
INSTRUCTION: o16 0F 38 F0 /r | MOVBE r16, m16 | MOVBE
  ops: w=reg r=rm | UInt16
  flags: nfx
  gas: suffix=w
-----
INSTRUCTION: o32 0F 38 F0 /r | MOVBE r32, m32 | MOVBE
  ops: w=reg r=rm | UInt32
  flags: nfx
  gas: suffix=l
-----
INSTRUCTION: o64 0F 38 F0 /r | MOVBE r64, m64 | MOVBE
  ops: w=reg r=rm | UInt64
  flags: 64 nfx
  gas: suffix=q
-----
INSTRUCTION: F2 0F 38 F0 /r | CRC32 r32, r/m8 | SSE4_2
  ops: rw=reg r=rm | UInt8
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: F2 o64 0F 38 F0 /r | CRC32 r64, r/m8 | SSE4_2
  ops: rw=reg r=rm | UInt8
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=b
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o16 0F 38 F1 /r | MOVBE m16, r16 | MOVBE
  ops: w=rm r=reg | UInt16
  flags: nfx
  gas: suffix=w
-----
INSTRUCTION: o32 0F 38 F1 /r | MOVBE m32, r32 | MOVBE
  ops: w=rm r=reg | UInt32
  flags: nfx
  gas: suffix=l
-----
INSTRUCTION: o64 0F 38 F1 /r | MOVBE m64, r64 | MOVBE
  ops: w=rm r=reg | UInt64
  flags: 64 nfx
  gas: suffix=q
-----
INSTRUCTION: o16 F2 0F 38 F1 /r | CRC32 r32, r/m16 | SSE4_2
  ops: rw=reg r=rm | UInt16
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=w
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: o32 F2 0F 38 F1 /r | CRC32 r32, r/m32 | SSE4_2
  ops: rw=reg r=rm | UInt32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: F2 o64 0F 38 F1 /r | CRC32 r64, r/m64 | SSE4_2
  ops: rw=reg r=rm | UInt64
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: VEX.LZ.0F38.W0 F2 /r | ANDN r32a, r32b, r/m32 | BMI1
  ops: w=reg r=vvvv r=rm | UInt32
  rflags: u=ap w=sz 0=oc
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: VEX.LZ.0F38.W1 F2 /r | ANDN r64a, r64b, r/m64 | BMI1
  ops: w=reg r=vvvv r=rm | UInt64
  rflags: u=ap w=sz 0=oc
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: VEX.LZ.0F38.W0 F3 /1 | BLSR r32, r/m32 | BMI1
  ops: w=vvvv r=rm | UInt32
  rflags: u=ap w=szc 0=o
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: VEX.LZ.0F38.W1 F3 /1 | BLSR r64, r/m64 | BMI1
  ops: w=vvvv r=rm | UInt64
  rflags: u=ap w=szc 0=o
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: VEX.LZ.0F38.W0 F3 /2 | BLSMSK r32, r/m32 | BMI1
  ops: w=vvvv r=rm | UInt32
  rflags: u=ap w=sc 0=oz
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: VEX.LZ.0F38.W1 F3 /2 | BLSMSK r64, r/m64 | BMI1
  ops: w=vvvv r=rm | UInt64
  rflags: u=ap w=sc 0=oz
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: VEX.LZ.0F38.W0 F3 /3 | BLSI r32, r/m32 | BMI1
  ops: w=vvvv r=rm | UInt32
  rflags: u=ap w=szc 0=o
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: VEX.LZ.0F38.W1 F3 /3 | BLSI r64, r/m64 | BMI1
  ops: w=vvvv r=rm | UInt64
  rflags: u=ap w=szc 0=o
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: VEX.LZ.0F38.W0 F5 /r | BZHI r32a, r/m32, r32b | BMI2
  ops: w=reg r=rm r=vvvv | UInt32
  implied: last-gpr-8
  rflags: u=ap w=szc 0=o
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: VEX.LZ.0F38.W1 F5 /r | BZHI r64a, r/m64, r64b | BMI2
  ops: w=reg r=rm r=vvvv | UInt64
  implied: last-gpr-8
  rflags: u=ap w=szc 0=o
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: 66 0F 38 F5 /r | WRUSSD m32, r32 | CET_SS
  ops: w=rm r=reg | UInt32
  flags: cpl0 no-rm no-v86
-----
INSTRUCTION: 66 o64 0F 38 F5 /r | WRUSSQ m64, r64 | CET_SS
  ops: w=rm r=reg | UInt64
  flags: 64 cpl0 no-rm no-v86
-----
INSTRUCTION: VEX.LZ.F3.0F38.W0 F5 /r | PEXT r32a, r32b, r/m32 | BMI2
  ops: w=reg cr=vvvv r=rm | UInt32
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: VEX.LZ.F3.0F38.W1 F5 /r | PEXT r64a, r64b, r/m64 | BMI2
  ops: w=reg cr=vvvv r=rm | UInt64
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: VEX.LZ.F2.0F38.W0 F5 /r | PDEP r32a, r32b, r/m32 | BMI2
  ops: w=reg cr=vvvv r=rm | UInt32
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: VEX.LZ.F2.0F38.W1 F5 /r | PDEP r64a, r64b, r/m64 | BMI2
  ops: w=reg cr=vvvv r=rm | UInt64
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: NP 0F 38 F6 /r | WRSSD m32, r32 | CET_SS
  ops: w=rm r=reg | UInt32
  flags: no-rm no-v86
-----
INSTRUCTION: NP o64 0F 38 F6 /r | WRSSQ m64, r64 | CET_SS
  ops: w=rm r=reg | UInt64
  flags: 64 no-rm no-v86
-----
INSTRUCTION: 66 0F 38 F6 /r | ADCX r32, r/m32 | ADX
  ops: rw=reg r=rm | UInt32
  rflags: r=c w=c
  gas: suffix=l
-----
INSTRUCTION: 66 o64 0F 38 F6 /r | ADCX r64, r/m64 | ADX
  ops: rw=reg r=rm | UInt64
  rflags: r=c w=c
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: F3 0F 38 F6 /r | ADOX r32, r/m32 | ADX
  ops: rw=reg r=rm | UInt32
  rflags: r=o w=o
  gas: suffix=l
-----
INSTRUCTION: F3 o64 0F 38 F6 /r | ADOX r64, r/m64 | ADX
  ops: rw=reg r=rm | UInt64
  rflags: r=o w=o
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: VEX.LZ.F2.0F38.W0 F6 /r | MULX r32a, r32b, r/m32 | BMI2
  ops: w=reg w=vvvv r=rm | UInt32
  implied: r=edx
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: VEX.LZ.F2.0F38.W1 F6 /r | MULX r64a, r64b, r/m64 | BMI2
  ops: w=reg w=vvvv r=rm | UInt64
  implied: r=rdx
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: VEX.LZ.0F38.W0 F7 /r | BEXTR r32a, r/m32, r32b | BMI1
  ops: w=reg r=rm r=vvvv | UInt32
  implied: last-gpr-16
  rflags: u=sap w=z 0=oc
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: VEX.LZ.0F38.W1 F7 /r | BEXTR r64a, r/m64, r64b | BMI1
  ops: w=reg r=rm r=vvvv | UInt64
  implied: last-gpr-16
  rflags: u=sap w=z 0=oc
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: VEX.LZ.66.0F38.W0 F7 /r | SHLX r32a, r/m32, r32b | BMI2
  ops: w=reg r=rm r=vvvv | UInt32
  implied: last-gpr-8
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: VEX.LZ.66.0F38.W1 F7 /r | SHLX r64a, r/m64, r64b | BMI2
  ops: w=reg r=rm r=vvvv | UInt64
  implied: last-gpr-8
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: VEX.LZ.F3.0F38.W0 F7 /r | SARX r32a, r/m32, r32b | BMI2
  ops: w=reg r=rm r=vvvv | Int32
  implied: last-gpr-8
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: VEX.LZ.F3.0F38.W1 F7 /r | SARX r64a, r/m64, r64b | BMI2
  ops: w=reg r=rm r=vvvv | Int64
  implied: last-gpr-8
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: VEX.LZ.F2.0F38.W0 F7 /r | SHRX r32a, r/m32, r32b | BMI2
  ops: w=reg r=rm r=vvvv | UInt32
  implied: last-gpr-8
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: VEX.LZ.F2.0F38.W1 F7 /r | SHRX r64a, r/m64, r64b | BMI2
  ops: w=reg r=rm r=vvvv | UInt64
  implied: last-gpr-8
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: a16 66 0F 38 F8 /r | MOVDIR64B r16, m512 | MOVDIR64B
  ops: r=reg;mem r=rm | UInt512
  implied: w=[es:op0-reg=default]
  flags: 16 32
-----
INSTRUCTION: a32 66 0F 38 F8 /r | MOVDIR64B r32, m512 | MOVDIR64B
  ops: r=reg;mem r=rm | UInt512
  implied: w=[es:op0-reg=default]
-----
INSTRUCTION: a64 66 0F 38 F8 /r | MOVDIR64B r64, m512 | MOVDIR64B
  ops: r=reg;mem r=rm | UInt512
  implied: w=[es:op0-reg=default]
  flags: 64
-----
INSTRUCTION: a16 F3 0F 38 F8 !(11):rrr:bbb | ENQCMDS r16, m512 | ENQCMD
  ops: r=reg;mem r=rm | UInt512
  implied: w=[es:op0-reg=default]
  rflags: w=z 0=osacp
  flags: 16 32 cpl0 intel-may-vm-exit tdx-non-root-ud tsx-impl-abort
-----
INSTRUCTION: a32 F3 0F 38 F8 !(11):rrr:bbb | ENQCMDS r32, m512 | ENQCMD
  ops: r=reg;mem r=rm | UInt512
  implied: w=[es:op0-reg=default]
  rflags: w=z 0=osacp
  flags: cpl0 intel-may-vm-exit tdx-non-root-ud tsx-impl-abort
-----
INSTRUCTION: a64 F3 0F 38 F8 !(11):rrr:bbb | ENQCMDS r64, m512 | ENQCMD
  ops: r=reg;mem r=rm | UInt512
  implied: w=[es:op0-reg=default]
  rflags: w=z 0=osacp
  flags: 64 cpl0 intel-may-vm-exit tdx-non-root-ud tsx-impl-abort
-----
INSTRUCTION: a16 F2 0F 38 F8 !(11):rrr:bbb | ENQCMD r16, m512 | ENQCMD
  ops: r=reg;mem r=rm | UInt512
  implied: w=[es:op0-reg=default]
  rflags: w=z 0=osacp
  flags: 16 32 intel-may-vm-exit tdx-non-root-ud tsx-impl-abort
-----
INSTRUCTION: a32 F2 0F 38 F8 !(11):rrr:bbb | ENQCMD r32, m512 | ENQCMD
  ops: r=reg;mem r=rm | UInt512
  implied: w=[es:op0-reg=default]
  rflags: w=z 0=osacp
  flags: intel-may-vm-exit tdx-non-root-ud tsx-impl-abort
-----
INSTRUCTION: a64 F2 0F 38 F8 !(11):rrr:bbb | ENQCMD r64, m512 | ENQCMD
  ops: r=reg;mem r=rm | UInt512
  implied: w=[es:op0-reg=default]
  rflags: w=z 0=osacp
  flags: 64 intel-may-vm-exit tdx-non-root-ud tsx-impl-abort
-----
INSTRUCTION: NP 0F 38 F9 /r | MOVDIRI m32, r32 | MOVDIRI
  ops: w=rm r=reg | UInt32
  gas: suffix=l
-----
INSTRUCTION: NP o64 0F 38 F9 /r | MOVDIRI m64, r64 | MOVDIRI
  ops: w=rm r=reg | UInt64
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: VEX.256.66.0F3A.W1 00 /r ib | VPERMQ ymm1, ymm2/m256, imm8 | AVX2
  ops: w=reg r=rm r=imm | Packed256_UInt64
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 00 /r ib | VPERMQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=reg r=rm r=imm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 00 /r ib | VPERMQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8 | AVX512F | N64b8
  ops: wvmm=reg r=rm r=imm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: VEX.256.66.0F3A.W1 01 /r ib | VPERMPD ymm1, ymm2/m256, imm8 | AVX2
  ops: w=reg r=rm r=imm | Packed256_Float64
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 01 /r ib | VPERMPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=reg r=rm r=imm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 01 /r ib | VPERMPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8 | AVX512F | N64b8
  ops: wvmm=reg r=rm r=imm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.128.66.0F3A.W0 02 /r ib | VPBLENDD xmm1, xmm2, xmm3/m128, imm8 | AVX2
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.66.0F3A.W0 02 /r ib | VPBLENDD ymm1, ymm2, ymm3/m256, imm8 | AVX2
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt32
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 03 /r ib | VALIGND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8 | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 03 /r ib | VALIGND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 03 /r ib | VALIGND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8 | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 03 /r ib | VALIGNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8 | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 03 /r ib | VALIGNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 03 /r ib | VALIGNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8 | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: VEX.128.66.0F3A.W0 04 /r ib | VPERMILPS xmm1, xmm2/m128, imm8 | AVX
  ops: w=reg r=rm r=imm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.W0 04 /r ib | VPERMILPS ymm1, ymm2/m256, imm8 | AVX
  ops: w=reg r=rm r=imm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 04 /r ib | VPERMILPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8 | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm r=imm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 04 /r ib | VPERMILPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: w=reg r=rm r=imm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 04 /r ib | VPERMILPS zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8 | AVX512F | N64b4
  ops: wvmm=reg r=rm r=imm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.W0 05 /r ib | VPERMILPD xmm1, xmm2/m128, imm8 | AVX
  ops: w=reg r=rm r=imm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W0 05 /r ib | VPERMILPD ymm1, ymm2/m256, imm8 | AVX
  ops: w=reg r=rm r=imm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 05 /r ib | VPERMILPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8 | AVX512VL AVX512F | N16b8
  ops: w=reg r=rm r=imm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 05 /r ib | VPERMILPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=reg r=rm r=imm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 05 /r ib | VPERMILPD zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8 | AVX512F | N64b8
  ops: wvmm=reg r=rm r=imm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W0 06 /r ib | VPERM2F128 ymm1, ymm2, ymm3/m256, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float128
-----
INSTRUCTION: 66 0F 3A 08 /r ib | ROUNDPS xmm1, xmm2/m128, imm8 | SSE4_1
  ops: w=reg r=rm r=imm | Packed128_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.WIG 08 /r ib | VROUNDPS xmm1, xmm2/m128, imm8 | AVX
  ops: w=reg r=rm r=imm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.WIG 08 /r ib | VROUNDPS ymm1, ymm2/m256, imm8 | AVX
  ops: w=reg r=rm r=imm | Packed256_Float32
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 08 /r ib | VRNDSCALEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8 | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm r=imm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 08 /r ib | VRNDSCALEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: w=reg r=rm r=imm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 08 /r ib | VRNDSCALEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8 | AVX512F | N64b4
  ops: wvmm=reg r=rm r=imm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: 66 0F 3A 09 /r ib | ROUNDPD xmm1, xmm2/m128, imm8 | SSE4_1
  ops: w=reg r=rm r=imm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F3A.WIG 09 /r ib | VROUNDPD xmm1, xmm2/m128, imm8 | AVX
  ops: w=reg r=rm r=imm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.WIG 09 /r ib | VROUNDPD ymm1, ymm2/m256, imm8 | AVX
  ops: w=reg r=rm r=imm | Packed256_Float64
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 09 /r ib | VRNDSCALEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8 | AVX512VL AVX512F | N16b8
  ops: w=reg r=rm r=imm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 09 /r ib | VRNDSCALEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=reg r=rm r=imm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 09 /r ib | VRNDSCALEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8 | AVX512F | N64b8
  ops: wvmm=reg r=rm r=imm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: 66 0F 3A 0A /r ib | ROUNDSS xmm1, xmm2/m32, imm8 | SSE4_1
  ops: rw=reg r=rm r=imm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F3A.WIG 0A /r ib | VROUNDSS xmm1, xmm2, xmm3/m32, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.66.0F3A.W0 0A /r ib | VRNDSCALESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8 | AVX512F | N4
  ops: w=reg r=vvvv r=rm r=imm | Float32
-----
INSTRUCTION: 66 0F 3A 0B /r ib | ROUNDSD xmm1, xmm2/m64, imm8 | SSE4_1
  ops: rw=reg r=rm r=imm | Float64
-----
INSTRUCTION: VEX.LIG.66.0F3A.WIG 0B /r ib | VROUNDSD xmm1, xmm2, xmm3/m64, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.66.0F3A.W1 0B /r ib | VRNDSCALESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8 | AVX512F | N8
  ops: w=reg r=vvvv r=rm r=imm | Float64
-----
INSTRUCTION: 66 0F 3A 0C /r ib | BLENDPS xmm1, xmm2/m128, imm8 | SSE4_1
  ops: rw=reg r=rm r=imm | Packed128_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.WIG 0C /r ib | VBLENDPS xmm1, xmm2, xmm3/m128, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.WIG 0C /r ib | VBLENDPS ymm1, ymm2, ymm3/m256, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float32
-----
INSTRUCTION: 66 0F 3A 0D /r ib | BLENDPD xmm1, xmm2/m128, imm8 | SSE4_1
  ops: rw=reg r=rm r=imm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F3A.WIG 0D /r ib | VBLENDPD xmm1, xmm2, xmm3/m128, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.WIG 0D /r ib | VBLENDPD ymm1, ymm2, ymm3/m256, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float64
-----
INSTRUCTION: 66 0F 3A 0E /r ib | PBLENDW xmm1, xmm2/m128, imm8 | SSE4_1
  ops: rw=reg r=rm r=imm | Packed128_UInt16
-----
INSTRUCTION: VEX.128.66.0F3A.WIG 0E /r ib | VPBLENDW xmm1, xmm2, xmm3/m128, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.66.0F3A.WIG 0E /r ib | VPBLENDW ymm1, ymm2, ymm3/m256, imm8 | AVX2
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt16
-----
INSTRUCTION: NP 0F 3A 0F /r ib | PALIGNR mm1, mm2/m64, imm8 | SSSE3
  ops: rw=reg r=rm r=imm | Packed64_UInt8
  flags: tsx-impl-abort
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 66 0F 3A 0F /r ib | PALIGNR xmm1, xmm2/m128, imm8 | SSSE3
  ops: rw=reg r=rm r=imm | Packed128_UInt8
-----
INSTRUCTION: VEX.128.66.0F3A.WIG 0F /r ib | VPALIGNR xmm1, xmm2, xmm3/m128, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.66.0F3A.WIG 0F /r ib | VPALIGNR ymm1, ymm2, ymm3/m256, imm8 | AVX2
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt8
-----
INSTRUCTION: EVEX.128.66.0F3A.WIG 0F /r ib | VPALIGNR xmm1 {k1}{z}, xmm2, xmm3/m128, imm8 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F3A.WIG 0F /r ib | VPALIGNR ymm1 {k1}{z}, ymm2, ymm3/m256, imm8 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F3A.WIG 0F /r ib | VPALIGNR zmm1 {k1}{z}, zmm2, zmm3/m512, imm8 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_UInt8
-----
INSTRUCTION: 66 0F 3A 14 /r ib | PEXTRB r32/m8, xmm2, imm8 | SSE4_1
  ops: w=rm r=reg r=imm | UInt8
  masm: flags=force-size=default
-----
INSTRUCTION: 66 o64 0F 3A 14 /r ib | PEXTRB r64/m8, xmm2, imm8 | SSE4_1
  ops: w=rm r=reg r=imm | UInt8
  flags: 64 asm-ig-mem
  intel: reg32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F3A.W0 14 /r ib | VPEXTRB r32/m8, xmm2, imm8 | AVX
  ops: w=rm r=reg r=imm | UInt8
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F3A.W1 14 /r ib | VPEXTRB r64/m8, xmm2, imm8 | AVX
  ops: w=rm r=reg r=imm | UInt8
  flags: 64 asm-ig-mem
  intel: reg32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 14 /r ib | VPEXTRB r32/m8, xmm2, imm8 | AVX512BW | N1
  ops: w=rm r=reg r=imm | UInt8
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 14 /r ib | VPEXTRB r64/m8, xmm2, imm8 | AVX512BW | N1
  ops: w=rm r=reg r=imm | UInt8
  flags: 64 asm-ig-mem
  intel: reg32
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 3A 15 /r ib | PEXTRW r32/m16, xmm, imm8 | SSE4_1
  ops: w=rm r=reg r=imm | UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: 66 o64 0F 3A 15 /r ib | PEXTRW r64/m16, xmm, imm8 | SSE4_1
  ops: w=rm r=reg r=imm | UInt16
  flags: 64
  intel: reg32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F3A.W0 15 /r ib | VPEXTRW r32/m16, xmm2, imm8 | AVX
  ops: w=rm r=reg r=imm | UInt16
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F3A.W1 15 /r ib | VPEXTRW r64/m16, xmm2, imm8 | AVX
  ops: w=rm r=reg r=imm | UInt16
  flags: 64 asm-ig-mem
  intel: reg32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 15 /r ib | VPEXTRW r32/m16, xmm2, imm8 | AVX512BW | N2
  ops: w=rm r=reg r=imm | UInt16
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 15 /r ib | VPEXTRW r64/m16, xmm2, imm8 | AVX512BW | N2
  ops: w=rm r=reg r=imm | UInt16
  flags: 64 asm-ig-mem
  intel: reg32
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 3A 16 /r ib | PEXTRD r/m32, xmm2, imm8 | SSE4_1
  ops: w=rm r=reg r=imm | UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: 66 o64 0F 3A 16 /r ib | PEXTRQ r/m64, xmm2, imm8 | SSE4_1
  ops: w=rm r=reg r=imm | UInt64
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F3A.W0 16 /r ib | VPEXTRD r/m32, xmm2, imm8 | AVX
  ops: w=rm r=reg r=imm | UInt32
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F3A.W1 16 /r ib | VPEXTRQ r/m64, xmm2, imm8 | AVX
  ops: w=rm r=reg r=imm | UInt64
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 16 /r ib | VPEXTRD r/m32, xmm2, imm8 | AVX512DQ | N4
  ops: w=rm r=reg r=imm | UInt32
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 16 /r ib | VPEXTRQ r/m64, xmm2, imm8 | AVX512DQ | N8
  ops: w=rm r=reg r=imm | UInt64
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 3A 17 /r ib | EXTRACTPS r/m32, xmm1, imm8 | SSE4_1
  ops: w=rm r=reg r=imm | Float32
  masm: flags=force-size=always
-----
INSTRUCTION: 66 o64 0F 3A 17 /r ib | EXTRACTPS r64/m32, xmm1, imm8 | SSE4_1
  ops: w=rm r=reg r=imm | Float32
  flags: 64 asm-ig-mem
  intel: reg32
  masm: flags=force-size=always reg32
-----
INSTRUCTION: VEX.128.66.0F3A.W0 17 /r ib | VEXTRACTPS r/m32, xmm1, imm8 | AVX
  ops: w=rm r=reg r=imm | Float32
  flags: wig32
  masm: flags=force-size=always
-----
INSTRUCTION: VEX.128.66.0F3A.W1 17 /r ib | VEXTRACTPS r64/m32, xmm1, imm8 | AVX
  ops: w=rm r=reg r=imm | Float32
  flags: 64 asm-ig-mem
  intel: reg32
  masm: flags=force-size=always reg32
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 17 /r ib | VEXTRACTPS r/m32, xmm1, imm8 | AVX512F | N4
  ops: w=rm r=reg r=imm | Float32
  flags: wig32
  masm: flags=force-size=always
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 17 /r ib | VEXTRACTPS r64/m32, xmm1, imm8 | AVX512F | N4
  ops: w=rm r=reg r=imm | Float32
  flags: 64 asm-ig-mem
  intel: reg32
  masm: flags=force-size=always reg32
-----
INSTRUCTION: VEX.256.66.0F3A.W0 18 /r ib | VINSERTF128 ymm1, ymm2, xmm3/m128, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Float128
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 18 /r ib | VINSERTF32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8 | AVX512VL AVX512F | N16
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 18 /r ib | VINSERTF32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8 | AVX512F | N16
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 18 /r ib | VINSERTF64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8 | AVX512VL AVX512DQ | N16
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 18 /r ib | VINSERTF64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8 | AVX512DQ | N16
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed128_Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F3A.W0 19 /r ib | VEXTRACTF128 xmm1/m128, ymm2, imm8 | AVX
  ops: w=rm r=reg r=imm | Float128
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 19 /r ib | VEXTRACTF32X4 xmm1/m128 {k1}{z}, ymm2, imm8 | AVX512VL AVX512F | N16
  ops: w=rm r=reg r=imm | Packed128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 19 /r ib | VEXTRACTF32X4 xmm1/m128 {k1}{z}, zmm2, imm8 | AVX512F | N16
  ops: w=rm r=reg r=imm | Packed128_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 19 /r ib | VEXTRACTF64X2 xmm1/m128 {k1}{z}, ymm2, imm8 | AVX512VL AVX512DQ | N16
  ops: w=rm r=reg r=imm | Packed128_Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 19 /r ib | VEXTRACTF64X2 xmm1/m128 {k1}{z}, zmm2, imm8 | AVX512DQ | N16
  ops: w=rm r=reg r=imm | Packed128_Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 1A /r ib | VINSERTF32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8 | AVX512DQ | N32
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed256_Float32
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 1A /r ib | VINSERTF64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8 | AVX512F | N32
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed256_Float64
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 1B /r ib | VEXTRACTF32X8 ymm1/m256 {k1}{z}, zmm2, imm8 | AVX512DQ | N32
  ops: w=rm r=reg r=imm | Packed256_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 1B /r ib | VEXTRACTF64X4 ymm1/m256 {k1}{z}, zmm2, imm8 | AVX512F | N32
  ops: w=rm r=reg r=imm | Packed256_Float64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F3A.W0 1D /r ib | VCVTPS2PH xmm1/m64, xmm2, imm8 | F16C
  ops: w=rm r=reg r=imm | Packed64_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F3A.W0 1D /r ib | VCVTPS2PH xmm1/m128, ymm2, imm8 | F16C
  ops: w=rm r=reg r=imm | Packed128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 1D /r ib | VCVTPS2PH xmm1/m64 {k1}{z}, xmm2, imm8 | AVX512VL AVX512F | N8
  ops: w=rm r=reg r=imm | Packed64_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 1D /r ib | VCVTPS2PH xmm1/m128 {k1}{z}, ymm2, imm8 | AVX512VL AVX512F | N16
  ops: w=rm r=reg r=imm | Packed128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 1D /r ib | VCVTPS2PH ymm1/m256 {k1}{z}, zmm2{sae}, imm8 | AVX512F | N32
  ops: w=rm r=reg r=imm | Packed256_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 1E /r ib | VPCMPUD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8 | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt32 Broadcast128_UInt32
  flags: pseudo=vpcmpud implied-z
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 1E /r ib | VPCMPUD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt32 Broadcast256_UInt32
  flags: pseudo=vpcmpud implied-z
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 1E /r ib | VPCMPUD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8 | AVX512F | N64b4
  ops: w=reg r=vvvv r=rm r=imm | Packed512_UInt32 Broadcast512_UInt32
  flags: pseudo=vpcmpud implied-z
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 1E /r ib | VPCMPUQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8 | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt64 Broadcast128_UInt64
  flags: pseudo=vpcmpuq implied-z
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 1E /r ib | VPCMPUQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt64 Broadcast256_UInt64
  flags: pseudo=vpcmpuq implied-z
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 1E /r ib | VPCMPUQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8 | AVX512F | N64b8
  ops: w=reg r=vvvv r=rm r=imm | Packed512_UInt64 Broadcast512_UInt64
  flags: pseudo=vpcmpuq implied-z
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 1F /r ib | VPCMPD k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8 | AVX512VL AVX512F | N16b4
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Int32 Broadcast128_Int32
  flags: pseudo=vpcmpd implied-z
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 1F /r ib | VPCMPD k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Int32 Broadcast256_Int32
  flags: pseudo=vpcmpd implied-z
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 1F /r ib | VPCMPD k1 {k2}, zmm2, zmm3/m512/m32bcst, imm8 | AVX512F | N64b4
  ops: w=reg r=vvvv r=rm r=imm | Packed512_Int32 Broadcast512_Int32
  flags: pseudo=vpcmpd implied-z
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 1F /r ib | VPCMPQ k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8 | AVX512VL AVX512F | N16b8
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Int64 Broadcast128_Int64
  flags: pseudo=vpcmpq implied-z
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 1F /r ib | VPCMPQ k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Int64 Broadcast256_Int64
  flags: pseudo=vpcmpq implied-z
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 1F /r ib | VPCMPQ k1 {k2}, zmm2, zmm3/m512/m64bcst, imm8 | AVX512F | N64b8
  ops: w=reg r=vvvv r=rm r=imm | Packed512_Int64 Broadcast512_Int64
  flags: pseudo=vpcmpq implied-z
-----
INSTRUCTION: 66 0F 3A 20 /r ib | PINSRB xmm1, r32/m8, imm8 | SSE4_1
  ops: rw=reg r=rm r=imm | UInt8
  implied: last-gpr-8
  masm: flags=force-size=default
-----
INSTRUCTION: 66 o64 0F 3A 20 /r ib | PINSRB xmm1, r64/m8, imm8 | SSE4_1
  ops: rw=reg r=rm r=imm | UInt8
  implied: last-gpr-8
  flags: 64 asm-ig-mem
  intel: reg32
  masm: flags=force-size=default
  nasm: reg32
-----
INSTRUCTION: VEX.128.66.0F3A.W0 20 /r ib | VPINSRB xmm1, xmm2, r32/m8, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | UInt8
  implied: last-gpr-8
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F3A.W1 20 /r ib | VPINSRB xmm1, xmm2, r64/m8, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | UInt8
  implied: last-gpr-8
  flags: 64 asm-ig-mem
  intel: reg32
  masm: flags=force-size=default reg32
  nasm: reg32
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 20 /r ib | VPINSRB xmm1, xmm2, r32/m8, imm8 | AVX512BW | N1
  ops: w=reg r=vvvv r=rm r=imm | UInt8
  implied: last-gpr-8
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 20 /r ib | VPINSRB xmm1, xmm2, r64/m8, imm8 | AVX512BW | N1
  ops: w=reg r=vvvv r=rm r=imm | UInt8
  implied: last-gpr-8
  flags: 64 asm-ig-mem
  intel: reg32
  masm: flags=force-size=default reg32
  nasm: reg32
-----
INSTRUCTION: 66 0F 3A 21 /r ib | INSERTPS xmm1, xmm2/m32, imm8 | SSE4_1
  ops: rw=reg r=rm r=imm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F3A.WIG 21 /r ib | VINSERTPS xmm1, xmm2, xmm3/m32, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 21 /r ib | VINSERTPS xmm1, xmm2, xmm3/m32, imm8 | AVX512F | N4
  ops: w=reg r=vvvv r=rm r=imm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: 66 0F 3A 22 /r ib | PINSRD xmm1, r/m32, imm8 | SSE4_1
  ops: rw=reg r=rm r=imm | UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: 66 o64 0F 3A 22 /r ib | PINSRQ xmm1, r/m64, imm8 | SSE4_1
  ops: rw=reg r=rm r=imm | UInt64
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F3A.W0 22 /r ib | VPINSRD xmm1, xmm2, r/m32, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | UInt32
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F3A.W1 22 /r ib | VPINSRQ xmm1, xmm2, r/m64, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | UInt64
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 22 /r ib | VPINSRD xmm1, xmm2, r/m32, imm8 | AVX512DQ | N4
  ops: w=reg r=vvvv r=rm r=imm | UInt32
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 22 /r ib | VPINSRQ xmm1, xmm2, r/m64, imm8 | AVX512DQ | N8
  ops: w=reg r=vvvv r=rm r=imm | UInt64
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 23 /r ib | VSHUFF32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 23 /r ib | VSHUFF32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8 | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 23 /r ib | VSHUFF64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 23 /r ib | VSHUFF64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8 | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 25 /r ib | VPTERNLOGD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8 | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm r=imm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 25 /r ib | VPTERNLOGD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm r=imm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 25 /r ib | VPTERNLOGD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8 | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm r=imm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 25 /r ib | VPTERNLOGQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8 | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm r=imm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 25 /r ib | VPTERNLOGQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm r=imm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 25 /r ib | VPTERNLOGQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8 | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm r=imm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 26 /r ib | VGETMANTPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8 | AVX512VL AVX512F | N16b4
  ops: w=reg r=rm r=imm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 26 /r ib | VGETMANTPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: w=reg r=rm r=imm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 26 /r ib | VGETMANTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8 | AVX512F | N64b4
  ops: wvmm=reg r=rm r=imm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 26 /r ib | VGETMANTPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8 | AVX512VL AVX512F | N16b8
  ops: w=reg r=rm r=imm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 26 /r ib | VGETMANTPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=reg r=rm r=imm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 26 /r ib | VGETMANTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8 | AVX512F | N64b8
  ops: wvmm=reg r=rm r=imm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: EVEX.LIG.66.0F3A.W0 27 /r ib | VGETMANTSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8 | AVX512F | N4
  ops: w=reg r=vvvv r=rm r=imm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F3A.W1 27 /r ib | VGETMANTSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8 | AVX512F | N8
  ops: w=reg r=vvvv r=rm r=imm | Float64
-----
INSTRUCTION: VEX.L0.66.0F3A.W0 30 /r ib | KSHIFTRB k1, k2, imm8 | AVX512DQ
  ops: w=reg r=rm r=imm
-----
INSTRUCTION: VEX.L0.66.0F3A.W1 30 /r ib | KSHIFTRW k1, k2, imm8 | AVX512F
  ops: w=reg r=rm r=imm
-----
INSTRUCTION: VEX.L0.66.0F3A.W0 31 /r ib | KSHIFTRD k1, k2, imm8 | AVX512BW
  ops: w=reg r=rm r=imm
-----
INSTRUCTION: VEX.L0.66.0F3A.W1 31 /r ib | KSHIFTRQ k1, k2, imm8 | AVX512BW
  ops: w=reg r=rm r=imm
-----
INSTRUCTION: VEX.L0.66.0F3A.W0 32 /r ib | KSHIFTLB k1, k2, imm8 | AVX512DQ
  ops: w=reg r=rm r=imm
-----
INSTRUCTION: VEX.L0.66.0F3A.W1 32 /r ib | KSHIFTLW k1, k2, imm8 | AVX512F
  ops: w=reg r=rm r=imm
-----
INSTRUCTION: VEX.L0.66.0F3A.W0 33 /r ib | KSHIFTLD k1, k2, imm8 | AVX512BW
  ops: w=reg r=rm r=imm
-----
INSTRUCTION: VEX.L0.66.0F3A.W1 33 /r ib | KSHIFTLQ k1, k2, imm8 | AVX512BW
  ops: w=reg r=rm r=imm
-----
INSTRUCTION: VEX.256.66.0F3A.W0 38 /r ib | VINSERTI128 ymm1, ymm2, xmm3/m128, imm8 | AVX2
  ops: w=reg r=vvvv r=rm r=imm | Int128
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 38 /r ib | VINSERTI32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8 | AVX512VL AVX512F | N16
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 38 /r ib | VINSERTI32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8 | AVX512F | N16
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed128_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 38 /r ib | VINSERTI64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8 | AVX512VL AVX512DQ | N16
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 38 /r ib | VINSERTI64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8 | AVX512DQ | N16
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed128_UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.256.66.0F3A.W0 39 /r ib | VEXTRACTI128 xmm1/m128, ymm2, imm8 | AVX2
  ops: w=rm r=reg r=imm | Int128
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 39 /r ib | VEXTRACTI32X4 xmm1/m128 {k1}{z}, ymm2, imm8 | AVX512VL AVX512F | N16
  ops: w=rm r=reg r=imm | Packed128_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 39 /r ib | VEXTRACTI32X4 xmm1/m128 {k1}{z}, zmm2, imm8 | AVX512F | N16
  ops: w=rm r=reg r=imm | Packed128_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 39 /r ib | VEXTRACTI64X2 xmm1/m128 {k1}{z}, ymm2, imm8 | AVX512VL AVX512DQ | N16
  ops: w=rm r=reg r=imm | Packed128_UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 39 /r ib | VEXTRACTI64X2 xmm1/m128 {k1}{z}, zmm2, imm8 | AVX512DQ | N16
  ops: w=rm r=reg r=imm | Packed128_UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 3A /r ib | VINSERTI32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8 | AVX512DQ | N32
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed256_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 3A /r ib | VINSERTI64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8 | AVX512F | N32
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed256_UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 3B /r ib | VEXTRACTI32X8 ymm1/m256 {k1}{z}, zmm2, imm8 | AVX512DQ | N32
  ops: w=rm r=reg r=imm | Packed256_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 3B /r ib | VEXTRACTI64X4 ymm1/m256 {k1}{z}, zmm2, imm8 | AVX512F | N32
  ops: w=rm r=reg r=imm | Packed256_UInt64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 3E /r ib | VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt8
  flags: pseudo=vpcmpub implied-z
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 3E /r ib | VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt8
  flags: pseudo=vpcmpub implied-z
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 3E /r ib | VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8 | AVX512BW | N64
  ops: w=reg r=vvvv r=rm r=imm | Packed512_UInt8
  flags: pseudo=vpcmpub implied-z
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 3E /r ib | VPCMPUW k1 {k2}, xmm2, xmm3/m128, imm8 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt16
  flags: pseudo=vpcmpuw implied-z
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 3E /r ib | VPCMPUW k1 {k2}, ymm2, ymm3/m256, imm8 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt16
  flags: pseudo=vpcmpuw implied-z
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 3E /r ib | VPCMPUW k1 {k2}, zmm2, zmm3/m512, imm8 | AVX512BW | N64
  ops: w=reg r=vvvv r=rm r=imm | Packed512_UInt16
  flags: pseudo=vpcmpuw implied-z
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 3F /r ib | VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Int8
  flags: pseudo=vpcmpb implied-z
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 3F /r ib | VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Int8
  flags: pseudo=vpcmpb implied-z
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 3F /r ib | VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8 | AVX512BW | N64
  ops: w=reg r=vvvv r=rm r=imm | Packed512_Int8
  flags: pseudo=vpcmpb implied-z
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 3F /r ib | VPCMPW k1 {k2}, xmm2, xmm3/m128, imm8 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Int16
  flags: pseudo=vpcmpw implied-z
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 3F /r ib | VPCMPW k1 {k2}, ymm2, ymm3/m256, imm8 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Int16
  flags: pseudo=vpcmpw implied-z
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 3F /r ib | VPCMPW k1 {k2}, zmm2, zmm3/m512, imm8 | AVX512BW | N64
  ops: w=reg r=vvvv r=rm r=imm | Packed512_Int16
  flags: pseudo=vpcmpw implied-z
-----
INSTRUCTION: 66 0F 3A 40 /r ib | DPPS xmm1, xmm2/m128, imm8 | SSE4_1
  ops: rw=reg r=rm r=imm | Packed128_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.WIG 40 /r ib | VDPPS xmm1, xmm2, xmm3/m128, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.WIG 40 /r ib | VDPPS ymm1, ymm2, ymm3/m256, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float32
-----
INSTRUCTION: 66 0F 3A 41 /r ib | DPPD xmm1, xmm2/m128, imm8 | SSE4_1
  ops: rw=reg r=rm r=imm | Packed128_Float64
-----
INSTRUCTION: VEX.128.66.0F3A.WIG 41 /r ib | VDPPD xmm1, xmm2, xmm3/m128, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float64
-----
INSTRUCTION: 66 0F 3A 42 /r ib | MPSADBW xmm1, xmm2/m128, imm8 | SSE4_1
  ops: rw=reg r=rm r=imm | Packed128_UInt8
-----
INSTRUCTION: VEX.128.66.0F3A.WIG 42 /r ib | VMPSADBW xmm1, xmm2, xmm3/m128, imm8 | AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.66.0F3A.WIG 42 /r ib | VMPSADBW ymm1, ymm2, ymm3/m256, imm8 | AVX2
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt8
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 42 /r ib | VDBPSADBW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8 | AVX512VL AVX512BW | N16
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt8
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 42 /r ib | VDBPSADBW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8 | AVX512VL AVX512BW | N32
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt8
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 42 /r ib | VDBPSADBW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8 | AVX512BW | N64
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_UInt8
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 43 /r ib | VSHUFI32X4 ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 43 /r ib | VSHUFI32X4 zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8 | AVX512F | N64b4
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 43 /r ib | VSHUFI64X2 ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 43 /r ib | VSHUFI64X2 zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8 | AVX512F | N64b8
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: 66 0F 3A 44 /r ib | PCLMULQDQ xmm1, xmm2/m128, imm8 | PCLMULQDQ
  ops: rw=reg r=rm r=imm | Packed128_UInt64
  flags: pseudo=pclmulqdq
-----
INSTRUCTION: VEX.128.66.0F3A.WIG 44 /r ib | VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8 | PCLMULQDQ AVX
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt64
  flags: pseudo=vpclmulqdq
-----
INSTRUCTION: VEX.256.66.0F3A.WIG 44 /r ib | VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8 | VPCLMULQDQ
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt64
  flags: pseudo=vpclmulqdq
-----
INSTRUCTION: EVEX.128.66.0F3A.WIG 44 /r ib | VPCLMULQDQ xmm1, xmm2, xmm3/m128, imm8 | AVX512VL VPCLMULQDQ | N16
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt64
  flags: pseudo=vpclmulqdq
-----
INSTRUCTION: EVEX.256.66.0F3A.WIG 44 /r ib | VPCLMULQDQ ymm1, ymm2, ymm3/m256, imm8 | AVX512VL VPCLMULQDQ | N32
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt64
  flags: pseudo=vpclmulqdq
-----
INSTRUCTION: EVEX.512.66.0F3A.WIG 44 /r ib | VPCLMULQDQ zmm1, zmm2, zmm3/m512, imm8 | AVX512F VPCLMULQDQ | N64
  ops: w=reg r=vvvv r=rm r=imm | Packed512_UInt64
  flags: pseudo=vpclmulqdq
-----
INSTRUCTION: VEX.256.66.0F3A.W0 46 /r ib | VPERM2I128 ymm1, ymm2, ymm3/m256, imm8 | AVX2
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt128
-----
INSTRUCTION: VEX.128.66.0F3A.W0 48 /r /is5 | VPERMIL2PS xmm1, xmm2, xmm3/m128, xmm4, imm4 | XOP
  ops: w=reg r=vvvv r=rm r=is r=imm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.W0 48 /r /is5 | VPERMIL2PS ymm1, ymm2, ymm3/m256, ymm4, imm4 | XOP
  ops: w=reg r=vvvv r=rm r=is r=imm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.W1 48 /r /is5 | VPERMIL2PS xmm1, xmm2, xmm3, xmm4/m128, imm4 | XOP
  ops: w=reg r=vvvv r=is r=rm r=imm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.W1 48 /r /is5 | VPERMIL2PS ymm1, ymm2, ymm3, ymm4/m256, imm4 | XOP
  ops: w=reg r=vvvv r=is r=rm r=imm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.W0 49 /r /is5 | VPERMIL2PD xmm1, xmm2, xmm3/m128, xmm4, imm4 | XOP
  ops: w=reg r=vvvv r=rm r=is r=imm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W0 49 /r /is5 | VPERMIL2PD ymm1, ymm2, ymm3/m256, ymm4, imm4 | XOP
  ops: w=reg r=vvvv r=rm r=is r=imm | Packed256_Float64
-----
INSTRUCTION: VEX.128.66.0F3A.W1 49 /r /is5 | VPERMIL2PD xmm1, xmm2, xmm3, xmm4/m128, imm4 | XOP
  ops: w=reg r=vvvv r=is r=rm r=imm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W1 49 /r /is5 | VPERMIL2PD ymm1, ymm2, ymm3, ymm4/m256, imm4 | XOP
  ops: w=reg r=vvvv r=is r=rm r=imm | Packed256_Float64
-----
INSTRUCTION: VEX.128.66.0F3A.W0 4A /r /is4 | VBLENDVPS xmm1, xmm2, xmm3/m128, xmm4 | AVX
  ops: w=reg r=vvvv r=rm r=is | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.W0 4A /r /is4 | VBLENDVPS ymm1, ymm2, ymm3/m256, ymm4 | AVX
  ops: w=reg r=vvvv r=rm r=is | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.W0 4B /r /is4 | VBLENDVPD xmm1, xmm2, xmm3/m128, xmm4 | AVX
  ops: w=reg r=vvvv r=rm r=is | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W0 4B /r /is4 | VBLENDVPD ymm1, ymm2, ymm3/m256, ymm4 | AVX
  ops: w=reg r=vvvv r=rm r=is | Packed256_Float64
-----
INSTRUCTION: VEX.128.66.0F3A.W0 4C /r /is4 | VPBLENDVB xmm1, xmm2, xmm3/m128, xmm4 | AVX
  ops: w=reg r=vvvv r=rm r=is | Packed128_UInt8
-----
INSTRUCTION: VEX.256.66.0F3A.W0 4C /r /is4 | VPBLENDVB ymm1, ymm2, ymm3/m256, ymm4 | AVX2
  ops: w=reg r=vvvv r=rm r=is | Packed256_UInt8
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 50 /r ib | VRANGEPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8 | AVX512VL AVX512DQ | N16b4
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 50 /r ib | VRANGEPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8 | AVX512VL AVX512DQ | N32b4
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 50 /r ib | VRANGEPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8 | AVX512DQ | N64b4
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 50 /r ib | VRANGEPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8 | AVX512VL AVX512DQ | N16b8
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 50 /r ib | VRANGEPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8 | AVX512VL AVX512DQ | N32b8
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 50 /r ib | VRANGEPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8 | AVX512DQ | N64b8
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: EVEX.LIG.66.0F3A.W0 51 /r ib | VRANGESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8 | AVX512DQ | N4
  ops: w=reg r=vvvv r=rm r=imm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F3A.W1 51 /r ib | VRANGESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8 | AVX512DQ | N8
  ops: w=reg r=vvvv r=rm r=imm | Float64
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 54 /r ib | VFIXUPIMMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8 | AVX512VL AVX512F | N16b4
  ops: rw=reg r=vvvv r=rm r=imm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 54 /r ib | VFIXUPIMMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8 | AVX512VL AVX512F | N32b4
  ops: rw=reg r=vvvv r=rm r=imm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 54 /r ib | VFIXUPIMMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8 | AVX512F | N64b4
  ops: rwvmm=reg r=vvvv r=rm r=imm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 54 /r ib | VFIXUPIMMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8 | AVX512VL AVX512F | N16b8
  ops: rw=reg r=vvvv r=rm r=imm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 54 /r ib | VFIXUPIMMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8 | AVX512VL AVX512F | N32b8
  ops: rw=reg r=vvvv r=rm r=imm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 54 /r ib | VFIXUPIMMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8 | AVX512F | N64b8
  ops: rwvmm=reg r=vvvv r=rm r=imm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: EVEX.LIG.66.0F3A.W0 55 /r ib | VFIXUPIMMSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8 | AVX512F | N4
  ops: rw=reg r=vvvv r=rm r=imm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F3A.W1 55 /r ib | VFIXUPIMMSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8 | AVX512F | N8
  ops: rw=reg r=vvvv r=rm r=imm | Float64
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 56 /r ib | VREDUCEPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8 | AVX512VL AVX512DQ | N16b4
  ops: w=reg r=rm r=imm | Packed128_Float32 Broadcast128_Float32
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 56 /r ib | VREDUCEPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8 | AVX512VL AVX512DQ | N32b4
  ops: w=reg r=rm r=imm | Packed256_Float32 Broadcast256_Float32
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 56 /r ib | VREDUCEPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8 | AVX512DQ | N64b4
  ops: wvmm=reg r=rm r=imm | Packed512_Float32 Broadcast512_Float32
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 56 /r ib | VREDUCEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8 | AVX512VL AVX512DQ | N16b8
  ops: w=reg r=rm r=imm | Packed128_Float64 Broadcast128_Float64
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 56 /r ib | VREDUCEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8 | AVX512VL AVX512DQ | N32b8
  ops: w=reg r=rm r=imm | Packed256_Float64 Broadcast256_Float64
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 56 /r ib | VREDUCEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8 | AVX512DQ | N64b8
  ops: wvmm=reg r=rm r=imm | Packed512_Float64 Broadcast512_Float64
-----
INSTRUCTION: EVEX.LIG.66.0F3A.W0 57 /r ib | VREDUCESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8 | AVX512DQ | N4
  ops: w=reg r=vvvv r=rm r=imm | Float32
-----
INSTRUCTION: EVEX.LIG.66.0F3A.W1 57 /r ib | VREDUCESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8 | AVX512DQ | N8
  ops: w=reg r=vvvv r=rm r=imm | Float64
-----
INSTRUCTION: VEX.128.66.0F3A.W0 5C /r /is4 | VFMADDSUBPS xmm1, xmm2, xmm3/m128, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.W0 5C /r /is4 | VFMADDSUBPS ymm1, ymm2, ymm3/m256, ymm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.W1 5C /r /is4 | VFMADDSUBPS xmm1, xmm2, xmm3, xmm4/m128 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.W1 5C /r /is4 | VFMADDSUBPS ymm1, ymm2, ymm3, ymm4/m256 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.W0 5D /r /is4 | VFMADDSUBPD xmm1, xmm2, xmm3/m128, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W0 5D /r /is4 | VFMADDSUBPD ymm1, ymm2, ymm3/m256, ymm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed256_Float64
-----
INSTRUCTION: VEX.128.66.0F3A.W1 5D /r /is4 | VFMADDSUBPD xmm1, xmm2, xmm3, xmm4/m128 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W1 5D /r /is4 | VFMADDSUBPD ymm1, ymm2, ymm3, ymm4/m256 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed256_Float64
-----
INSTRUCTION: VEX.128.66.0F3A.W0 5E /r /is4 | VFMSUBADDPS xmm1, xmm2, xmm3/m128, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.W0 5E /r /is4 | VFMSUBADDPS ymm1, ymm2, ymm3/m256, ymm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.W1 5E /r /is4 | VFMSUBADDPS xmm1, xmm2, xmm3, xmm4/m128 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.W1 5E /r /is4 | VFMSUBADDPS ymm1, ymm2, ymm3, ymm4/m256 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.W0 5F /r /is4 | VFMSUBADDPD xmm1, xmm2, xmm3/m128, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W0 5F /r /is4 | VFMSUBADDPD ymm1, ymm2, ymm3/m256, ymm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed256_Float64
-----
INSTRUCTION: VEX.128.66.0F3A.W1 5F /r /is4 | VFMSUBADDPD xmm1, xmm2, xmm3, xmm4/m128 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W1 5F /r /is4 | VFMSUBADDPD ymm1, ymm2, ymm3, ymm4/m256 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed256_Float64
-----
INSTRUCTION: 66 0F 3A 60 /r ib | PCMPESTRM xmm1, xmm2/m128, imm8 | SSE4_2
  ops: r=reg r=rm r=imm | Packed128_UInt8
  implied: r=eax;edx w=xmm0
  rflags: w=oszc 0=ap
-----
INSTRUCTION: 66 o64 0F 3A 60 /r ib | PCMPESTRM64 xmm1, xmm2/m128, imm8 | SSE4_2
  ops: r=reg r=rm r=imm | Packed128_UInt8
  implied: r=rax;rdx w=xmm0
  rflags: w=oszc 0=ap
  flags: 64
  gas: mnemonic=pcmpestrm flags=force-suffix suffix=q
-----
INSTRUCTION: VEX.128.66.0F3A.W0 60 /r ib | VPCMPESTRM xmm1, xmm2/m128, imm8 | AVX
  ops: r=reg r=rm r=imm | Packed128_UInt8
  implied: r=eax;edx w=xmm0
  rflags: w=oszc 0=ap
  flags: wig32
-----
INSTRUCTION: VEX.128.66.0F3A.W1 60 /r ib | VPCMPESTRM64 xmm1, xmm2/m128, imm8 | AVX
  ops: r=reg r=rm r=imm | Packed128_UInt8
  implied: r=rax;rdx w=xmm0
  rflags: w=oszc 0=ap
  flags: 64
  gas: mnemonic=vpcmpestrm flags=force-suffix suffix=q
-----
INSTRUCTION: 66 0F 3A 61 /r ib | PCMPESTRI xmm1, xmm2/m128, imm8 | SSE4_2
  ops: r=reg r=rm r=imm | Packed128_UInt8
  implied: r=eax;edx w=ecx
  rflags: w=oszc 0=ap
-----
INSTRUCTION: 66 o64 0F 3A 61 /r ib | PCMPESTRI64 xmm1, xmm2/m128, imm8 | SSE4_2
  ops: r=reg r=rm r=imm | Packed128_UInt8
  implied: r=rax;rdx w=ecx
  rflags: w=oszc 0=ap
  flags: 64
  gas: mnemonic=pcmpestri flags=force-suffix suffix=q
-----
INSTRUCTION: VEX.128.66.0F3A.W0 61 /r ib | VPCMPESTRI xmm1, xmm2/m128, imm8 | AVX
  ops: r=reg r=rm r=imm | Packed128_UInt8
  implied: r=eax;edx w=ecx
  rflags: w=oszc 0=ap
  flags: wig32
-----
INSTRUCTION: VEX.128.66.0F3A.W1 61 /r ib | VPCMPESTRI64 xmm1, xmm2/m128, imm8 | AVX
  ops: r=reg r=rm r=imm | Packed128_UInt8
  implied: r=rax;rdx w=ecx
  rflags: w=oszc 0=ap
  flags: 64
  gas: mnemonic=vpcmpestri flags=force-suffix suffix=q
-----
INSTRUCTION: 66 0F 3A 62 /r ib | PCMPISTRM xmm1, xmm2/m128, imm8 | SSE4_2
  ops: r=reg r=rm r=imm | Packed128_UInt8
  implied: w=xmm0
  rflags: w=oszc 0=ap
-----
INSTRUCTION: VEX.128.66.0F3A.WIG 62 /r ib | VPCMPISTRM xmm1, xmm2/m128, imm8 | AVX
  ops: r=reg r=rm r=imm | Packed128_UInt8
  implied: w=xmm0
  rflags: w=oszc 0=ap
-----
INSTRUCTION: 66 0F 3A 63 /r ib | PCMPISTRI xmm1, xmm2/m128, imm8 | SSE4_2
  ops: r=reg r=rm r=imm | Packed128_UInt8
  implied: w=ecx
  rflags: w=oszc 0=ap
-----
INSTRUCTION: VEX.128.66.0F3A.WIG 63 /r ib | VPCMPISTRI xmm1, xmm2/m128, imm8 | AVX
  ops: r=reg r=rm r=imm | Packed128_UInt8
  implied: w=ecx
  rflags: w=oszc 0=ap
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 66 /r ib | VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8 | AVX512VL AVX512DQ | N16b4
  ops: w=reg r=rm r=imm | Packed128_Float32 Broadcast128_Float32
  flags: implied-z
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 66 /r ib | VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8 | AVX512VL AVX512DQ | N32b4
  ops: w=reg r=rm r=imm | Packed256_Float32 Broadcast256_Float32
  flags: implied-z
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 66 /r ib | VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8 | AVX512DQ | N64b4
  ops: w=reg r=rm r=imm | Packed512_Float32 Broadcast512_Float32
  flags: implied-z
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=z
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 66 /r ib | VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8 | AVX512VL AVX512DQ | N16b8
  ops: w=reg r=rm r=imm | Packed128_Float64 Broadcast128_Float64
  flags: implied-z
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 66 /r ib | VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8 | AVX512VL AVX512DQ | N32b8
  ops: w=reg r=rm r=imm | Packed256_Float64 Broadcast256_Float64
  flags: implied-z
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 66 /r ib | VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8 | AVX512DQ | N64b8
  ops: w=reg r=rm r=imm | Packed512_Float64 Broadcast512_Float64
  flags: implied-z
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=z
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.LIG.66.0F3A.W0 67 /r ib | VFPCLASSSS k2 {k1}, xmm2/m32, imm8 | AVX512DQ | N4
  ops: w=reg r=rm r=imm | Float32
  flags: implied-z
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.66.0F3A.W1 67 /r ib | VFPCLASSSD k2 {k1}, xmm2/m64, imm8 | AVX512DQ | N8
  ops: w=reg r=rm r=imm | Float64
  flags: implied-z
  masm: flags=force-size=default
-----
INSTRUCTION: VEX.128.66.0F3A.W0 68 /r /is4 | VFMADDPS xmm1, xmm2, xmm3/m128, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.W0 68 /r /is4 | VFMADDPS ymm1, ymm2, ymm3/m256, ymm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.W1 68 /r /is4 | VFMADDPS xmm1, xmm2, xmm3, xmm4/m128 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.W1 68 /r /is4 | VFMADDPS ymm1, ymm2, ymm3, ymm4/m256 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.W0 69 /r /is4 | VFMADDPD xmm1, xmm2, xmm3/m128, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W0 69 /r /is4 | VFMADDPD ymm1, ymm2, ymm3/m256, ymm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed256_Float64
-----
INSTRUCTION: VEX.128.66.0F3A.W1 69 /r /is4 | VFMADDPD xmm1, xmm2, xmm3, xmm4/m128 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W1 69 /r /is4 | VFMADDPD ymm1, ymm2, ymm3, ymm4/m256 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed256_Float64
-----
INSTRUCTION: VEX.LIG.66.0F3A.W0 6A /r /is4 | VFMADDSS xmm1, xmm2, xmm3/m32, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Float32
-----
INSTRUCTION: VEX.LIG.66.0F3A.W1 6A /r /is4 | VFMADDSS xmm1, xmm2, xmm3, xmm4/m32 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F3A.W0 6B /r /is4 | VFMADDSD xmm1, xmm2, xmm3/m64, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Float64
-----
INSTRUCTION: VEX.LIG.66.0F3A.W1 6B /r /is4 | VFMADDSD xmm1, xmm2, xmm3, xmm4/m64 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Float64
-----
INSTRUCTION: VEX.128.66.0F3A.W0 6C /r /is4 | VFMSUBPS xmm1, xmm2, xmm3/m128, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.W0 6C /r /is4 | VFMSUBPS ymm1, ymm2, ymm3/m256, ymm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.W1 6C /r /is4 | VFMSUBPS xmm1, xmm2, xmm3, xmm4/m128 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.W1 6C /r /is4 | VFMSUBPS ymm1, ymm2, ymm3, ymm4/m256 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.W0 6D /r /is4 | VFMSUBPD xmm1, xmm2, xmm3/m128, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W0 6D /r /is4 | VFMSUBPD ymm1, ymm2, ymm3/m256, ymm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed256_Float64
-----
INSTRUCTION: VEX.128.66.0F3A.W1 6D /r /is4 | VFMSUBPD xmm1, xmm2, xmm3, xmm4/m128 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W1 6D /r /is4 | VFMSUBPD ymm1, ymm2, ymm3, ymm4/m256 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed256_Float64
-----
INSTRUCTION: VEX.LIG.66.0F3A.W0 6E /r /is4 | VFMSUBSS xmm1, xmm2, xmm3/m32, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Float32
-----
INSTRUCTION: VEX.LIG.66.0F3A.W1 6E /r /is4 | VFMSUBSS xmm1, xmm2, xmm3, xmm4/m32 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F3A.W0 6F /r /is4 | VFMSUBSD xmm1, xmm2, xmm3/m64, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Float64
-----
INSTRUCTION: VEX.LIG.66.0F3A.W1 6F /r /is4 | VFMSUBSD xmm1, xmm2, xmm3, xmm4/m64 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Float64
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 70 /r ib | VPSHLDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8 | AVX512VL AVX512_VBMI2 | N16
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 70 /r ib | VPSHLDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8 | AVX512VL AVX512_VBMI2 | N32
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 70 /r ib | VPSHLDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8 | AVX512_VBMI2 | N64
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_UInt16
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 71 /r ib | VPSHLDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8 | AVX512VL AVX512_VBMI2 | N16b4
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 71 /r ib | VPSHLDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8 | AVX512VL AVX512_VBMI2 | N32b4
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 71 /r ib | VPSHLDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8 | AVX512_VBMI2 | N64b4
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 71 /r ib | VPSHLDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8 | AVX512VL AVX512_VBMI2 | N16b8
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 71 /r ib | VPSHLDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8 | AVX512VL AVX512_VBMI2 | N32b8
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 71 /r ib | VPSHLDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8 | AVX512_VBMI2 | N64b8
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 72 /r ib | VPSHRDW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8 | AVX512VL AVX512_VBMI2 | N16
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt16
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 72 /r ib | VPSHRDW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8 | AVX512VL AVX512_VBMI2 | N32
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt16
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 72 /r ib | VPSHRDW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8 | AVX512_VBMI2 | N64
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_UInt16
-----
INSTRUCTION: EVEX.128.66.0F3A.W0 73 /r ib | VPSHRDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8 | AVX512VL AVX512_VBMI2 | N16b4
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt32 Broadcast128_UInt32
-----
INSTRUCTION: EVEX.256.66.0F3A.W0 73 /r ib | VPSHRDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8 | AVX512VL AVX512_VBMI2 | N32b4
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt32 Broadcast256_UInt32
-----
INSTRUCTION: EVEX.512.66.0F3A.W0 73 /r ib | VPSHRDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8 | AVX512_VBMI2 | N64b4
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_UInt32 Broadcast512_UInt32
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 73 /r ib | VPSHRDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8 | AVX512VL AVX512_VBMI2 | N16b8
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt64 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 73 /r ib | VPSHRDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8 | AVX512VL AVX512_VBMI2 | N32b8
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt64 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 73 /r ib | VPSHRDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8 | AVX512_VBMI2 | N64b8
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_UInt64 Broadcast512_UInt64
-----
INSTRUCTION: VEX.128.66.0F3A.W0 78 /r /is4 | VFNMADDPS xmm1, xmm2, xmm3/m128, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.W0 78 /r /is4 | VFNMADDPS ymm1, ymm2, ymm3/m256, ymm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.W1 78 /r /is4 | VFNMADDPS xmm1, xmm2, xmm3, xmm4/m128 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.W1 78 /r /is4 | VFNMADDPS ymm1, ymm2, ymm3, ymm4/m256 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.W0 79 /r /is4 | VFNMADDPD xmm1, xmm2, xmm3/m128, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W0 79 /r /is4 | VFNMADDPD ymm1, ymm2, ymm3/m256, ymm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed256_Float64
-----
INSTRUCTION: VEX.128.66.0F3A.W1 79 /r /is4 | VFNMADDPD xmm1, xmm2, xmm3, xmm4/m128 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W1 79 /r /is4 | VFNMADDPD ymm1, ymm2, ymm3, ymm4/m256 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed256_Float64
-----
INSTRUCTION: VEX.LIG.66.0F3A.W0 7A /r /is4 | VFNMADDSS xmm1, xmm2, xmm3/m32, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Float32
-----
INSTRUCTION: VEX.LIG.66.0F3A.W1 7A /r /is4 | VFNMADDSS xmm1, xmm2, xmm3, xmm4/m32 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F3A.W0 7B /r /is4 | VFNMADDSD xmm1, xmm2, xmm3/m64, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Float64
-----
INSTRUCTION: VEX.LIG.66.0F3A.W1 7B /r /is4 | VFNMADDSD xmm1, xmm2, xmm3, xmm4/m64 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Float64
-----
INSTRUCTION: VEX.128.66.0F3A.W0 7C /r /is4 | VFNMSUBPS xmm1, xmm2, xmm3/m128, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.W0 7C /r /is4 | VFNMSUBPS ymm1, ymm2, ymm3/m256, ymm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.W1 7C /r /is4 | VFNMSUBPS xmm1, xmm2, xmm3, xmm4/m128 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed128_Float32
-----
INSTRUCTION: VEX.256.66.0F3A.W1 7C /r /is4 | VFNMSUBPS ymm1, ymm2, ymm3, ymm4/m256 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed256_Float32
-----
INSTRUCTION: VEX.128.66.0F3A.W0 7D /r /is4 | VFNMSUBPD xmm1, xmm2, xmm3/m128, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W0 7D /r /is4 | VFNMSUBPD ymm1, ymm2, ymm3/m256, ymm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Packed256_Float64
-----
INSTRUCTION: VEX.128.66.0F3A.W1 7D /r /is4 | VFNMSUBPD xmm1, xmm2, xmm3, xmm4/m128 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed128_Float64
-----
INSTRUCTION: VEX.256.66.0F3A.W1 7D /r /is4 | VFNMSUBPD ymm1, ymm2, ymm3, ymm4/m256 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Packed256_Float64
-----
INSTRUCTION: VEX.LIG.66.0F3A.W0 7E /r /is4 | VFNMSUBSS xmm1, xmm2, xmm3/m32, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Float32
-----
INSTRUCTION: VEX.LIG.66.0F3A.W1 7E /r /is4 | VFNMSUBSS xmm1, xmm2, xmm3, xmm4/m32 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Float32
-----
INSTRUCTION: VEX.LIG.66.0F3A.W0 7F /r /is4 | VFNMSUBSD xmm1, xmm2, xmm3/m64, xmm4 | FMA4
  ops: w=reg r=vvvv r=rm r=is | Float64
-----
INSTRUCTION: VEX.LIG.66.0F3A.W1 7F /r /is4 | VFNMSUBSD xmm1, xmm2, xmm3, xmm4/m64 | FMA4
  ops: w=reg r=vvvv r=is r=rm | Float64
-----
INSTRUCTION: NP 0F 3A CC /r ib | SHA1RNDS4 xmm1, xmm2/m128, imm8 | SHA
  ops: rw=reg r=rm r=imm | Packed128_UInt32
-----
INSTRUCTION: 66 0F 3A CE /r ib | GF2P8AFFINEQB xmm1, xmm2/m128, imm8 | GFNI
  ops: rw=reg r=rm r=imm | Packed128_UInt8
-----
INSTRUCTION: VEX.128.66.0F3A.W1 CE /r ib | VGF2P8AFFINEQB xmm1, xmm2, xmm3/m128, imm8 | AVX GFNI
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.66.0F3A.W1 CE /r ib | VGF2P8AFFINEQB ymm1, ymm2, ymm3/m256, imm8 | AVX GFNI
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt8
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 CE /r ib | VGF2P8AFFINEQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8 | AVX512VL GFNI | N16b8
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt8 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 CE /r ib | VGF2P8AFFINEQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8 | AVX512VL GFNI | N32b8
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt8 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 CE /r ib | VGF2P8AFFINEQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8 | AVX512F GFNI | N64b8
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_UInt8 Broadcast512_UInt64
-----
INSTRUCTION: 66 0F 3A CF /r ib | GF2P8AFFINEINVQB xmm1, xmm2/m128, imm8 | GFNI
  ops: rw=reg r=rm r=imm | Packed128_UInt8
-----
INSTRUCTION: VEX.128.66.0F3A.W1 CF /r ib | VGF2P8AFFINEINVQB xmm1, xmm2, xmm3/m128, imm8 | AVX GFNI
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.66.0F3A.W1 CF /r ib | VGF2P8AFFINEINVQB ymm1, ymm2, ymm3/m256, imm8 | AVX GFNI
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt8
-----
INSTRUCTION: EVEX.128.66.0F3A.W1 CF /r ib | VGF2P8AFFINEINVQB xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8 | AVX512VL GFNI | N16b8
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt8 Broadcast128_UInt64
-----
INSTRUCTION: EVEX.256.66.0F3A.W1 CF /r ib | VGF2P8AFFINEINVQB ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8 | AVX512VL GFNI | N32b8
  ops: w=reg r=vvvv r=rm r=imm | Packed256_UInt8 Broadcast256_UInt64
-----
INSTRUCTION: EVEX.512.66.0F3A.W1 CF /r ib | VGF2P8AFFINEINVQB zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8 | AVX512F GFNI | N64b8
  ops: wvmm=reg r=vvvv r=rm r=imm | Packed512_UInt8 Broadcast512_UInt64
-----
INSTRUCTION: 66 0F 3A DF /r ib | AESKEYGENASSIST xmm1, xmm2/m128, imm8 | AES
  ops: w=reg r=rm r=imm | UInt128
-----
INSTRUCTION: VEX.128.66.0F3A.WIG DF /r ib | VAESKEYGENASSIST xmm1, xmm2/m128, imm8 | AES AVX
  ops: w=reg r=rm r=imm | UInt128
-----
INSTRUCTION: VEX.LZ.F2.0F3A.W0 F0 /r ib | RORX r32, r/m32, imm8 | BMI2
  ops: w=reg r=rm r=imm | UInt32
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: VEX.LZ.F2.0F3A.W1 F0 /r ib | RORX r64, r/m64, imm8 | BMI2
  ops: w=reg r=rm r=imm | UInt64
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: XOP.128.X8.W0 85 /r /is4 | VPMACSSWW xmm1, xmm2, xmm3/m128, xmm4 | XOP
  ops: w=reg r=vvvv r=rm r=is | Packed128_Int16
-----
INSTRUCTION: XOP.128.X8.W0 86 /r /is4 | VPMACSSWD xmm1, xmm2, xmm3/m128, xmm4 | XOP
  ops: w=reg r=vvvv r=rm r=is | Packed128_Int16
-----
INSTRUCTION: XOP.128.X8.W0 87 /r /is4 | VPMACSSDQL xmm1, xmm2, xmm3/m128, xmm4 | XOP
  ops: w=reg r=vvvv r=rm r=is | Packed128_Int32
-----
INSTRUCTION: XOP.128.X8.W0 8E /r /is4 | VPMACSSDD xmm1, xmm2, xmm3/m128, xmm4 | XOP
  ops: w=reg r=vvvv r=rm r=is | Packed128_Int32
-----
INSTRUCTION: XOP.128.X8.W0 8F /r /is4 | VPMACSSDQH xmm1, xmm2, xmm3/m128, xmm4 | XOP
  ops: w=reg r=vvvv r=rm r=is | Packed128_Int32
-----
INSTRUCTION: XOP.128.X8.W0 95 /r /is4 | VPMACSWW xmm1, xmm2, xmm3/m128, xmm4 | XOP
  ops: w=reg r=vvvv r=rm r=is | Packed128_Int16
-----
INSTRUCTION: XOP.128.X8.W0 96 /r /is4 | VPMACSWD xmm1, xmm2, xmm3/m128, xmm4 | XOP
  ops: w=reg r=vvvv r=rm r=is | Packed128_Int16
-----
INSTRUCTION: XOP.128.X8.W0 97 /r /is4 | VPMACSDQL xmm1, xmm2, xmm3/m128, xmm4 | XOP
  ops: w=reg r=vvvv r=rm r=is | Packed128_Int32
-----
INSTRUCTION: XOP.128.X8.W0 9E /r /is4 | VPMACSDD xmm1, xmm2, xmm3/m128, xmm4 | XOP
  ops: w=reg r=vvvv r=rm r=is | Packed128_Int32
-----
INSTRUCTION: XOP.128.X8.W0 9F /r /is4 | VPMACSDQH xmm1, xmm2, xmm3/m128, xmm4 | XOP
  ops: w=reg r=vvvv r=rm r=is | Packed128_Int32
-----
INSTRUCTION: XOP.128.X8.W0 A2 /r /is4 | VPCMOV xmm1, xmm2, xmm3/m128, xmm4 | XOP
  ops: w=reg r=vvvv r=rm r=is | UInt128
-----
INSTRUCTION: XOP.256.X8.W0 A2 /r /is4 | VPCMOV ymm1, ymm2, ymm3/m256, ymm4 | XOP
  ops: w=reg r=vvvv r=rm r=is | UInt256
-----
INSTRUCTION: XOP.128.X8.W1 A2 /r /is4 | VPCMOV xmm1, xmm2, xmm3, xmm4/m128 | XOP
  ops: w=reg r=vvvv r=is r=rm | UInt128
-----
INSTRUCTION: XOP.256.X8.W1 A2 /r /is4 | VPCMOV ymm1, ymm2, ymm3, ymm4/m256 | XOP
  ops: w=reg r=vvvv r=is r=rm | UInt256
-----
INSTRUCTION: XOP.128.X8.W0 A3 /r /is4 | VPPERM xmm1, xmm2, xmm3/m128, xmm4 | XOP
  ops: w=reg r=vvvv r=rm r=is | Packed128_UInt8
-----
INSTRUCTION: XOP.128.X8.W1 A3 /r /is4 | VPPERM xmm1, xmm2, xmm3, xmm4/m128 | XOP
  ops: w=reg r=vvvv r=is r=rm | Packed128_UInt8
-----
INSTRUCTION: XOP.128.X8.W0 A6 /r /is4 | VPMADCSSWD xmm1, xmm2, xmm3/m128, xmm4 | XOP
  ops: w=reg r=vvvv r=rm r=is | Packed128_Int16
-----
INSTRUCTION: XOP.128.X8.W0 B6 /r /is4 | VPMADCSWD xmm1, xmm2, xmm3/m128, xmm4 | XOP
  ops: w=reg r=vvvv r=rm r=is | Packed128_Int16
-----
INSTRUCTION: XOP.128.X8.W0 C0 /r ib | VPROTB xmm1, xmm2/m128, imm8 | XOP
  ops: w=reg r=rm r=imm | Packed128_UInt8
-----
INSTRUCTION: XOP.128.X8.W0 C1 /r ib | VPROTW xmm1, xmm2/m128, imm8 | XOP
  ops: w=reg r=rm r=imm | Packed128_UInt16
-----
INSTRUCTION: XOP.128.X8.W0 C2 /r ib | VPROTD xmm1, xmm2/m128, imm8 | XOP
  ops: w=reg r=rm r=imm | Packed128_UInt32
-----
INSTRUCTION: XOP.128.X8.W0 C3 /r ib | VPROTQ xmm1, xmm2/m128, imm8 | XOP
  ops: w=reg r=rm r=imm | Packed128_UInt64
-----
INSTRUCTION: XOP.128.X8.W0 CC /r ib | VPCOMB xmm1, xmm2, xmm3/m128, imm8 | XOP
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Int8
  flags: pseudo=vpcomb
-----
INSTRUCTION: XOP.128.X8.W0 CD /r ib | VPCOMW xmm1, xmm2, xmm3/m128, imm8 | XOP
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Int16
  flags: pseudo=vpcomw
-----
INSTRUCTION: XOP.128.X8.W0 CE /r ib | VPCOMD xmm1, xmm2, xmm3/m128, imm8 | XOP
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Int32
  flags: pseudo=vpcomd
-----
INSTRUCTION: XOP.128.X8.W0 CF /r ib | VPCOMQ xmm1, xmm2, xmm3/m128, imm8 | XOP
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Int64
  flags: pseudo=vpcomq
-----
INSTRUCTION: XOP.128.X8.W0 EC /r ib | VPCOMUB xmm1, xmm2, xmm3/m128, imm8 | XOP
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt8
  flags: pseudo=vpcomub
-----
INSTRUCTION: XOP.128.X8.W0 ED /r ib | VPCOMUW xmm1, xmm2, xmm3/m128, imm8 | XOP
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt16
  flags: pseudo=vpcomuw
-----
INSTRUCTION: XOP.128.X8.W0 EE /r ib | VPCOMUD xmm1, xmm2, xmm3/m128, imm8 | XOP
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt32
  flags: pseudo=vpcomud
-----
INSTRUCTION: XOP.128.X8.W0 EF /r ib | VPCOMUQ xmm1, xmm2, xmm3/m128, imm8 | XOP
  ops: w=reg r=vvvv r=rm r=imm | Packed128_UInt64
  flags: pseudo=vpcomuq
-----
INSTRUCTION: XOP.L0.X9.W0 01 /1 | BLCFILL r32, r/m32 | TBM
  ops: w=vvvv r=rm | UInt32
  rflags: u=ap w=szc 0=o
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: XOP.L0.X9.W1 01 /1 | BLCFILL r64, r/m64 | TBM
  ops: w=vvvv r=rm | UInt64
  rflags: u=ap w=szc 0=o
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: XOP.L0.X9.W0 01 /2 | BLSFILL r32, r/m32 | TBM
  ops: w=vvvv r=rm | UInt32
  rflags: u=ap w=szc 0=o
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: XOP.L0.X9.W1 01 /2 | BLSFILL r64, r/m64 | TBM
  ops: w=vvvv r=rm | UInt64
  rflags: u=ap w=szc 0=o
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: XOP.L0.X9.W0 01 /3 | BLCS r32, r/m32 | TBM
  ops: w=vvvv r=rm | UInt32
  rflags: u=ap w=szc 0=o
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: XOP.L0.X9.W1 01 /3 | BLCS r64, r/m64 | TBM
  ops: w=vvvv r=rm | UInt64
  rflags: u=ap w=szc 0=o
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: XOP.L0.X9.W0 01 /4 | TZMSK r32, r/m32 | TBM
  ops: w=vvvv r=rm | UInt32
  rflags: u=ap w=szc 0=o
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: XOP.L0.X9.W1 01 /4 | TZMSK r64, r/m64 | TBM
  ops: w=vvvv r=rm | UInt64
  rflags: u=ap w=szc 0=o
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: XOP.L0.X9.W0 01 /5 | BLCIC r32, r/m32 | TBM
  ops: w=vvvv r=rm | UInt32
  rflags: u=ap w=szc 0=o
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: XOP.L0.X9.W1 01 /5 | BLCIC r64, r/m64 | TBM
  ops: w=vvvv r=rm | UInt64
  rflags: u=ap w=szc 0=o
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: XOP.L0.X9.W0 01 /6 | BLSIC r32, r/m32 | TBM
  ops: w=vvvv r=rm | UInt32
  rflags: u=ap w=szc 0=o
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: XOP.L0.X9.W1 01 /6 | BLSIC r64, r/m64 | TBM
  ops: w=vvvv r=rm | UInt64
  rflags: u=ap w=szc 0=o
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: XOP.L0.X9.W0 01 /7 | T1MSKC r32, r/m32 | TBM
  ops: w=vvvv r=rm | UInt32
  rflags: u=ap w=szc 0=o
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: XOP.L0.X9.W1 01 /7 | T1MSKC r64, r/m64 | TBM
  ops: w=vvvv r=rm | UInt64
  rflags: u=ap w=szc 0=o
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: XOP.L0.X9.W0 02 /1 | BLCMSK r32, r/m32 | TBM
  ops: w=vvvv r=rm | UInt32
  rflags: u=ap w=szc 0=o
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: XOP.L0.X9.W1 02 /1 | BLCMSK r64, r/m64 | TBM
  ops: w=vvvv r=rm | UInt64
  rflags: u=ap w=szc 0=o
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: XOP.L0.X9.W0 02 /6 | BLCI r32, r/m32 | TBM
  ops: w=vvvv r=rm | UInt32
  rflags: u=ap w=szc 0=o
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: XOP.L0.X9.W1 02 /6 | BLCI r64, r/m64 | TBM
  ops: w=vvvv r=rm | UInt64
  rflags: u=ap w=szc 0=o
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: XOP.L0.X9.W0 12 /0 | LLWPCB r32 | LWP
  ops: r=rm
  implied: r=[ds:op0-reg=Unknown]
  flags: wig32
-----
INSTRUCTION: XOP.L0.X9.W1 12 /0 | LLWPCB r64 | LWP
  ops: r=rm
  implied: r=[ds:op0-reg=Unknown]
  flags: 64
-----
INSTRUCTION: XOP.L0.X9.W0 12 /1 | SLWPCB r32 | LWP
  ops: w=rm
  flags: wig32
-----
INSTRUCTION: XOP.L0.X9.W1 12 /1 | SLWPCB r64 | LWP
  ops: w=rm
  flags: 64
-----
INSTRUCTION: XOP.128.X9.W0 80 /r | VFRCZPS xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_Float32
-----
INSTRUCTION: XOP.256.X9.W0 80 /r | VFRCZPS ymm1, ymm2/m256 | XOP
  ops: w=reg r=rm | Packed256_Float32
-----
INSTRUCTION: XOP.128.X9.W0 81 /r | VFRCZPD xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_Float64
-----
INSTRUCTION: XOP.256.X9.W0 81 /r | VFRCZPD ymm1, ymm2/m256 | XOP
  ops: w=reg r=rm | Packed256_Float64
-----
INSTRUCTION: XOP.128.X9.W0 82 /r | VFRCZSS xmm1, xmm2/m32 | XOP
  ops: w=reg r=rm | Float32
-----
INSTRUCTION: XOP.128.X9.W0 83 /r | VFRCZSD xmm1, xmm2/m64 | XOP
  ops: w=reg r=rm | Float64
-----
INSTRUCTION: XOP.128.X9.W0 90 /r | VPROTB xmm1, xmm2/m128, xmm3 | XOP
  ops: w=reg r=rm r=vvvv | Packed128_UInt8
-----
INSTRUCTION: XOP.128.X9.W1 90 /r | VPROTB xmm1, xmm2, xmm3/m128 | XOP
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: XOP.128.X9.W0 91 /r | VPROTW xmm1, xmm2/m128, xmm3 | XOP
  ops: w=reg r=rm r=vvvv | Packed128_UInt16
-----
INSTRUCTION: XOP.128.X9.W1 91 /r | VPROTW xmm1, xmm2, xmm3/m128 | XOP
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: XOP.128.X9.W0 92 /r | VPROTD xmm1, xmm2/m128, xmm3 | XOP
  ops: w=reg r=rm r=vvvv | Packed128_UInt32
-----
INSTRUCTION: XOP.128.X9.W1 92 /r | VPROTD xmm1, xmm2, xmm3/m128 | XOP
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: XOP.128.X9.W0 93 /r | VPROTQ xmm1, xmm2/m128, xmm3 | XOP
  ops: w=reg r=rm r=vvvv | Packed128_UInt64
-----
INSTRUCTION: XOP.128.X9.W1 93 /r | VPROTQ xmm1, xmm2, xmm3/m128 | XOP
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: XOP.128.X9.W0 94 /r | VPSHLB xmm1, xmm2/m128, xmm3 | XOP
  ops: w=reg r=rm r=vvvv | Packed128_UInt8
-----
INSTRUCTION: XOP.128.X9.W1 94 /r | VPSHLB xmm1, xmm2, xmm3/m128 | XOP
  ops: w=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: XOP.128.X9.W0 95 /r | VPSHLW xmm1, xmm2/m128, xmm3 | XOP
  ops: w=reg r=rm r=vvvv | Packed128_UInt16
-----
INSTRUCTION: XOP.128.X9.W1 95 /r | VPSHLW xmm1, xmm2, xmm3/m128 | XOP
  ops: w=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: XOP.128.X9.W0 96 /r | VPSHLD xmm1, xmm2/m128, xmm3 | XOP
  ops: w=reg r=rm r=vvvv | Packed128_UInt32
-----
INSTRUCTION: XOP.128.X9.W1 96 /r | VPSHLD xmm1, xmm2, xmm3/m128 | XOP
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: XOP.128.X9.W0 97 /r | VPSHLQ xmm1, xmm2/m128, xmm3 | XOP
  ops: w=reg r=rm r=vvvv | Packed128_UInt64
-----
INSTRUCTION: XOP.128.X9.W1 97 /r | VPSHLQ xmm1, xmm2, xmm3/m128 | XOP
  ops: w=reg r=vvvv r=rm | Packed128_UInt64
-----
INSTRUCTION: XOP.128.X9.W0 98 /r | VPSHAB xmm1, xmm2/m128, xmm3 | XOP
  ops: w=reg r=rm r=vvvv | Packed128_Int8
-----
INSTRUCTION: XOP.128.X9.W1 98 /r | VPSHAB xmm1, xmm2, xmm3/m128 | XOP
  ops: w=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: XOP.128.X9.W0 99 /r | VPSHAW xmm1, xmm2/m128, xmm3 | XOP
  ops: w=reg r=rm r=vvvv | Packed128_Int16
-----
INSTRUCTION: XOP.128.X9.W1 99 /r | VPSHAW xmm1, xmm2, xmm3/m128 | XOP
  ops: w=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: XOP.128.X9.W0 9A /r | VPSHAD xmm1, xmm2/m128, xmm3 | XOP
  ops: w=reg r=rm r=vvvv | Packed128_Int32
-----
INSTRUCTION: XOP.128.X9.W1 9A /r | VPSHAD xmm1, xmm2, xmm3/m128 | XOP
  ops: w=reg r=vvvv r=rm | Packed128_Int32
-----
INSTRUCTION: XOP.128.X9.W0 9B /r | VPSHAQ xmm1, xmm2/m128, xmm3 | XOP
  ops: w=reg r=rm r=vvvv | Packed128_Int64
-----
INSTRUCTION: XOP.128.X9.W1 9B /r | VPSHAQ xmm1, xmm2, xmm3/m128 | XOP
  ops: w=reg r=vvvv r=rm | Packed128_Int64
-----
INSTRUCTION: XOP.128.X9.W0 C1 /r | VPHADDBW xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_Int8
-----
INSTRUCTION: XOP.128.X9.W0 C2 /r | VPHADDBD xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_Int8
-----
INSTRUCTION: XOP.128.X9.W0 C3 /r | VPHADDBQ xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_Int8
-----
INSTRUCTION: XOP.128.X9.W0 C6 /r | VPHADDWD xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_Int16
-----
INSTRUCTION: XOP.128.X9.W0 C7 /r | VPHADDWQ xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_Int16
-----
INSTRUCTION: XOP.128.X9.W0 CB /r | VPHADDDQ xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_Int32
-----
INSTRUCTION: XOP.128.X9.W0 D1 /r | VPHADDUBW xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: XOP.128.X9.W0 D2 /r | VPHADDUBD xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: XOP.128.X9.W0 D3 /r | VPHADDUBQ xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_UInt8
-----
INSTRUCTION: XOP.128.X9.W0 D6 /r | VPHADDUWD xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: XOP.128.X9.W0 D7 /r | VPHADDUWQ xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_UInt16
-----
INSTRUCTION: XOP.128.X9.W0 DB /r | VPHADDUDQ xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_UInt32
-----
INSTRUCTION: XOP.128.X9.W0 E1 /r | VPHSUBBW xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_Int8
-----
INSTRUCTION: XOP.128.X9.W0 E2 /r | VPHSUBWD xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_Int16
-----
INSTRUCTION: XOP.128.X9.W0 E3 /r | VPHSUBDQ xmm1, xmm2/m128 | XOP
  ops: w=reg r=rm | Packed128_Int32
-----
INSTRUCTION: XOP.L0.XA.W0 10 /r id | BEXTR r32, r/m32, imm32 | TBM
  ops: w=reg r=rm r=imm | UInt32
  rflags: u=sap w=z 0=oc
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: XOP.L0.XA.W1 10 /r id | BEXTR r64, r/m64, imm32 | TBM
  ops: w=reg r=rm r=imm | UInt64
  rflags: u=sap w=z 0=oc
  flags: 64
  gas: suffix=q
-----
INSTRUCTION: XOP.L0.XA.W0 12 /0 id | LWPINS r32, r/m32, imm32 | LWP
  ops: r=vvvv r=rm r=imm | UInt32
  rflags: w=c
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: XOP.L0.XA.W1 12 /0 id | LWPINS r64, r/m32, imm32 | LWP
  ops: r=vvvv r=rm r=imm | UInt32
  rflags: w=c
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: XOP.L0.XA.W0 12 /1 id | LWPVAL r32, r/m32, imm32 | LWP
  ops: r=vvvv cr=rm r=imm | UInt32
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: XOP.L0.XA.W1 12 /1 id | LWPVAL r64, r/m32, imm32 | LWP
  ops: r=vvvv cr=rm r=imm | UInt32
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: 0F 0F /r 0C | PI2FW mm, mm/m64 | D3NOWEXT
  ops: w=reg r=rm | Packed64_Int16
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r 0D | PI2FD mm, mm/m64 | D3NOW
  ops: w=reg r=rm | Packed64_Int32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r 1C | PF2IW mm, mm/m64 | D3NOWEXT
  ops: w=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r 1D | PF2ID mm, mm/m64 | D3NOW
  ops: w=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r 86 | PFRCPV mm, mm/m64 | CYRIX_D3NOW
  ops: w=reg r=rm | Packed64_Float32
  flags: 16 32 dec-opt=Cyrix
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r 87 | PFRSQRTV mm, mm/m64 | CYRIX_D3NOW
  ops: w=reg r=rm | Packed64_Float32
  flags: 16 32 dec-opt=Cyrix
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r 8A | PFNACC mm, mm/m64 | D3NOWEXT
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r 8E | PFPNACC mm, mm/m64 | D3NOWEXT
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r 90 | PFCMPGE mm, mm/m64 | D3NOW
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r 94 | PFMIN mm, mm/m64 | D3NOW
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r 96 | PFRCP mm, mm/m64 | D3NOW
  ops: w=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r 97 | PFRSQRT mm, mm/m64 | D3NOW
  ops: w=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r 9A | PFSUB mm, mm/m64 | D3NOW
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r 9E | PFADD mm, mm/m64 | D3NOW
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r A0 | PFCMPGT mm, mm/m64 | D3NOW
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r A4 | PFMAX mm, mm/m64 | D3NOW
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r A6 | PFRCPIT1 mm, mm/m64 | D3NOW
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r A7 | PFRSQIT1 mm, mm/m64 | D3NOW
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r AA | PFSUBR mm, mm/m64 | D3NOW
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r AE | PFACC mm, mm/m64 | D3NOW
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r B0 | PFCMPEQ mm, mm/m64 | D3NOW
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r B4 | PFMUL mm, mm/m64 | D3NOW
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r B6 | PFRCPIT2 mm, mm/m64 | D3NOW
  ops: rw=reg r=rm | Packed64_Float32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r B7 | PMULHRW mm, mm/m64 | D3NOW
  ops: rw=reg r=rm | Packed64_Int16
  masm: flags=mem-size=mmx
  nasm: mnemonic=pmulhrwa
-----
INSTRUCTION: 0F 0F /r BB | PSWAPD mm, mm/m64 | D3NOWEXT
  ops: w=reg r=rm | Packed64_UInt32
  masm: flags=mem-size=mmx
-----
INSTRUCTION: 0F 0F /r BF | PAVGUSB mm, mm/m64 | D3NOW
  ops: rw=reg r=rm | Packed64_UInt8
  masm: flags=mem-size=mmx
-----
INSTRUCTION: F3 0F 01 FE | RMPADJUST | SEV_SNP
  implied: rw=rax r=rcx;rdx
  rflags: w=oszap
  flags: 64 cpl0 amd-may-vm-exit
-----
INSTRUCTION: F2 0F 01 FE | RMPUPDATE | SEV_SNP
  implied: r=[seg:rcx=UInt128] rw=rax
  rflags: w=oszap
  flags: 64 cpl0
-----
INSTRUCTION: F3 0F 01 FF | PSMASH | SEV_SNP
  implied: rw=rax
  rflags: w=oszap
  flags: 64 cpl0
-----
INSTRUCTION: a16 F2 0F 01 FF | PVALIDATE | SEV_SNP
  implied: r=ax w=eax r=ecx;edx
  code-mnemonic: pvalidatew
  rflags: w=oszacp
  flags: 16 32 cpl0 amd-may-vm-exit
  gas: asz
  intel: reg ax
  nasm: asz
-----
INSTRUCTION: a32 F2 0F 01 FF | PVALIDATE | SEV_SNP
  implied: rw=eax r=ecx;edx
  code-mnemonic: pvalidated
  rflags: w=oszacp
  flags: cpl0 amd-may-vm-exit
  gas: asz
  intel: reg eax
  nasm: asz
-----
INSTRUCTION: a64 F2 0F 01 FF | PVALIDATE | SEV_SNP
  implied: rw=rax r=ecx;edx
  code-mnemonic: pvalidateq
  rflags: w=oszacp
  flags: 64 cpl0 amd-may-vm-exit
  gas: asz
  intel: reg rax
  nasm: asz
-----
INSTRUCTION: NP 0F 01 E8 | SERIALIZE | SERIALIZE
  flags: serialize-intel serialize-amd
-----
INSTRUCTION: F2 0F 01 E8 | XSUSLDTRK | TSXLDTRK
  flags: tsx-may-abort
-----
INSTRUCTION: F2 0F 01 E9 | XRESLDTRK | TSXLDTRK
  flags: tsx-may-abort
-----
INSTRUCTION: a16 NP 0F 01 FE | INVLPGB | INVLPGB
  implied: r=ax;ecx;edx
  code-mnemonic: invlpgbw
  flags: 16 32 cpl0 no-rm no-v86 amd-may-vm-exit
  gas: asz
  intel: reg ax
  nasm: asz
-----
INSTRUCTION: a32 NP 0F 01 FE | INVLPGB | INVLPGB
  implied: r=eax;ecx;edx
  code-mnemonic: invlpgbd
  flags: cpl0 no-rm no-v86 amd-may-vm-exit
  gas: asz
  intel: reg eax
  nasm: asz
-----
INSTRUCTION: a64 NP 0F 01 FE | INVLPGB | INVLPGB
  implied: r=rax;ecx;edx
  code-mnemonic: invlpgbq
  flags: 64 cpl0 no-rm no-v86 amd-may-vm-exit
  gas: asz
  intel: reg rax
  nasm: asz
-----
INSTRUCTION: NP 0F 01 FF | TLBSYNC | INVLPGB
  flags: cpl0 no-rm no-v86 serialize-amd amd-may-vm-exit
-----
INSTRUCTION: 0F 0D /3 | PREFETCHW m8 | PREFETCHW
  ops: nma=rm | UInt8
  code-mnemonic: prefetchreserved3
  flags: prefetch asm-ig
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: 0F 0D /4 | PREFETCH m8 | PREFETCHW
  ops: nma=rm | UInt8
  code-mnemonic: prefetchreserved4
  flags: prefetch asm-ig
  intel: mnemonic=prefetch_reserved
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: 0F 0D /5 | PREFETCH m8 | PREFETCHW
  ops: nma=rm | UInt8
  code-mnemonic: prefetchreserved5
  flags: prefetch asm-ig
  intel: mnemonic=prefetch_reserved
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: 0F 0D /6 | PREFETCH m8 | PREFETCHW
  ops: nma=rm | UInt8
  code-mnemonic: prefetchreserved6
  flags: prefetch asm-ig
  intel: mnemonic=prefetch_reserved
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: 0F 0D /7 | PREFETCH m8 | PREFETCHW
  ops: nma=rm | UInt8
  code-mnemonic: prefetchreserved7
  flags: prefetch asm-ig
  intel: mnemonic=prefetch_reserved
  nasm: flags=mem-size=ignore
-----
INSTRUCTION: 0F FF | UD0 | INTEL286
  flags: cflow=ex no-intel-dec
-----
INSTRUCTION: F3 0F 01 D9 | VMGEXIT | SEV_ES
  flags: cflow=call amd-vm-exit
-----
INSTRUCTION: F2 0F 01 D9 | VMGEXIT | SEV_ES
  code-suffix: F2
  flags: cflow=call amd-vm-exit asm-ig
-----
INSTRUCTION: VEX.128.0F38.W0 49 !(11):000:bbb | LDTILECFG m512 | AMX_TILE
  ops: r=rm | Tilecfg
  implied: w=tmm0-tmm_last
  flags: 64 tsx-abort
-----
INSTRUCTION: VEX.128.0F38.W0 49 C0 | TILERELEASE | AMX_TILE
  implied: w=tmm0-tmm_last
  flags: 64 tsx-abort
-----
INSTRUCTION: VEX.128.66.0F38.W0 49 !(11):000:bbb | STTILECFG m512 | AMX_TILE
  ops: w=rm | Tilecfg
  flags: 64 tsx-abort
-----
INSTRUCTION: VEX.128.F2.0F38.W0 49 11:rrr:000 | TILEZERO tmm1 | AMX_TILE
  ops: w=reg
  flags: 64 tsx-abort
-----
INSTRUCTION: VEX.128.66.0F38.W0 4B !(11):rrr:100 | TILELOADDT1 tmm1, sibmem | AMX_TILE
  ops: w=reg r=rm | Tile
  flags: 64 tile-stride-index tsx-abort
-----
INSTRUCTION: VEX.128.F3.0F38.W0 4B !(11):rrr:100 | TILESTORED sibmem, tmm1 | AMX_TILE
  ops: w=rm r=reg | Tile
  flags: 64 tile-stride-index tsx-abort
-----
INSTRUCTION: VEX.128.F2.0F38.W0 4B !(11):rrr:100 | TILELOADD tmm1, sibmem | AMX_TILE
  ops: w=reg r=rm | Tile
  flags: 64 tile-stride-index tsx-abort
-----
INSTRUCTION: VEX.128.F3.0F38.W0 5C 11:rrr:bbb | TDPBF16PS tmm1, tmm2, tmm3 | AMX_BF16
  ops: rw=reg r=rm r=vvvv
  flags: 64 unique-reg-num tsx-abort
-----
INSTRUCTION: VEX.128.0F38.W0 5E 11:rrr:bbb | TDPBUUD tmm1, tmm2, tmm3 | AMX_INT8
  ops: rw=reg r=rm r=vvvv
  flags: 64 unique-reg-num tsx-abort
-----
INSTRUCTION: VEX.128.66.0F38.W0 5E 11:rrr:bbb | TDPBUSD tmm1, tmm2, tmm3 | AMX_INT8
  ops: rw=reg r=rm r=vvvv
  flags: 64 unique-reg-num tsx-abort
-----
INSTRUCTION: VEX.128.F3.0F38.W0 5E 11:rrr:bbb | TDPBSUD tmm1, tmm2, tmm3 | AMX_INT8
  ops: rw=reg r=rm r=vvvv
  flags: 64 unique-reg-num tsx-abort
-----
INSTRUCTION: VEX.128.F2.0F38.W0 5E 11:rrr:bbb | TDPBSSD tmm1, tmm2, tmm3 | AMX_INT8
  ops: rw=reg r=rm r=vvvv
  flags: 64 unique-reg-num tsx-abort
-----
INSTRUCTION: DF E1 | FNSTDW AX | FPU387SL_ONLY
  ops: w=r:ax
  #TODO: assume c0,c1,c2,c3 == undefined
  rflags: u=0123
  flags: 16 32 dec-opt=OldFpu tsx-impl-abort no-wait
-----
INSTRUCTION: DF E2 | FNSTSG AX | FPU387SL_ONLY
  ops: w=r:ax
  #TODO: assume c0,c1,c2,c3 == undefined
  rflags: u=0123
  flags: 16 32 dec-opt=OldFpu tsx-impl-abort no-wait
-----
INSTRUCTION: 0F 36 /0 | RDSHR r/m32 | CYRIX_SHR
  ops: w=rm | UInt32
  flags: 16 32 dec-opt=Cyrix cpl0 no-outside-smm
  gas: suffix=l
-----
INSTRUCTION: 0F 37 /0 | WRSHR r/m32 | CYRIX_SHR
  ops: r=rm | UInt32
  flags: 16 32 dec-opt=Cyrix cpl0 no-outside-smm
  gas: suffix=l
-----
INSTRUCTION: 0F 38 | SMINT | CYRIX_SMINT
  flags: 16 32 dec-opt=Cyrix cpl0 cflow=int
-----
INSTRUCTION: 0F 39 | DMINT | CYRIX_DMI
  flags: 16 32 dec-opt=Cyrix_DMI cpl0 cflow=int
-----
INSTRUCTION: 0F 3A | RDM | CYRIX_DMI
  rflags: w=oszacpdiA
  flags: 16 32 dec-opt=Cyrix_DMI cpl0 save-restore cflow=ret
-----
INSTRUCTION: 0F 78 /r | SVDC m80, Sreg | CYRIX_SMM
  ops: w=rm r=reg | SegmentDescSelector
  flags: 16 32 dec-opt=Cyrix cpl0
-----
INSTRUCTION: 0F 79 /r | RSDC Sreg, m80 | CYRIX_SMM
  ops: w=reg r=rm | SegmentDescSelector
  flags: 16 32 dec-opt=Cyrix cpl0
-----
INSTRUCTION: 0F 7A /0 | SVLDT m80 | CYRIX_SMM
  ops: w=rm | SegmentDescSelector
  flags: 16 32 dec-opt=Cyrix cpl0
-----
INSTRUCTION: 0F 7B /0 | RSLDT m80 | CYRIX_SMM
  ops: r=rm | SegmentDescSelector
  flags: 16 32 dec-opt=Cyrix cpl0
-----
INSTRUCTION: 0F 7C /0 | SVTS m80 | CYRIX_SMM
  ops: w=rm | SegmentDescSelector
  flags: 16 32 dec-opt=Cyrix cpl0
-----
INSTRUCTION: 0F 7D /0 | RSTS m80 | CYRIX_SMM
  ops: r=rm | SegmentDescSelector
  flags: 16 32 dec-opt=Cyrix cpl0
-----
INSTRUCTION: 0F 7E | SMINT | CYRIX_SMINT_0F7E
  code-suffix: 0F7E
  flags: 16 32 dec-opt=Cyrix_SMINT_0F7E cpl0 cflow=int asm=smint_0f7e
  nasm: mnemonic=smintold
-----
INSTRUCTION: 0F 3A | BB0_RESET | CYRIX_DDI
  flags: 16 32 dec-opt=Cyrix cpl0
-----
INSTRUCTION: 0F 3B | BB1_RESET | CYRIX_DDI
  flags: 16 32 dec-opt=Cyrix cpl0
-----
INSTRUCTION: 0F 3C | CPU_WRITE | CYRIX_DDI
  implied: r=eax;ebx
  flags: 16 32 dec-opt=Cyrix cpl0
-----
INSTRUCTION: 0F 3D | CPU_READ | CYRIX_DDI
  implied: w=eax r=ebx
  flags: 16 32 dec-opt=Cyrix cpl0
-----
INSTRUCTION: 0F 3F | ALTINST | CENTAUR_AIS
  implied: r=eax
  flags: 16 32 dec-opt=ALTINST cflow=br-ind
-----
INSTRUCTION: 0F 50 /r | PAVEB mm, mm/m64 | CYRIX_EMMI
  ops: rw=reg r=rm | Packed64_UInt8
  flags: 16 32 dec-opt=Cyrix
-----
INSTRUCTION: 0F 51 /r | PADDSIW mm, mm/m64 | CYRIX_EMMI
  ops: r=reg r=rm | Packed64_Int16
  implied: emmi-reg=w
  flags: 16 32 dec-opt=Cyrix
-----
INSTRUCTION: 0F 52 /r | PMAGW mm, mm/m64 | CYRIX_EMMI
  ops: rcw=reg r=rm | Packed64_UInt16
  flags: 16 32 dec-opt=Cyrix
-----
INSTRUCTION: 0F 54 /r | PDISTIB mm, m64 | CYRIX_EMMI
  ops: r=reg r=rm | Packed64_UInt8
  implied: emmi-reg=rw
  flags: 16 32 dec-opt=Cyrix
-----
INSTRUCTION: 0F 55 /r | PSUBSIW mm, mm/m64 | CYRIX_EMMI
  ops: r=reg r=rm | Packed64_Int16
  implied: emmi-reg=w
  flags: 16 32 dec-opt=Cyrix
-----
INSTRUCTION: 0F 58 /r | PMVZB mm, m64 | CYRIX_EMMI
  ops: rcw=reg r=rm | Packed64_UInt8
  implied: emmi-reg=r
  flags: 16 32 dec-opt=Cyrix
-----
INSTRUCTION: 0F 59 /r | PMULHRW mm, mm/m64 | CYRIX_EMMI
  ops: rw=reg r=rm | Packed64_Int16
  flags: 16 32 dec-opt=Cyrix asm=pmulhrw_cyrix
  nasm: mnemonic=pmulhrwc
-----
INSTRUCTION: 0F 5A /r | PMVNZB mm, m64 | CYRIX_EMMI
  ops: rcw=reg r=rm | Packed64_UInt8
  implied: emmi-reg=r
  flags: 16 32 dec-opt=Cyrix
-----
INSTRUCTION: 0F 5B /r | PMVLZB mm, m64 | CYRIX_EMMI
  ops: rcw=reg r=rm | Packed64_Int8
  implied: emmi-reg=r
  flags: 16 32 dec-opt=Cyrix
-----
INSTRUCTION: 0F 5C /r | PMVGEZB mm, m64 | CYRIX_EMMI
  ops: rcw=reg r=rm | Packed64_Int8
  implied: emmi-reg=r
  flags: 16 32 dec-opt=Cyrix
-----
INSTRUCTION: 0F 5D /r | PMULHRIW mm, mm/m64 | CYRIX_EMMI
  ops: r=reg r=rm | Packed64_Int16
  implied: emmi-reg=w
  flags: 16 32 dec-opt=Cyrix
-----
INSTRUCTION: 0F 5E /r | PMACHRIW mm, m64 | CYRIX_EMMI
  ops: r=reg r=rm | Packed64_UInt16
  implied: emmi-reg=rw
  flags: 16 32 dec-opt=Cyrix
-----
INSTRUCTION: D9 D7 | UNDOC | CYRIX_FPU
  code-mnemonic: cyrix
  code-suffix: D9D7
  rflags: u=0123
  flags: 16 32 dec-opt=Cyrix asm-ig
-----
INSTRUCTION: D9 E2 | UNDOC | CYRIX_FPU
  code-mnemonic: cyrix
  code-suffix: D9E2
  rflags: u=0123
  flags: 16 32 dec-opt=Cyrix asm-ig
-----
INSTRUCTION: D9 E6 | FTSTP | CYRIX_FPU
  implied: r=st0
  rflags: 0=1 w=023
  flags: 16 32 dec-opt=Cyrix fpu-pop=1 asm-ig
-----
INSTRUCTION: D9 E7 | UNDOC | CYRIX_FPU
  code-mnemonic: cyrix
  code-suffix: D9E7
  rflags: u=0123
  flags: 16 32 dec-opt=Cyrix asm-ig
-----
INSTRUCTION: DB FC | FRINT2 | CYRIX_FPU
  implied: rw=st0
  rflags: w=1 u=023
  flags: 16 32 dec-opt=Cyrix asm-ig
-----
INSTRUCTION: DD FC | FRICHOP | CYRIX_FPU
  implied: rw=st0
  rflags: w=1 u=023
  flags: 16 32 dec-opt=Cyrix asm-ig
-----
INSTRUCTION: DE D8 | UNDOC | CYRIX_FPU
  code-mnemonic: cyrix
  code-suffix: DED8
  rflags: u=0123
  flags: 16 32 dec-opt=Cyrix asm-ig
-----
INSTRUCTION: DE DA | UNDOC | CYRIX_FPU
  code-mnemonic: cyrix
  code-suffix: DEDA
  rflags: u=0123
  flags: 16 32 dec-opt=Cyrix asm-ig
-----
INSTRUCTION: DE DC | UNDOC | CYRIX_FPU
  code-mnemonic: cyrix
  code-suffix: DEDC
  rflags: u=0123
  flags: 16 32 dec-opt=Cyrix asm-ig
-----
INSTRUCTION: DE DD | UNDOC | CYRIX_FPU
  code-mnemonic: cyrix
  code-suffix: DEDD
  rflags: u=0123
  flags: 16 32 dec-opt=Cyrix asm-ig
-----
INSTRUCTION: DE DE | UNDOC | CYRIX_FPU
  code-mnemonic: cyrix
  code-suffix: DEDE
  rflags: u=0123
  flags: 16 32 dec-opt=Cyrix asm-ig
-----
INSTRUCTION: DF FC | FRINEAR | CYRIX_FPU
  implied: rw=st0
  rflags: w=1 u=023
  flags: 16 32 dec-opt=Cyrix asm-ig
-----
INSTRUCTION: 66 0F 01 CC | TDCALL | TDX
  flags: cpl0 cflow=call vmx=non-root intel-vm-exit tsx-impl-abort
-----
INSTRUCTION: 66 0F 01 CD | SEAMRET | TDX
  rflags: w=zc 0=osap
  flags: 64 cpl0 cflow=call vmx=root no-outside-seam tsx-impl-abort
-----
INSTRUCTION: 66 0F 01 CE | SEAMOPS | TDX
  implied: rw=rax cr=rcx;rdx;r8;r9
  #TODO: should be cond-write (no flags are written if rax==0)
  rflags: w=z 0=osacp
  flags: 64 cpl0 vmx=root no-outside-seam tsx-impl-abort
-----
INSTRUCTION: 66 0F 01 CF | SEAMCALL | TDX
  implied: r=rax
  rflags: w=c 0=oszap
  flags: 64 cpl0 cflow=call vmx=op intel-vm-exit no-in-smm no-in-seam tsx-impl-abort
-----
INSTRUCTION: F3 0F 38 D8 !(11):000:bbb | AESENCWIDE128KL m384, <XMM0-7> | AESKLE WIDE_KL
  ops: r=rm | KLHandleAes128
  implied: rw=xmm0-xmm7
  rflags: w=z 0=osacp
  flags: tsx-impl-abort
-----
INSTRUCTION: F3 0F 38 D8 !(11):001:bbb | AESDECWIDE128KL m384, <XMM0-7> | AESKLE WIDE_KL
  ops: r=rm | KLHandleAes128
  implied: rw=xmm0-xmm7
  rflags: w=z 0=osacp
  flags: tsx-impl-abort
-----
INSTRUCTION: F3 0F 38 D8 !(11):010:bbb | AESENCWIDE256KL m512, <XMM0-7> | AESKLE WIDE_KL
  ops: r=rm | KLHandleAes256
  implied: rw=xmm0-xmm7
  rflags: w=z 0=osacp
  flags: tsx-impl-abort
-----
INSTRUCTION: F3 0F 38 D8 !(11):011:bbb | AESDECWIDE256KL m512, <XMM0-7> | AESKLE WIDE_KL
  ops: r=rm | KLHandleAes256
  implied: rw=xmm0-xmm7
  rflags: w=z 0=osacp
  flags: tsx-impl-abort
-----
INSTRUCTION: F3 0F 38 DC 11:rrr:bbb | LOADIWKEY xmm1, xmm2, <EAX>, <XMM0> | KL
  ops: r=reg r=rm
  implied: r=eax;xmm0
  rflags: w=z 0=osacp
  flags: cpl0 tsx-impl-abort intel-may-vm-exit
-----
INSTRUCTION: F3 0F 38 DC !(11):rrr:bbb | AESENC128KL xmm, m384 | AESKLE
  ops: rw=reg r=rm | KLHandleAes128
  rflags: w=z 0=osacp
  flags: tsx-impl-abort
-----
INSTRUCTION: F3 0F 38 DD !(11):rrr:bbb | AESDEC128KL xmm, m384 | AESKLE
  ops: rw=reg r=rm | KLHandleAes128
  rflags: w=z 0=osacp
  flags: tsx-impl-abort
-----
INSTRUCTION: F3 0F 38 DE !(11):rrr:bbb | AESENC256KL xmm, m512 | AESKLE
  ops: rw=reg r=rm | KLHandleAes256
  rflags: w=z 0=osacp
  flags: tsx-impl-abort
-----
INSTRUCTION: F3 0F 38 DF !(11):rrr:bbb | AESDEC256KL xmm, m512 | AESKLE
  ops: rw=reg r=rm | KLHandleAes256
  rflags: w=z 0=osacp
  flags: tsx-impl-abort
-----
INSTRUCTION: F3 0F 38 FA 11:rrr:bbb | ENCODEKEY128 r32, r32, <XMM0-2>, <XMM4-6> | AESKLE
  ops: w=reg r=rm
  implied: rw=xmm0 w=xmm1;xmm2;xmm4-xmm6
  rflags: 0=oszacp
  flags: tsx-impl-abort
-----
INSTRUCTION: F3 0F 38 FB 11:rrr:bbb | ENCODEKEY256 r32, r32, <XMM0-6> | AESKLE
  ops: w=reg r=rm
  implied: rw=xmm0;xmm1 w=xmm2-xmm6
  rflags: 0=oszacp
  flags: tsx-impl-abort
-----
INSTRUCTION: VEX.128.66.0F38.W0 18 /r | VBROADCASTSS xmm1, xmm2 | AVX2
  ops: w=reg r=rm
-----
INSTRUCTION: VEX.256.66.0F38.W0 18 /r | VBROADCASTSS ymm1, xmm2 | AVX2
  ops: w=reg r=rm
-----
INSTRUCTION: VEX.256.66.0F38.W0 19 /r | VBROADCASTSD ymm1, xmm2 | AVX2
  ops: w=reg r=rm
-----
INSTRUCTION: F3 0F 01 EC | UIRET | UINTR
  implied: pop=3x8
  rflags: w=cpazsdoA 1=u
  flags: 64 sp=pop;24 cflow=ret no-in-sgx tsx-abort
-----
INSTRUCTION: F3 0F 01 ED | TESTUI | UINTR
  rflags: r=u w=c 0=zaops
  flags: 64 no-in-sgx
-----
INSTRUCTION: F3 0F 01 EE | CLUI | UINTR
  rflags: 0=u
  flags: 64 no-in-sgx tsx-abort
-----
INSTRUCTION: F3 0F 01 EF | STUI | UINTR
  rflags: 1=u
  flags: 64 no-in-sgx tsx-abort
-----
INSTRUCTION: F3 0F C7 /6 | SENDUIPI r64 | UINTR
  ops: r=rm
  #TODO: is this tsx-abort?
  flags: 64 fo64 intel-may-vm-exit no-in-sgx
-----
INSTRUCTION: F3 0F 3A F0 C0 ib | HRESET imm8, <EAX> | HRESET
  ops: n=imm
  implied: r=eax
  flags: cpl0 tsx-abort
-----
INSTRUCTION: VEX.128.66.0F38.W0 50 /r | VPDPBUSD xmm1, xmm2, xmm3/m128 | AVX_VNNI
  ops: rw=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.256.66.0F38.W0 50 /r | VPDPBUSD ymm1, ymm2, ymm3/m256 | AVX_VNNI
  ops: rw=reg r=vvvv r=rm | Packed256_Int8
-----
INSTRUCTION: VEX.128.66.0F38.W0 51 /r | VPDPBUSDS xmm1, xmm2, xmm3/m128 | AVX_VNNI
  ops: rw=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.256.66.0F38.W0 51 /r | VPDPBUSDS ymm1, ymm2, ymm3/m256 | AVX_VNNI
  ops: rw=reg r=vvvv r=rm | Packed256_Int8
-----
INSTRUCTION: VEX.128.66.0F38.W0 52 /r | VPDPWSSD xmm1, xmm2, xmm3/m128 | AVX_VNNI
  ops: rw=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F38.W0 52 /r | VPDPWSSD ymm1, ymm2, ymm3/m256 | AVX_VNNI
  ops: rw=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: VEX.128.66.0F38.W0 53 /r | VPDPWSSDS xmm1, xmm2, xmm3/m128 | AVX_VNNI
  ops: rw=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.66.0F38.W0 53 /r | VPDPWSSDS ymm1, ymm2, ymm3/m256 | AVX_VNNI
  ops: rw=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: a16 F3 0F A6 E8 | CCS_HASH | PADLOCK_GMI
  # https: //github.com/ZXOpenSource/OpenSSL-ZX-GMI/blob/master/GMI%20User%20Manual%20V1.0.pdf
  # OpenSSL PR: https://github.com/openssl/openssl/pull/8706
  implied: cr=[es:si=Unknown] crcw=[es:di=Unknown] cw=si rcw=ax;cx cr=bx
  code-suffix: 16
  flags: 16 32 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a32 F3 0F A6 E8 | CCS_HASH | PADLOCK_GMI
  implied: cr=[es:esi=Unknown] crcw=[es:edi=Unknown] cw=esi rcw=eax;ecx cr=ebx
  code-suffix: 32
  flags: ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a64 F3 0F A6 E8 | CCS_HASH | PADLOCK_GMI
  implied: cr=[es:rsi=Unknown] crcw=[es:rdi=Unknown] cw=rsi rcw=rax;rcx cr=rbx
  code-suffix: 64
  flags: 64 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a16 F3 0F A6 F0 | UNDOC | PADLOCK_UNDOC
  code-mnemonic: via_undoc
  code-suffix: F30FA6F0_16
  flags: 16 32 ig-modrm-low3 save-restore asm-ig
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a32 F3 0F A6 F0 | UNDOC | PADLOCK_UNDOC
  code-mnemonic: via_undoc
  code-suffix: F30FA6F0_32
  flags: ig-modrm-low3 save-restore asm-ig
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a64 F3 0F A6 F0 | UNDOC | PADLOCK_UNDOC
  code-mnemonic: via_undoc
  code-suffix: F30FA6F0_64
  flags: 64 ig-modrm-low3 save-restore asm-ig
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a16 F3 0F A6 F8 | UNDOC | PADLOCK_UNDOC
  code-mnemonic: via_undoc
  code-suffix: F30FA6F8_16
  flags: 16 32 ig-modrm-low3 save-restore asm-ig
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a32 F3 0F A6 F8 | UNDOC | PADLOCK_UNDOC
  code-mnemonic: via_undoc
  code-suffix: F30FA6F8_32
  flags: ig-modrm-low3 save-restore asm-ig
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a64 F3 0F A6 F8 | UNDOC | PADLOCK_UNDOC
  code-mnemonic: via_undoc
  code-suffix: F30FA6F8_64
  flags: 64 ig-modrm-low3 save-restore asm-ig
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a16 F3 0F A7 F0 | CCS_ENCRYPT | PADLOCK_GMI
  # https: //github.com/ZXOpenSource/OpenSSL-ZX-GMI/blob/master/GMI%20User%20Manual%20V1.0.pdf
  # OpenSSL PR: https://github.com/openssl/openssl/pull/8706
  implied: cr=[es:dx=Unknown];[es:bx=Unknown];[es:si=Unknown] cw=[es:di=Unknown] rcw=cx cw=si;di cr=ax
  code-suffix: 16
  flags: 16 32 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a32 F3 0F A7 F0 | CCS_ENCRYPT | PADLOCK_GMI
  implied: cr=[es:edx=Unknown];[es:ebx=Unknown];[es:esi=Unknown] cw=[es:edi=Unknown] rcw=ecx cw=esi;edi cr=eax
  code-suffix: 32
  flags: ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: a64 F3 0F A7 F0 | CCS_ENCRYPT | PADLOCK_GMI
  implied: cr=[es:rdx=Unknown];[es:rbx=Unknown];[es:rsi=Unknown] cw=[es:rdi=Unknown] rcw=rcx cw=rsi;rdi cr=rax
  code-suffix: 64
  flags: 64 ig-modrm-low3
  gas: asz
  intel: asz
  nasm: asz
-----
INSTRUCTION: o16 F2 0F 00 /6 | LKGS r/m16 | LKGS
  ops: r=rm | UInt16
  implied: w=gs
  flags: 64 cpl0
  gas: reg16
  masm: flags=force-size=default
  nasm: osz-reg16
-----
INSTRUCTION: o32 F2 0F 00 /6 | LKGS r32/m16 | LKGS
  ops: r=rm | UInt16
  implied: last-gpr-16 w=gs
  flags: 64 cpl0
  gas: reg16
  masm: flags=force-size=default
  nasm: osz-reg16
-----
INSTRUCTION: F2 o64 0F 00 /6 | LKGS r64/m16 | LKGS
  ops: r=rm | UInt16
  implied: last-gpr-16 w=gs
  flags: 64 cpl0
  gas: reg16
  masm: flags=force-size=default
  nasm: osz-reg16
-----
INSTRUCTION: F3 0F 01 CA | ERETU | FRED
  implied: pop=6x8 w=rsp;cs;ss
  rflags: w=oszacpdiA
  flags: 64 cpl0 sp=pop;48 cflow=ret
-----
INSTRUCTION: F2 0F 01 CA | ERETS | FRED
  implied: pop=6x8 w=rsp r=cs;ss
  rflags: w=oszacpdiA
  flags: 64 cpl0 sp=pop;48 cflow=ret
-----
INSTRUCTION: EVEX.128.MAP5.W0 58 /r | VADDPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.MAP5.W0 58 /r | VADDPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.MAP5.W0 58 /r | VADDPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 58 /r | VADDSH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm | Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.0F3A.W0 C2 /r ib | VCMPPH k1 {k2}, xmm2, xmm3/m128/m16bcst, imm8 | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=vvvv r=rm r=imm | Packed128_Float16 Broadcast128_Float16
  flags: pseudo=vcmpph implied-z
-----
INSTRUCTION: EVEX.256.0F3A.W0 C2 /r ib | VCMPPH k1 {k2}, ymm2, ymm3/m256/m16bcst, imm8 | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=vvvv r=rm r=imm | Packed256_Float16 Broadcast256_Float16
  flags: pseudo=vcmpph implied-z
-----
INSTRUCTION: EVEX.512.0F3A.W0 C2 /r ib | VCMPPH k1 {k2}, zmm2, zmm3/m512/m16bcst{sae}, imm8 | AVX512_FP16 | N64b2
  ops: w=reg r=vvvv r=rm r=imm | Packed512_Float16 Broadcast512_Float16
  flags: pseudo=vcmpph implied-z
-----
INSTRUCTION: EVEX.LIG.F3.0F3A.W0 C2 /r ib | VCMPSH k1 {k2}, xmm2, xmm3/m16{sae}, imm8 | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm r=imm | Float16
  flags: pseudo=vcmpsh implied-z
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.MAP5.W0 2F /r | VCOMISH xmm1, xmm2/m16{sae} | AVX512_FP16 | N2
  ops: r=reg r=rm | Float16
  rflags: w=zcp 0=osa
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.MAP5.W0 5B /r | VCVTDQ2PH xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512_FP16 | N16b4
  ops: w=reg r=rm | Packed128_Int32 Broadcast128_Int32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.MAP5.W0 5B /r | VCVTDQ2PH xmm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512_FP16 | N32b4
  ops: w=reg r=rm | Packed256_Int32 Broadcast256_Int32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.MAP5.W0 5B /r | VCVTDQ2PH ymm1 {k1}{z}, zmm2/m512/m32bcst{er} | AVX512_FP16 | N64b4
  ops: w=reg r=rm | Packed512_Int32 Broadcast512_Int32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.MAP5.W1 5A /r | VCVTPD2PH xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512_FP16 | N16b8
  ops: w=reg r=rm | Packed128_Float64 Broadcast128_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.66.MAP5.W1 5A /r | VCVTPD2PH xmm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512_FP16 | N32b8
  ops: w=reg r=rm | Packed256_Float64 Broadcast256_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.66.MAP5.W1 5A /r | VCVTPD2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er} | AVX512_FP16 | N64b8
  ops: w=reg r=rm | Packed512_Float64 Broadcast512_Float64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=z
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.128.66.MAP5.W0 5B /r | VCVTPH2DQ xmm1 {k1}{z}, xmm2/m64/m16bcst | AVX512VL AVX512_FP16 | N8b2
  ops: w=reg r=rm | Packed64_Float16 Broadcast64_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.MAP5.W0 5B /r | VCVTPH2DQ ymm1 {k1}{z}, xmm2/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm | Packed128_Float16 Broadcast128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.MAP5.W0 5B /r | VCVTPH2DQ zmm1 {k1}{z}, ymm2/m256/m16bcst{er} | AVX512_FP16 | N32b2
  ops: wvmm=reg r=rm | Packed256_Float16 Broadcast256_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.MAP5.W0 5A /r | VCVTPH2PD xmm1 {k1}{z}, xmm2/m32/m16bcst | AVX512VL AVX512_FP16 | N4b2
  ops: w=reg r=rm | Packed32_Float16 Broadcast32_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.MAP5.W0 5A /r | VCVTPH2PD ymm1 {k1}{z}, xmm2/m64/m16bcst | AVX512VL AVX512_FP16 | N8b2
  ops: w=reg r=rm | Packed64_Float16 Broadcast64_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.MAP5.W0 5A /r | VCVTPH2PD zmm1 {k1}{z}, xmm2/m128/m16bcst{sae} | AVX512_FP16 | N16b2
  ops: wvmm=reg r=rm | Packed128_Float16 Broadcast128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 13 /r | VCVTPH2PSX xmm1 {k1}{z}, xmm2/m64/m16bcst | AVX512VL AVX512_FP16 | N8b2
  ops: w=reg r=rm | Packed64_Float16 Broadcast64_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 13 /r | VCVTPH2PSX ymm1 {k1}{z}, xmm2/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm | Packed128_Float16 Broadcast128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 13 /r | VCVTPH2PSX zmm1 {k1}{z}, ymm2/m256/m16bcst{sae} | AVX512_FP16 | N32b2
  ops: wvmm=reg r=rm | Packed256_Float16 Broadcast256_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.MAP5.W0 7B /r | VCVTPH2QQ xmm1 {k1}{z}, xmm2/m32/m16bcst | AVX512VL AVX512_FP16 | N4b2
  ops: w=reg r=rm | Packed32_Float16 Broadcast32_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.MAP5.W0 7B /r | VCVTPH2QQ ymm1 {k1}{z}, xmm2/m64/m16bcst | AVX512VL AVX512_FP16 | N8b2
  ops: w=reg r=rm | Packed64_Float16 Broadcast64_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.MAP5.W0 7B /r | VCVTPH2QQ zmm1 {k1}{z}, xmm2/m128/m16bcst{er} | AVX512_FP16 | N16b2
  ops: wvmm=reg r=rm | Packed128_Float16 Broadcast128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.MAP5.W0 79 /r | VCVTPH2UDQ xmm1 {k1}{z}, xmm2/m64/m16bcst | AVX512VL AVX512_FP16 | N8b2
  ops: w=reg r=rm | Packed64_Float16 Broadcast64_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.MAP5.W0 79 /r | VCVTPH2UDQ ymm1 {k1}{z}, xmm2/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm | Packed128_Float16 Broadcast128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.MAP5.W0 79 /r | VCVTPH2UDQ zmm1 {k1}{z}, ymm2/m256/m16bcst{er} | AVX512_FP16 | N32b2
  ops: wvmm=reg r=rm | Packed256_Float16 Broadcast256_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.MAP5.W0 79 /r | VCVTPH2UQQ xmm1 {k1}{z}, xmm2/m32/m16bcst | AVX512VL AVX512_FP16 | N4b2
  ops: w=reg r=rm | Packed32_Float16 Broadcast32_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.MAP5.W0 79 /r | VCVTPH2UQQ ymm1 {k1}{z}, xmm2/m64/m16bcst | AVX512VL AVX512_FP16 | N8b2
  ops: w=reg r=rm | Packed64_Float16 Broadcast64_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.MAP5.W0 79 /r | VCVTPH2UQQ zmm1 {k1}{z}, xmm2/m128/m16bcst{er} | AVX512_FP16 | N16b2
  ops: wvmm=reg r=rm | Packed128_Float16 Broadcast128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.MAP5.W0 7D /r | VCVTPH2UW xmm1 {k1}{z}, xmm2/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm | Packed128_Float16 Broadcast128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.MAP5.W0 7D /r | VCVTPH2UW ymm1 {k1}{z}, ymm2/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=rm | Packed256_Float16 Broadcast256_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.MAP5.W0 7D /r | VCVTPH2UW zmm1 {k1}{z}, zmm2/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: wvmm=reg r=rm | Packed512_Float16 Broadcast512_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.MAP5.W0 7D /r | VCVTPH2W xmm1 {k1}{z}, xmm2/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm | Packed128_Float16 Broadcast128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.MAP5.W0 7D /r | VCVTPH2W ymm1 {k1}{z}, ymm2/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=rm | Packed256_Float16 Broadcast256_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.MAP5.W0 7D /r | VCVTPH2W zmm1 {k1}{z}, zmm2/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: wvmm=reg r=rm | Packed512_Float16 Broadcast512_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.MAP5.W0 1D /r | VCVTPS2PHX xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512_FP16 | N16b4
  ops: w=reg r=rm | Packed128_Float32 Broadcast128_Float32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.66.MAP5.W0 1D /r | VCVTPS2PHX xmm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512_FP16 | N32b4
  ops: w=reg r=rm | Packed256_Float32 Broadcast256_Float32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.66.MAP5.W0 1D /r | VCVTPS2PHX ymm1 {k1}{z}, zmm2/m512/m32bcst{er} | AVX512_FP16 | N64b4
  ops: w=reg r=rm | Packed512_Float32 Broadcast512_Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.MAP5.W1 5B /r | VCVTQQ2PH xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512_FP16 | N16b8
  ops: w=reg r=rm | Packed128_Int64 Broadcast128_Int64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.MAP5.W1 5B /r | VCVTQQ2PH xmm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512_FP16 | N32b8
  ops: w=reg r=rm | Packed256_Int64 Broadcast256_Int64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.MAP5.W1 5B /r | VCVTQQ2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er} | AVX512_FP16 | N64b8
  ops: w=reg r=rm | Packed512_Int64 Broadcast512_Int64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=z
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.LIG.F2.MAP5.W1 5A /r | VCVTSD2SH xmm1 {k1}{z}, xmm2, xmm3/m64{er} | AVX512_FP16 | N8
  ops: w=reg r=vvvv r=rm | Float64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 5A /r | VCVTSH2SD xmm1 {k1}{z}, xmm2, xmm3/m16{sae} | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm | Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 2D /r | VCVTSH2SI r32, xmm1/m16{er} | AVX512_FP16 | N2
  ops: w=reg r=rm | Float16
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W1 2D /r | VCVTSH2SI r64, xmm1/m16{er} | AVX512_FP16 | N2
  ops: w=reg r=rm | Float16
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.MAP6.W0 13 /r | VCVTSH2SS xmm1 {k1}{z}, xmm2, xmm3/m16{sae} | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm | Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 79 /r | VCVTSH2USI r32, xmm1/m16{er} | AVX512_FP16 | N2
  ops: w=reg r=rm | Float16
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W1 79 /r | VCVTSH2USI r64, xmm1/m16{er} | AVX512_FP16 | N2
  ops: w=reg r=rm | Float16
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 2A /r | VCVTSI2SH xmm1, xmm2, r/m32{er} | AVX512_FP16 | N4
  ops: w=reg r=vvvv r=rm | Int32
  flags: wig32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W1 2A /r | VCVTSI2SH xmm1, xmm2, r/m64{er} | AVX512_FP16 | N8
  ops: w=reg r=vvvv r=rm | Int64
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.LIG.MAP5.W0 1D /r | VCVTSS2SH xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512_FP16 | N4
  ops: w=reg r=vvvv r=rm | Float32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.MAP5.W0 5B /r | VCVTTPH2DQ xmm1 {k1}{z}, xmm2/m64/m16bcst | AVX512VL AVX512_FP16 | N8b2
  ops: w=reg r=rm | Packed64_Float16 Broadcast64_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.MAP5.W0 5B /r | VCVTTPH2DQ ymm1 {k1}{z}, xmm2/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm | Packed128_Float16 Broadcast128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.MAP5.W0 5B /r | VCVTTPH2DQ zmm1 {k1}{z}, ymm2/m256/m16bcst{sae} | AVX512_FP16 | N32b2
  ops: wvmm=reg r=rm | Packed256_Float16 Broadcast256_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.MAP5.W0 7A /r | VCVTTPH2QQ xmm1 {k1}{z}, xmm2/m32/m16bcst | AVX512VL AVX512_FP16 | N4b2
  ops: w=reg r=rm | Packed32_Float16 Broadcast32_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.MAP5.W0 7A /r | VCVTTPH2QQ ymm1 {k1}{z}, xmm2/m64/m16bcst | AVX512VL AVX512_FP16 | N8b2
  ops: w=reg r=rm | Packed64_Float16 Broadcast64_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.MAP5.W0 7A /r | VCVTTPH2QQ zmm1 {k1}{z}, xmm2/m128/m16bcst{sae} | AVX512_FP16 | N16b2
  ops: wvmm=reg r=rm | Packed128_Float16 Broadcast128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.MAP5.W0 78 /r | VCVTTPH2UDQ xmm1 {k1}{z}, xmm2/m64/m16bcst | AVX512VL AVX512_FP16 | N8b2
  ops: w=reg r=rm | Packed64_Float16 Broadcast64_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.MAP5.W0 78 /r | VCVTTPH2UDQ ymm1 {k1}{z}, xmm2/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm | Packed128_Float16 Broadcast128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.MAP5.W0 78 /r | VCVTTPH2UDQ zmm1 {k1}{z}, ymm2/m256/m16bcst{sae} | AVX512_FP16 | N32b2
  ops: wvmm=reg r=rm | Packed256_Float16 Broadcast256_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.MAP5.W0 78 /r | VCVTTPH2UQQ xmm1 {k1}{z}, xmm2/m32/m16bcst | AVX512VL AVX512_FP16 | N4b2
  ops: w=reg r=rm | Packed32_Float16 Broadcast32_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.MAP5.W0 78 /r | VCVTTPH2UQQ ymm1 {k1}{z}, xmm2/m64/m16bcst | AVX512VL AVX512_FP16 | N8b2
  ops: w=reg r=rm | Packed64_Float16 Broadcast64_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.MAP5.W0 78 /r | VCVTTPH2UQQ zmm1 {k1}{z}, xmm2/m128/m16bcst{sae} | AVX512_FP16 | N16b2
  ops: wvmm=reg r=rm | Packed128_Float16 Broadcast128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.MAP5.W0 7C /r | VCVTTPH2UW xmm1 {k1}{z}, xmm2/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.MAP5.W0 7C /r | VCVTTPH2UW ymm1 {k1}{z}, ymm2/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.MAP5.W0 7C /r | VCVTTPH2UW zmm1 {k1}{z}, zmm2/m512/m16bcst{sae} | AVX512_FP16 | N64b2
  ops: wvmm=reg r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP5.W0 7C /r | VCVTTPH2W xmm1 {k1}{z}, xmm2/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP5.W0 7C /r | VCVTTPH2W ymm1 {k1}{z}, ymm2/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP5.W0 7C /r | VCVTTPH2W zmm1 {k1}{z}, zmm2/m512/m16bcst{sae} | AVX512_FP16 | N64b2
  ops: wvmm=reg r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 2C /r | VCVTTSH2SI r32, xmm1/m16{sae} | AVX512_FP16 | N2
  ops: w=reg r=rm | Float16
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W1 2C /r | VCVTTSH2SI r64, xmm1/m16{sae} | AVX512_FP16 | N2
  ops: w=reg r=rm | Float16
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 78 /r | VCVTTSH2USI r32, xmm1/m16{sae} | AVX512_FP16 | N2
  ops: w=reg r=rm | Float16
  flags: wig32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W1 78 /r | VCVTTSH2USI r64, xmm1/m16{sae} | AVX512_FP16 | N2
  ops: w=reg r=rm | Float16
  flags: 64
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F2.MAP5.W0 7A /r | VCVTUDQ2PH xmm1 {k1}{z}, xmm2/m128/m32bcst | AVX512VL AVX512_FP16 | N16b4
  ops: w=reg r=rm | Packed128_UInt32 Broadcast128_UInt32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.F2.MAP5.W0 7A /r | VCVTUDQ2PH xmm1 {k1}{z}, ymm2/m256/m32bcst | AVX512VL AVX512_FP16 | N32b4
  ops: w=reg r=rm | Packed256_UInt32 Broadcast256_UInt32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.F2.MAP5.W0 7A /r | VCVTUDQ2PH ymm1 {k1}{z}, zmm2/m512/m32bcst{er} | AVX512_FP16 | N64b4
  ops: w=reg r=rm | Packed512_UInt32 Broadcast512_UInt32
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F2.MAP5.W1 7A /r | VCVTUQQ2PH xmm1 {k1}{z}, xmm2/m128/m64bcst | AVX512VL AVX512_FP16 | N16b8
  ops: w=reg r=rm | Packed128_UInt64 Broadcast128_UInt64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.F2.MAP5.W1 7A /r | VCVTUQQ2PH xmm1 {k1}{z}, ymm2/m256/m64bcst | AVX512VL AVX512_FP16 | N32b8
  ops: w=reg r=rm | Packed256_UInt64 Broadcast256_UInt64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.F2.MAP5.W1 7A /r | VCVTUQQ2PH xmm1 {k1}{z}, zmm2/m512/m64bcst{er} | AVX512_FP16 | N64b8
  ops: w=reg r=rm | Packed512_UInt64 Broadcast512_UInt64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=z
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 7B /r | VCVTUSI2SH xmm1, xmm2, r/m32{er} | AVX512_FP16 | N4
  ops: w=reg r=vvvv r=rm | UInt32
  flags: wig32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=l
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W1 7B /r | VCVTUSI2SH xmm1, xmm2, r/m64{er} | AVX512_FP16 | N8
  ops: w=reg r=vvvv r=rm | UInt64
  flags: 64
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=q
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: EVEX.128.F2.MAP5.W0 7D /r | VCVTUW2PH xmm1 {k1}{z}, xmm2/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm | Packed128_UInt16 Broadcast128_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F2.MAP5.W0 7D /r | VCVTUW2PH ymm1 {k1}{z}, ymm2/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=rm | Packed256_UInt16 Broadcast256_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F2.MAP5.W0 7D /r | VCVTUW2PH zmm1 {k1}{z}, zmm2/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: wvmm=reg r=rm | Packed512_UInt16 Broadcast512_UInt16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F3.MAP5.W0 7D /r | VCVTW2PH xmm1 {k1}{z}, xmm2/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm | Packed128_Int16 Broadcast128_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.F3.MAP5.W0 7D /r | VCVTW2PH ymm1 {k1}{z}, ymm2/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=rm | Packed256_Int16 Broadcast256_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.F3.MAP5.W0 7D /r | VCVTW2PH zmm1 {k1}{z}, zmm2/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: wvmm=reg r=rm | Packed512_Int16 Broadcast512_Int16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.MAP5.W0 5E /r | VDIVPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.MAP5.W0 5E /r | VDIVPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.MAP5.W0 5E /r | VDIVPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 5E /r | VDIVSH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm | Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.F2.MAP6.W0 56 /r | VFCMADDCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512_FP16 | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_2xFloat16 Broadcast128_2xFloat16
  flags: unique-dest-reg-num
-----
INSTRUCTION: EVEX.256.F2.MAP6.W0 56 /r | VFCMADDCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512_FP16 | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_2xFloat16 Broadcast256_2xFloat16
  flags: unique-dest-reg-num
-----
INSTRUCTION: EVEX.512.F2.MAP6.W0 56 /r | VFCMADDCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512_FP16 | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_2xFloat16 Broadcast512_2xFloat16
  flags: unique-dest-reg-num
-----
INSTRUCTION: EVEX.128.F3.MAP6.W0 56 /r | VFMADDCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512_FP16 | N16b4
  ops: rw=reg r=vvvv r=rm | Packed128_2xFloat16 Broadcast128_2xFloat16
  flags: unique-dest-reg-num
-----
INSTRUCTION: EVEX.256.F3.MAP6.W0 56 /r | VFMADDCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512_FP16 | N32b4
  ops: rw=reg r=vvvv r=rm | Packed256_2xFloat16 Broadcast256_2xFloat16
  flags: unique-dest-reg-num
-----
INSTRUCTION: EVEX.512.F3.MAP6.W0 56 /r | VFMADDCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512_FP16 | N64b4
  ops: rwvmm=reg r=vvvv r=rm | Packed512_2xFloat16 Broadcast512_2xFloat16
  flags: unique-dest-reg-num
-----
INSTRUCTION: EVEX.LIG.F2.MAP6.W0 57 /r | VFCMADDCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512_FP16 | N4
  ops: rw=reg r=vvvv r=rm | Packed32_Float16
  flags: unique-dest-reg-num
-----
INSTRUCTION: EVEX.LIG.F3.MAP6.W0 57 /r | VFMADDCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512_FP16 | N4
  ops: rw=reg r=vvvv r=rm | Packed32_Float16
  flags: unique-dest-reg-num
-----
INSTRUCTION: EVEX.128.F2.MAP6.W0 D6 /r | VFCMULCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512_FP16 | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_2xFloat16 Broadcast128_2xFloat16
  flags: unique-dest-reg-num
-----
INSTRUCTION: EVEX.256.F2.MAP6.W0 D6 /r | VFCMULCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512_FP16 | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_2xFloat16 Broadcast256_2xFloat16
  flags: unique-dest-reg-num
-----
INSTRUCTION: EVEX.512.F2.MAP6.W0 D6 /r | VFCMULCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512_FP16 | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_2xFloat16 Broadcast512_2xFloat16
  flags: unique-dest-reg-num
-----
INSTRUCTION: EVEX.128.F3.MAP6.W0 D6 /r | VFMULCPH xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst | AVX512VL AVX512_FP16 | N16b4
  ops: w=reg r=vvvv r=rm | Packed128_2xFloat16 Broadcast128_2xFloat16
  flags: unique-dest-reg-num
-----
INSTRUCTION: EVEX.256.F3.MAP6.W0 D6 /r | VFMULCPH ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst | AVX512VL AVX512_FP16 | N32b4
  ops: w=reg r=vvvv r=rm | Packed256_2xFloat16 Broadcast256_2xFloat16
  flags: unique-dest-reg-num
-----
INSTRUCTION: EVEX.512.F3.MAP6.W0 D6 /r | VFMULCPH zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er} | AVX512_FP16 | N64b4
  ops: wvmm=reg r=vvvv r=rm | Packed512_2xFloat16 Broadcast512_2xFloat16
  flags: unique-dest-reg-num
-----
INSTRUCTION: EVEX.LIG.F2.MAP6.W0 D7 /r | VFCMULCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512_FP16 | N4
  ops: w=reg r=vvvv r=rm | Packed32_Float16
  flags: unique-dest-reg-num
-----
INSTRUCTION: EVEX.LIG.F3.MAP6.W0 D7 /r | VFMULCSH xmm1 {k1}{z}, xmm2, xmm3/m32{er} | AVX512_FP16 | N4
  ops: w=reg r=vvvv r=rm | Packed32_Float16
  flags: unique-dest-reg-num
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 96 /r | VFMADDSUB132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 96 /r | VFMADDSUB132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 96 /r | VFMADDSUB132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 A6 /r | VFMADDSUB213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 A6 /r | VFMADDSUB213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 A6 /r | VFMADDSUB213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 B6 /r | VFMADDSUB231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 B6 /r | VFMADDSUB231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 B6 /r | VFMADDSUB231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 97 /r | VFMSUBADD132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 97 /r | VFMSUBADD132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 97 /r | VFMSUBADD132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 A7 /r | VFMSUBADD213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 A7 /r | VFMSUBADD213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 A7 /r | VFMSUBADD213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 B7 /r | VFMSUBADD231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 B7 /r | VFMSUBADD231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 B7 /r | VFMSUBADD231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 98 /r | VFMADD132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 98 /r | VFMADD132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 98 /r | VFMADD132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 A8 /r | VFMADD213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 A8 /r | VFMADD213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 A8 /r | VFMADD213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 B8 /r | VFMADD231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 B8 /r | VFMADD231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 B8 /r | VFMADD231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 9C /r | VFNMADD132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 9C /r | VFNMADD132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 9C /r | VFNMADD132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 AC /r | VFNMADD213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 AC /r | VFNMADD213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 AC /r | VFNMADD213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 BC /r | VFNMADD231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 BC /r | VFNMADD231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 BC /r | VFNMADD231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.LIG.66.MAP6.W0 99 /r | VFMADD132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: rw=reg r=vvvv r=rm | Float16
-----
INSTRUCTION: EVEX.LIG.66.MAP6.W0 A9 /r | VFMADD213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: rw=reg r=vvvv r=rm | Float16
-----
INSTRUCTION: EVEX.LIG.66.MAP6.W0 B9 /r | VFMADD231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: rw=reg r=vvvv r=rm | Float16
-----
INSTRUCTION: EVEX.LIG.66.MAP6.W0 9D /r | VFNMADD132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: rw=reg r=vvvv r=rm | Float16
-----
INSTRUCTION: EVEX.LIG.66.MAP6.W0 AD /r | VFNMADD213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: rw=reg r=vvvv r=rm | Float16
-----
INSTRUCTION: EVEX.LIG.66.MAP6.W0 BD /r | VFNMADD231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: rw=reg r=vvvv r=rm | Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 9A /r | VFMSUB132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 9A /r | VFMSUB132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 9A /r | VFMSUB132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 AA /r | VFMSUB213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 AA /r | VFMSUB213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 AA /r | VFMSUB213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 BA /r | VFMSUB231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 BA /r | VFMSUB231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 BA /r | VFMSUB231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 9E /r | VFNMSUB132PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 9E /r | VFNMSUB132PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 9E /r | VFNMSUB132PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 AE /r | VFNMSUB213PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 AE /r | VFNMSUB213PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 AE /r | VFNMSUB213PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 BE /r | VFNMSUB231PH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: rw=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 BE /r | VFNMSUB231PH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: rw=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 BE /r | VFNMSUB231PH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: rwvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.LIG.66.MAP6.W0 9B /r | VFMSUB132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: rw=reg r=vvvv r=rm | Float16
-----
INSTRUCTION: EVEX.LIG.66.MAP6.W0 AB /r | VFMSUB213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: rw=reg r=vvvv r=rm | Float16
-----
INSTRUCTION: EVEX.LIG.66.MAP6.W0 BB /r | VFMSUB231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: rw=reg r=vvvv r=rm | Float16
-----
INSTRUCTION: EVEX.LIG.66.MAP6.W0 9F /r | VFNMSUB132SH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: rw=reg r=vvvv r=rm | Float16
-----
INSTRUCTION: EVEX.LIG.66.MAP6.W0 AF /r | VFNMSUB213SH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: rw=reg r=vvvv r=rm | Float16
-----
INSTRUCTION: EVEX.LIG.66.MAP6.W0 BF /r | VFNMSUB231SH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: rw=reg r=vvvv r=rm | Float16
-----
INSTRUCTION: EVEX.128.0F3A.W0 66 /r ib | VFPCLASSPH k1 {k2}, xmm2/m128/m16bcst, imm8 | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm r=imm | Packed128_Float16 Broadcast128_Float16
  flags: implied-z
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.256.0F3A.W0 66 /r ib | VFPCLASSPH k1 {k2}, ymm2/m256/m16bcst, imm8 | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=rm r=imm | Packed256_Float16 Broadcast256_Float16
  flags: implied-z
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.512.0F3A.W0 66 /r ib | VFPCLASSPH k1 {k2}, zmm2/m512/m16bcst, imm8 | AVX512_FP16 | N64b2
  ops: w=reg r=rm r=imm | Packed512_Float16 Broadcast512_Float16
  flags: implied-z
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=z
  intel: flags=force-size=always bcst
  masm: flags=force-size=always
  nasm: flags=force-size=always bcst
-----
INSTRUCTION: EVEX.LIG.0F3A.W0 67 /r ib | VFPCLASSSH k1 {k2}, xmm2/m16, imm8 | AVX512_FP16 | N2
  ops: w=reg r=rm r=imm | Float16
  flags: implied-z
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 42 /r | VGETEXPPH xmm1 {k1}{z}, xmm2/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 42 /r | VGETEXPPH ymm1 {k1}{z}, ymm2/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 42 /r | VGETEXPPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae} | AVX512_FP16 | N64b2
  ops: wvmm=reg r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.LIG.66.MAP6.W0 43 /r | VGETEXPSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae} | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm | Float16
-----
INSTRUCTION: EVEX.128.0F3A.W0 26 /r ib | VGETMANTPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8 | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm r=imm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.0F3A.W0 26 /r ib | VGETMANTPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8 | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=rm r=imm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.0F3A.W0 26 /r ib | VGETMANTPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8 | AVX512_FP16 | N64b2
  ops: wvmm=reg r=rm r=imm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.LIG.0F3A.W0 27 /r ib | VGETMANTSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8 | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm r=imm | Float16
-----
INSTRUCTION: EVEX.128.MAP5.W0 5F /r | VMAXPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.MAP5.W0 5F /r | VMAXPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.MAP5.W0 5F /r | VMAXPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{sae} | AVX512_FP16 | N64b2
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 5F /r | VMAXSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae} | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm | Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.MAP5.W0 5D /r | VMINPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.MAP5.W0 5D /r | VMINPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.MAP5.W0 5D /r | VMINPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{sae} | AVX512_FP16 | N64b2
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 5D /r | VMINSH xmm1 {k1}{z}, xmm2, xmm3/m16{sae} | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm | Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 10 /r | VMOVSH xmm1 {k1}{z}, m16 | AVX512_FP16 | N2
  ops: w=reg r=rm | Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 11 /r | VMOVSH m16 {k1}, xmm1 | AVX512_FP16 | N2
  ops: w=rm r=reg | Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 10 /r | VMOVSH xmm1 {k1}{z}, xmm2, xmm3 | AVX512_FP16
  ops: w=reg r=vvvv r=rm
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 11 /r | VMOVSH xmm1 {k1}{z}, xmm2, xmm3 | AVX512_FP16
  ops: w=rm r=vvvv r=reg
  code-suffix: MAP5_11
  flags: asm-ig
-----
INSTRUCTION: EVEX.128.66.MAP5.W0 6E /r | VMOVW xmm1, r32/m16 | AVX512_FP16 | N2
  ops: w=reg r=rm | UInt16
  implied: last-gpr-16
  flags: wig32
  gas: reg32
  intel: reg32
  masm: flags=force-size=default reg32
  nasm: reg32
-----
INSTRUCTION: EVEX.128.66.MAP5.W1 6E /r | VMOVW xmm1, r64/m16 | AVX512_FP16 | N2
  ops: w=reg r=rm | UInt16
  implied: last-gpr-16
  flags: 64
  gas: reg32
  intel: reg32
  masm: flags=force-size=default reg32
  nasm: reg32
-----
INSTRUCTION: EVEX.128.66.MAP5.W0 7E /r | VMOVW r32/m16, xmm1 | AVX512_FP16 | N2
  ops: w=rm r=reg | UInt16
  flags: wig32
  gas: reg32
  intel: reg32
  masm: flags=force-size=default reg32
  nasm: reg32
-----
INSTRUCTION: EVEX.128.66.MAP5.W1 7E /r | VMOVW r64/m16, xmm1 | AVX512_FP16 | N2
  ops: w=rm r=reg | UInt16
  flags: 64
  gas: reg32
  intel: reg32
  masm: flags=force-size=default reg32
  nasm: reg32
-----
INSTRUCTION: EVEX.128.MAP5.W0 59 /r | VMULPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.MAP5.W0 59 /r | VMULPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.MAP5.W0 59 /r | VMULPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 59 /r | VMULSH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm | Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 4C /r | VRCPPH xmm1 {k1}{z}, xmm2/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm | Packed128_Float16 Broadcast128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 4C /r | VRCPPH ymm1 {k1}{z}, ymm2/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=rm | Packed256_Float16 Broadcast256_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 4C /r | VRCPPH zmm1 {k1}{z}, zmm2/m512/m16bcst | AVX512_FP16 | N64b2
  ops: wvmm=reg r=rm | Packed512_Float16 Broadcast512_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.66.MAP6.W0 4D /r | VRCPSH xmm1 {k1}{z}, xmm2, xmm3/m16 | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm | Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.0F3A.W0 56 /r ib | VREDUCEPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8 | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm r=imm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.0F3A.W0 56 /r ib | VREDUCEPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8 | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=rm r=imm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.0F3A.W0 56 /r ib | VREDUCEPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8 | AVX512_FP16 | N64b2
  ops: wvmm=reg r=rm r=imm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.LIG.0F3A.W0 57 /r ib | VREDUCESH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8 | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm r=imm | Float16
-----
INSTRUCTION: EVEX.128.0F3A.W0 08 /r ib | VRNDSCALEPH xmm1 {k1}{z}, xmm2/m128/m16bcst, imm8 | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm r=imm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.0F3A.W0 08 /r ib | VRNDSCALEPH ymm1 {k1}{z}, ymm2/m256/m16bcst, imm8 | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=rm r=imm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.0F3A.W0 08 /r ib | VRNDSCALEPH zmm1 {k1}{z}, zmm2/m512/m16bcst{sae}, imm8 | AVX512_FP16 | N64b2
  ops: wvmm=reg r=rm r=imm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.LIG.0F3A.W0 0A /r ib | VRNDSCALESH xmm1 {k1}{z}, xmm2, xmm3/m16{sae}, imm8 | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm r=imm | Float16
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 4E /r | VRSQRTPH xmm1 {k1}{z}, xmm2/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm | Packed128_Float16 Broadcast128_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 4E /r | VRSQRTPH ymm1 {k1}{z}, ymm2/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=rm | Packed256_Float16 Broadcast256_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 4E /r | VRSQRTPH zmm1 {k1}{z}, zmm2/m512/m16bcst | AVX512_FP16 | N64b2
  ops: wvmm=reg r=rm | Packed512_Float16 Broadcast512_Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.66.MAP6.W0 4F /r | VRSQRTSH xmm1 {k1}{z}, xmm2, xmm3/m16 | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm | Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.66.MAP6.W0 2C /r | VSCALEFPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.66.MAP6.W0 2C /r | VSCALEFPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.66.MAP6.W0 2C /r | VSCALEFPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.LIG.66.MAP6.W0 2D /r | VSCALEFSH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm | Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.MAP5.W0 51 /r | VSQRTPH xmm1 {k1}{z}, xmm2/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.MAP5.W0 51 /r | VSQRTPH ymm1 {k1}{z}, ymm2/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.MAP5.W0 51 /r | VSQRTPH zmm1 {k1}{z}, zmm2/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: wvmm=reg r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 51 /r | VSQRTSH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm | Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.128.MAP5.W0 5C /r | VSUBPH xmm1 {k1}{z}, xmm2, xmm3/m128/m16bcst | AVX512VL AVX512_FP16 | N16b2
  ops: w=reg r=vvvv r=rm | Packed128_Float16 Broadcast128_Float16
-----
INSTRUCTION: EVEX.256.MAP5.W0 5C /r | VSUBPH ymm1 {k1}{z}, ymm2, ymm3/m256/m16bcst | AVX512VL AVX512_FP16 | N32b2
  ops: w=reg r=vvvv r=rm | Packed256_Float16 Broadcast256_Float16
-----
INSTRUCTION: EVEX.512.MAP5.W0 5C /r | VSUBPH zmm1 {k1}{z}, zmm2, zmm3/m512/m16bcst{er} | AVX512_FP16 | N64b2
  ops: wvmm=reg r=vvvv r=rm | Packed512_Float16 Broadcast512_Float16
-----
INSTRUCTION: EVEX.LIG.F3.MAP5.W0 5C /r | VSUBSH xmm1 {k1}{z}, xmm2, xmm3/m16{er} | AVX512_FP16 | N2
  ops: w=reg r=vvvv r=rm | Float16
  masm: flags=force-size=default
-----
INSTRUCTION: EVEX.LIG.MAP5.W0 2E /r | VUCOMISH xmm1, xmm2/m16{sae} | AVX512_FP16 | N2
  ops: r=reg r=rm | Float16
  rflags: w=zcp 0=osa
  masm: flags=force-size=default
-----
INSTRUCTION: 0F 0E | RDUDBG | UDBG
  # https: //raw.githubusercontent.com/chip-red-pill/udbgInstr/main/paper/undocumented_x86_insts_for_uarch_control.pdf
  implied: r=eax;ecx w=edx;ebx
  flags: dec-opt=Udbg privileged
-----
INSTRUCTION: 0F 0F | WRUDBG | UDBG
  implied: r=eax;ecx;edx cr=ebx cw=edx;ebx
  flags: dec-opt=Udbg privileged
-----
INSTRUCTION: VEX.128.W0 74 cb | JKZD k1, rel8 | KNC
  ops: r=vvvv r=br64
  code-suffix: 64
  flags: cc=jk;e;d br=jkcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: VEX.128.W0 75 cb | JKNZD k1, rel8 | KNC
  ops: r=vvvv r=br64
  code-suffix: 64
  flags: cc=jk;ne;d br=jkcc-short cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: VEX.128.0F.WIG 18 /0 | VPREFETCHNTA m8 | KNC
  ops: nma=rm | UInt8
  flags: prefetch non-temporal
-----
INSTRUCTION: VEX.128.0F.WIG 18 /1 | VPREFETCH0 m8 | KNC
  ops: nma=rm | UInt8
  flags: prefetch
-----
INSTRUCTION: VEX.128.0F.WIG 18 /2 | VPREFETCH1 m8 | KNC
  ops: nma=rm | UInt8
  flags: prefetch
-----
INSTRUCTION: VEX.128.0F.WIG 18 /3 | VPREFETCH2 m8 | KNC
  ops: nma=rm | UInt8
  flags: prefetch non-temporal
-----
INSTRUCTION: VEX.128.0F.WIG 18 /4 | VPREFETCHENTA m8 | KNC
  ops: nma=rm | UInt8
  flags: prefetch non-temporal
-----
INSTRUCTION: VEX.128.0F.WIG 18 /5 | VPREFETCHE0 m8 | KNC
  ops: nma=rm | UInt8
  flags: prefetch
-----
INSTRUCTION: VEX.128.0F.WIG 18 /6 | VPREFETCHE1 m8 | KNC
  ops: nma=rm | UInt8
  flags: prefetch
-----
INSTRUCTION: VEX.128.0F.WIG 18 /7 | VPREFETCHE2 m8 | KNC
  ops: nma=rm | UInt8
  flags: prefetch non-temporal
-----
INSTRUCTION: VEX.128.0F.W0 41 /r | KAND k1, k2 | KNC
  ops: rw=reg r=rm
-----
INSTRUCTION: VEX.128.0F.W0 42 /r | KANDN k1, k2 | KNC
  ops: rw=reg r=rm
-----
INSTRUCTION: VEX.128.0F.W0 43 /r | KANDNR k1, k2 | KNC
  ops: rw=reg r=rm
-----
INSTRUCTION: VEX.128.0F.W0 44 /r | KNOT k1, k2 | KNC
  ops: w=reg r=rm
-----
INSTRUCTION: VEX.128.0F.W0 45 /r | KOR k1, k2 | KNC
  ops: rw=reg r=rm
-----
INSTRUCTION: VEX.128.0F.W0 46 /r | KXNOR k1, k2 | KNC
  ops: rw=reg r=rm
-----
INSTRUCTION: VEX.128.0F.W0 47 /r | KXOR k1, k2 | KNC
  ops: rw=reg r=rm
-----
INSTRUCTION: VEX.128.0F.W0 48 /r | KMERGE2L1H k1, k2 | KNC
  ops: rw=reg r=rm
-----
INSTRUCTION: VEX.128.0F.W0 49 /r | KMERGE2L1L k1, k2 | KNC
  ops: rw=reg r=rm
-----
INSTRUCTION: VEX.128.0F.W0 84 cd | JKZD k1, rel32 | KNC
  ops: r=vvvv r=br64
  code-suffix: 64
  flags: cc=jk;e;d br=jkcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: VEX.128.0F.W0 85 cd | JKNZD k1, rel32 | KNC
  ops: r=vvvv r=br64
  code-suffix: 64
  flags: cc=jk;ne;d br=jkcc-near cflow=br-cond intel-fo64 do64
-----
INSTRUCTION: VEX.128.0F.W0 90 /r | KMOV k1, k2 | KNC
  ops: w=reg r=rm
-----
INSTRUCTION: VEX.128.0F.W0 92 /r | KMOV k1, r32 | KNC
  ops: w=reg r=rm
-----
INSTRUCTION: VEX.128.0F.W0 93 /r | KMOV r32, k1 | KNC
  ops: w=reg r=rm
-----
INSTRUCTION: VEX.128.0F.W0 95 /r | KCONCATH r64, k1, k2 | KNC
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.128.0F.W0 97 /r | KCONCATL r64, k1, k2 | KNC
  ops: w=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.128.0F.W0 98 /r | KORTEST k1, k2 | KNC
  ops: r=reg r=rm
  rflags: w=zc 0=osap
-----
INSTRUCTION: VEX.128.F3.0F.W0 AE /6 | DELAY r32 | KNC
  ops: r=rm
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: VEX.128.F3.0F.W1 AE /6 | DELAY r64 | KNC
  ops: r=rm
  gas: suffix=q
-----
INSTRUCTION: VEX.128.F2.0F.W0 AE /6 | SPFLT r32 | KNC
  ops: r=rm
  flags: wig32
  gas: suffix=l
-----
INSTRUCTION: VEX.128.F2.0F.W1 AE /6 | SPFLT r64 | KNC
  ops: r=rm
  gas: suffix=q
-----
INSTRUCTION: VEX.128.F3.0F.WIG AE /7 | CLEVICT1 m8 | KNC
  ops: nma=rm | UInt8
-----
INSTRUCTION: VEX.128.F2.0F.WIG AE /7 | CLEVICT0 m8 | KNC
  ops: nma=rm | UInt8
-----
INSTRUCTION: VEX.128.F3.0F.W0 B8 /r | POPCNT r32, r32 | KNC
  ops: w=reg r=rm
  flags: wig32
  rflags: w=z 0=osacp
  gas: suffix=l
-----
INSTRUCTION: VEX.128.F3.0F.W1 B8 /r | POPCNT r64, r64 | KNC
  ops: w=reg r=rm
  rflags: w=z 0=osacp
  gas: suffix=q
-----
INSTRUCTION: VEX.128.F3.0F.W0 BC /r | TZCNT r32, r32 | KNC
  ops: w=reg r=rm
  flags: wig32
  rflags: u=osap w=zc
  gas: suffix=l
-----
INSTRUCTION: VEX.128.F3.0F.W1 BC /r | TZCNT r64, r64 | KNC
  ops: w=reg r=rm
  rflags: u=osap w=zc
  gas: suffix=q
-----
INSTRUCTION: VEX.128.F2.0F.W0 BC /r | TZCNTI r32, r32 | KNC
  ops: rw=reg r=rm
  flags: wig32
  rflags: u=osap w=zc
  gas: suffix=l
-----
INSTRUCTION: VEX.128.F2.0F.W1 BC /r | TZCNTI r64, r64 | KNC
  ops: rw=reg r=rm
  rflags: u=osap w=zc
  gas: suffix=q
-----
INSTRUCTION: VEX.128.F3.0F.W0 BD /r | LZCNT r32, r32 | KNC
  ops: w=reg r=rm
  flags: wig32
  rflags: u=osap w=zc
  gas: suffix=l
-----
INSTRUCTION: VEX.128.F3.0F.W1 BD /r | LZCNT r64, r64 | KNC
  ops: w=reg r=rm
  rflags: u=osap w=zc
  gas: suffix=q
-----
INSTRUCTION: VEX.128.F3.0F38.W0 F0 /r | UNDOC r32, r/m32 | KNC
  code-suffix: 128_F3_0F38_W0_F0
  ops: n=reg n=rm | UInt32
  flags: save-restore asm-ig
-----
INSTRUCTION: VEX.128.F3.0F38.W1 F0 /r | UNDOC r64, r/m64 | KNC
  code-suffix: 128_F3_0F38_W1_F0
  ops: n=reg n=rm | UInt64
  flags: save-restore asm-ig
-----
INSTRUCTION: VEX.128.F2.0F38.W0 F0 /r | UNDOC r32, r/m32 | KNC
  code-suffix: 128_F2_0F38_W0_F0
  ops: n=reg n=rm | UInt32
  flags: save-restore asm-ig
-----
INSTRUCTION: VEX.128.F2.0F38.W1 F0 /r | UNDOC r64, r/m64 | KNC
  code-suffix: 128_F2_0F38_W1_F0
  ops: n=reg n=rm | UInt64
  flags: save-restore asm-ig
-----
INSTRUCTION: VEX.128.F2.0F38.W0 F1 /r | UNDOC r32, r/m32 | KNC
  code-suffix: 128_F2_0F38_W0_F1
  ops: n=reg n=rm | UInt32
  flags: save-restore asm-ig
-----
INSTRUCTION: VEX.128.F2.0F38.W1 F1 /r | UNDOC r64, r/m64 | KNC
  code-suffix: 128_F2_0F38_W1_F1
  ops: n=reg n=rm | UInt64
  flags: save-restore asm-ig
-----
INSTRUCTION: VEX.128.66.0F3A.W0 3E /r ib | KEXTRACT k1, r64, imm8 | KNC
  ops: w=reg r=rm r=imm
-----
INSTRUCTION: MVEX.512.0F.WIG 18 /0 | VPREFETCHNTA m | KNC
  ops: nma=rm | mem=1000_0000 i32 ignore-opmask ignore-eh
  flags: prefetch non-temporal
-----
INSTRUCTION: MVEX.512.0F.WIG 18 /1 | VPREFETCH0 m | KNC
  ops: nma=rm | mem=1000_0000 i32 ignore-opmask ignore-eh
  flags: prefetch
-----
INSTRUCTION: MVEX.512.0F.WIG 18 /2 | VPREFETCH1 m | KNC
  ops: nma=rm | mem=1000_0000 i32 ignore-opmask ignore-eh
  flags: prefetch
-----
INSTRUCTION: MVEX.512.0F.WIG 18 /3 | VPREFETCH2 m | KNC
  ops: nma=rm | mem=1000_0000 i32 ignore-opmask ignore-eh
  flags: prefetch non-temporal
-----
INSTRUCTION: MVEX.512.0F.WIG 18 /4 | VPREFETCHENTA m | KNC
  ops: nma=rm | mem=1000_0000 i32 ignore-opmask ignore-eh
  flags: prefetch non-temporal
-----
INSTRUCTION: MVEX.512.0F.WIG 18 /5 | VPREFETCHE0 m | KNC
  ops: nma=rm | mem=1000_0000 i32 ignore-opmask ignore-eh
  flags: prefetch
-----
INSTRUCTION: MVEX.512.0F.WIG 18 /6 | VPREFETCHE1 m | KNC
  ops: nma=rm | mem=1000_0000 i32 ignore-opmask ignore-eh
  flags: prefetch
-----
INSTRUCTION: MVEX.512.0F.WIG 18 /7 | VPREFETCHE2 m | KNC
  ops: nma=rm | mem=1000_0000 i32 ignore-opmask ignore-eh
  flags: prefetch non-temporal
-----
INSTRUCTION: MVEX.512.0F.W0 28 /r | VMOVAPS zmm1 {k1}, Sf32(zmm2/mt) | KNC
  ops: wvmm=reg r=rm | no-er-sae swizz mem=1001_1111
-----
INSTRUCTION: MVEX.512.66.0F.W1 28 /r | VMOVAPD zmm1 {k1}, Sf64(zmm2/mt) | KNC
  ops: wvmm=reg r=rm | no-er-sae swizz mem=1000_0000
-----
INSTRUCTION: MVEX.512.0F.W0 29 /r | VMOVAPS mt {k1}, Df32(zmm1) | KNC
  ops: wvmm=rm r=reg | mem=1001_1111
-----
INSTRUCTION: MVEX.512.66.0F.W1 29 /r | VMOVAPD mt {k1}, Df64(zmm1) | KNC
  ops: wvmm=rm r=reg | mem=1000_0000
-----
INSTRUCTION: MVEX.512.F3.0F.W1.EH0 29 /r | VMOVNRAPD m {k1}, Df64(zmm1) | KNC
  ops: wvmm=rm r=reg | mem=1000_0000
-----
INSTRUCTION: MVEX.512.F3.0F.W1.EH1 29 /r | VMOVNRNGOAPD m {k1}, Df64(zmm1) | KNC
  ops: wvmm=rm r=reg | mem=1000_0000
-----
INSTRUCTION: MVEX.512.F2.0F.W0.EH0 29 /r | VMOVNRAPS m {k1}, Df32(zmm1) | KNC
  ops: wvmm=rm r=reg | mem=1001_1111
-----
INSTRUCTION: MVEX.512.F2.0F.W0.EH1 29 /r | VMOVNRNGOAPS m {k1}, Df32(zmm1) | KNC
  ops: wvmm=rm r=reg | mem=1001_1111
-----
INSTRUCTION: MVEX.NDS.512.0F.W0 58 /r | VADDPS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F.W1 58 /r | VADDPD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.0F.W0 59 /r | VMULPS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F.W1 59 /r | VMULPD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.512.0F.W0 5A /r | VCVTPS2PD zmm1 {k1}, Sf32(zmm2/mt) | KNC
  ops: wvmm=reg r=rm | sae swizz mem=1110_0000 f32-half
-----
INSTRUCTION: MVEX.512.66.0F.W1 5A /r | VCVTPD2PS zmm1 {k1}, Sf64(zmm2/mt) | KNC
  ops: wvmm=reg r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.0F.W0 5C /r | VSUBPS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F.W1 5C /r | VSUBPD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F.W0 66 /r | VPCMPGTD k2 {k1}, zmm1, Si32(zmm2/mt) | KNC
  ops: w=reg r=vvvv r=rm | no-er-sae swizz mem=1110_1111
  flags: implied-z
-----
INSTRUCTION: MVEX.512.66.0F.W0 6F /r | VMOVDQA32 zmm1 {k1}, Si32(zmm2/mt) | KNC
  ops: wvmm=reg r=rm | no-er-sae swizz mem=1000_1111
-----
INSTRUCTION: MVEX.512.66.0F.W1 6F /r | VMOVDQA64 zmm1 {k1}, Si64(zmm2/mt) | KNC
  ops: wvmm=reg r=rm | no-er-sae swizz mem=1000_0000
-----
INSTRUCTION: MVEX.512.66.0F.W0 70 /r ib | VPSHUFD zmm1 {k1}, zmm2/mt, imm8 | KNC
  ops: wvmm=reg r=rm r=imm | no-er-sae swizz=1000_0000 mem=1000_0000 i32
-----
INSTRUCTION: MVEX.NDD.512.66.0F.W0 72 /2 ib | VPSRLD zmm1 {k1}, Si32(zmm2/mt), imm8 | KNC
  ops: wvmm=vvvv r=rm r=imm | no-er-sae swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDD.512.66.0F.W0 72 /4 ib | VPSRAD zmm1 {k1}, Si32(zmm2/mt), imm8 | KNC
  ops: wvmm=vvvv r=rm r=imm | no-er-sae swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDD.512.66.0F.W0 72 /6 ib | VPSLLD zmm1 {k1}, Si32(zmm2/mt), imm8 | KNC
  ops: wvmm=vvvv r=rm r=imm | no-er-sae swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F.W0 76 /r | VPCMPEQD k2 {k1}, zmm1, Si32(zmm2/mt) | KNC
  ops: w=reg r=vvvv r=rm | no-er-sae swizz mem=1110_1111
  flags: implied-z
-----
INSTRUCTION: MVEX.512.F3.0F.W0 7A /r | VCVTUDQ2PD zmm1 {k1}, Si32(zmm2/mt) | KNC
  ops: wvmm=reg r=rm | swizz mem=1110_0000 i32-half
-----
INSTRUCTION: MVEX.512.66.0F.W0 7F /r | VMOVDQA32 mt {k1}, Di32(zmm1) | KNC
  ops: wvmm=rm r=reg | mem=1000_1111
-----
INSTRUCTION: MVEX.512.66.0F.W1 7F /r | VMOVDQA64 mt {k1}, Di64(zmm1) | KNC
  ops: wvmm=rm r=reg | mem=1000_0000
-----
INSTRUCTION: MVEX.512.F3.0F.WIG AE /7 | CLEVICT1 m | KNC
  ops: nma=rm | mem=1000_0000 i32 ignore-opmask ignore-eh
-----
INSTRUCTION: MVEX.512.F2.0F.WIG AE /7 | CLEVICT0 m | KNC
  ops: nma=rm | mem=1000_0000 i32 ignore-opmask ignore-eh
-----
INSTRUCTION: MVEX.NDS.512.0F.W0 C2 /r ib | VCMPPS k2 {k1}, zmm1, Sf32(zmm2/mt), imm8 | KNC
  ops: w=reg r=vvvv r=rm r=imm | sae swizz mem=1111_1111
  flags: pseudo=vcmpps8 implied-z
-----
INSTRUCTION: MVEX.NDS.512.66.0F.W1 C2 /r ib | VCMPPD k2 {k1}, zmm1, Sf64(zmm2/mt), imm8 | KNC
  ops: w=reg r=vvvv r=rm r=imm | sae swizz mem=1110_0000
  flags: pseudo=vcmppd8 implied-z
-----
INSTRUCTION: MVEX.NDS.512.66.0F.W0 DB /r | VPANDD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F.W1 DB /r | VPANDQ zmm1 {k1}, zmm2, Si64(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F.W0 DF /r | VPANDND zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F.W1 DF /r | VPANDNQ zmm1 {k1}, zmm2, Si64(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_0000
-----
INSTRUCTION: MVEX.512.F3.0F.W0 E6 /r | VCVTDQ2PD zmm1 {k1}, Si32(zmm2/mt) | KNC
  ops: wvmm=reg r=rm | swizz mem=1110_0000 i32-half
-----
INSTRUCTION: MVEX.NDS.512.66.0F.W0 EB /r | VPORD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F.W1 EB /r | VPORQ zmm1 {k1}, zmm2, Si64(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F.W0 EF /r | VPXORD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: MVEX.NDS.512.66.0F.W1 EF /r | VPXORQ zmm1 {k1}, zmm2, Si64(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_0000
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: MVEX.NDS.512.66.0F.W0 FA /r | VPSUBD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: MVEX.NDS.512.66.0F.W0 FE /r | VPADDD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
-----
INSTRUCTION: MVEX.512.66.0F38.W0 18 /r | VBROADCASTSS zmm1 {k1}, Uf32(mt) | KNC
  ops: wvmm=reg r=rm | mem=1001_1111 f32-bcst1
-----
INSTRUCTION: MVEX.512.66.0F38.W1 19 /r | VBROADCASTSD zmm1 {k1}, Uf64(mt) | KNC
  ops: wvmm=reg r=rm | mem=1000_0000 f64-bcst1
-----
INSTRUCTION: MVEX.512.66.0F38.W0 1A /r | VBROADCASTF32X4 zmm1 {k1}, Uf32(mt) | KNC
  ops: wvmm=reg r=rm | mem=1001_1111 f32-bcst4
-----
INSTRUCTION: MVEX.512.66.0F38.W1 1B /r | VBROADCASTF64X4 zmm1 {k1}, Uf64(mt) | KNC
  ops: wvmm=reg r=rm | mem=1000_0000 f64-bcst4
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 27 /r | VPTESTMD k2 {k1}, zmm1, Si32(zmm2/mt) | KNC
  ops: w=reg r=vvvv r=rm | no-er-sae swizz mem=1110_1111
  flags: implied-z
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 36 /r | VPERMD zmm1 {k1}, zmm2, zmm3/mt | KNC
  ops: wvmm=reg r=vvvv r=rm | no-er-sae swizz=1000_0000 mem=1000_0000 i32
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 39 /r | VPMINSD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 3B /r | VPMINUD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 3D /r | VPMAXSD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 3F /r | VPMAXUD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 40 /r | VPMULLD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
-----
INSTRUCTION: MVEX.512.66.0F38.W0 42 /r | VGETEXPPS zmm1 {k1}, Sf32(zmm2/mt) | KNC
  ops: wvmm=reg r=rm | sae swizz mem=1111_1111
-----
INSTRUCTION: MVEX.512.66.0F38.W1 42 /r | VGETEXPPD zmm1 {k1}, Sf64(zmm2/mt) | KNC
  ops: wvmm=reg r=rm | sae swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 45 /r | VPSRLVD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 46 /r | VPSRAVD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 47 /r | VPSLLVD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
-----
INSTRUCTION: MVEX.512.66.0F38.W0 48 /r | UNDOC zmm1 {k1}, zmm2/mt | KNC
  code-suffix: 512_66_0F38_W0_48
  ops: n=reg n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.512.66.0F38.W0 49 /r | UNDOC zmm1 {k1}, zmm2/mt | KNC
  code-suffix: 512_66_0F38_W0_49
  ops: n=reg n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.512.66.0F38.W0 4A /r | UNDOC zmm1 {k1}, zmm2/mt | KNC
  code-suffix: 512_66_0F38_W0_4A
  ops: n=reg n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.512.66.0F38.W0 4B /r | UNDOC zmm1 {k1}, zmm2/mt | KNC
  code-suffix: 512_66_0F38_W0_4B
  ops: n=reg n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 50 /r | VADDNPS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 50 /r | VADDNPD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 51 /r | VGMAXABSPS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 52 /r | VGMINPS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 52 /r | VGMINPD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 53 /r | VGMAXPS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 53 /r | VGMAXPD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 54 /r | UNDOC zmm1 {k1}, zmm2, zmm3/mt | KNC
  code-suffix: 512_66_0F38_W0_54
  ops: n=reg n=vvvv n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 55 /r | VFIXUPNANPS zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 55 /r | VFIXUPNANPD zmm1 {k1}, zmm2, Si64(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 56 /r | UNDOC zmm1 {k1}, zmm2, zmm3/mt | KNC
  code-suffix: 512_66_0F38_W0_56
  ops: n=reg n=vvvv n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 57 /r | UNDOC zmm1 {k1}, zmm2, zmm3/mt | KNC
  code-suffix: 512_66_0F38_W0_57
  ops: n=reg n=vvvv n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.512.66.0F38.W0 58 /r | VPBROADCASTD zmm1 {k1}, Ui32(mt) | KNC
  ops: wvmm=reg r=rm | mem=1000_1111 i32-bcst1
-----
INSTRUCTION: MVEX.512.66.0F38.W1 59 /r | VPBROADCASTQ zmm1 {k1}, Ui64(mt) | KNC
  ops: wvmm=reg r=rm | mem=1000_0000 i64-bcst1
-----
INSTRUCTION: MVEX.512.66.0F38.W0 5A /r | VBROADCASTI32X4 zmm1 {k1}, Ui32(mt) | KNC
  ops: wvmm=reg r=rm | mem=1000_1111 i32-bcst4
-----
INSTRUCTION: MVEX.512.66.0F38.W1 5B /r | VBROADCASTI64X4 zmm1 {k1}, Ui64(mt) | KNC
  ops: wvmm=reg r=rm | mem=1000_0000 i64-bcst4
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 5C /r | VPADCD zmm1 {k1}, k2, Si32(zmm3/mt) | KNC
  ops: rwvmm=reg rw=vvvv r=rm | no-er-sae swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 5D /r | VPADDSETCD zmm1 {k1}, k2, Si32(zmm3/mt) | KNC
  ops: rwvmm=reg rw=vvvv r=rm | no-er-sae swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 5E /r | VPSBBD zmm1 {k1}, k2, Si32(zmm3/mt) | KNC
  ops: rwvmm=reg rw=vvvv r=rm | no-er-sae swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 5F /r | VPSUBSETBD zmm1 {k1}, k2, Si32(zmm3/mt) | KNC
  ops: rwvmm=reg rw=vvvv r=rm | no-er-sae swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 64 /r | VPBLENDMD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: w=reg r=vvvv r=rm | swizz mem=1110_1111
  flags: k-elem-selector
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 64 /r | VPBLENDMQ zmm1 {k1}, zmm2, Si64(zmm3/mt) | KNC
  ops: w=reg r=vvvv r=rm | swizz mem=1110_0000
  flags: k-elem-selector
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 65 /r | VBLENDMPS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: w=reg r=vvvv r=rm | swizz mem=1111_1111
  flags: k-elem-selector
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 65 /r | VBLENDMPD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: w=reg r=vvvv r=rm | swizz mem=1110_0000
  flags: k-elem-selector
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 67 /r | UNDOC zmm1 {k1}, zmm2, zmm3/mt | KNC
  code-suffix: 512_66_0F38_W0_67
  ops: n=reg n=vvvv n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.512.66.0F38.W0 68 /r | UNDOC zmm1 {k1}, zmm2/mt | KNC
  code-suffix: 512_66_0F38_W0_68
  ops: n=reg n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.512.66.0F38.W0 69 /r | UNDOC zmm1 {k1}, zmm2/mt | KNC
  code-suffix: 512_66_0F38_W0_69
  ops: n=reg n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.512.66.0F38.W0 6A /r | UNDOC zmm1 {k1}, zmm2/mt | KNC
  code-suffix: 512_66_0F38_W0_6A
  ops: n=reg n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.512.66.0F38.W0 6B /r | UNDOC zmm1 {k1}, zmm2/mt | KNC
  code-suffix: 512_66_0F38_W0_6B
  ops: n=reg n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 6C /r | VPSUBRD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
  implied: zero-reg-reg-regmem
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 6D /r | VSUBRPS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 6D /r | VSUBRPD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 6E /r | VPSBBRD zmm1 {k1}, k2, Si32(zmm3/mt) | KNC
  ops: rwvmm=reg rw=vvvv r=rm | no-er-sae swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 6F /r | VPSUBRSETBD zmm1 {k1}, k2, Si32(zmm3/mt) | KNC
  ops: rwvmm=reg rw=vvvv r=rm | no-er-sae swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 70 /r | UNDOC zmm1 {k1}, zmm2, zmm3/mt | KNC
  code-suffix: 512_66_0F38_W0_70
  ops: n=reg n=vvvv n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 71 /r | UNDOC zmm1 {k1}, zmm2, zmm3/mt | KNC
  code-suffix: 512_66_0F38_W0_71
  ops: n=reg n=vvvv n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 72 /r | UNDOC zmm1 {k1}, zmm2, zmm3/mt | KNC
  code-suffix: 512_66_0F38_W0_72
  ops: n=reg n=vvvv n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 73 /r | UNDOC zmm1 {k1}, zmm2, zmm3/mt | KNC
  code-suffix: 512_66_0F38_W0_73
  ops: n=reg n=vvvv n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 74 /r | VPCMPLTD k2 {k1}, zmm1, Si32(zmm2/mt) | KNC
  ops: w=reg r=vvvv r=rm | no-er-sae swizz mem=1110_1111
  flags: implied-z
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 84 /r | VSCALEPS zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae er swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 86 /r | VPMULHUD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 87 /r | VPMULHD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
-----
INSTRUCTION: MVEX.512.66.0F38.W0 90 /vsib | VPGATHERDD zmm1 {k1}, Ui32(mvt) | KNC
  ops: rwvmm=reg r=rm | mem=1000_1111 i32-elem
  flags: krw knz unique-reg-num
-----
INSTRUCTION: MVEX.512.66.0F38.W1 90 /vsib | VPGATHERDQ zmm1 {k1}, Ui64(mvt) | KNC
  ops: rwvmm=reg r=rm | mem=1000_0000 i64-elem
  flags: krw knz unique-reg-num
-----
INSTRUCTION: MVEX.512.66.0F38.W0 92 /vsib | VGATHERDPS zmm1 {k1}, Uf32(mvt) | KNC
  ops: rwvmm=reg r=rm | mem=1001_1111 f32-elem
  flags: krw knz unique-reg-num
-----
INSTRUCTION: MVEX.512.66.0F38.W1 92 /vsib | VGATHERDPD zmm1 {k1}, Uf64(mvt) | KNC
  ops: rwvmm=reg r=rm | mem=1000_0000 f64-elem
  flags: krw knz unique-reg-num
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 94 /r | UNDOC zmm1 {k1}, zmm2, zmm3/mt | KNC
  code-suffix: 512_66_0F38_W0_94
  ops: n=reg n=vvvv n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 94 /r | UNDOC zmm1 {k1}, zmm2, zmm3/mt | KNC
  code-suffix: 512_66_0F38_W1_94
  ops: n=reg n=vvvv n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 98 /r | VFMADD132PS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 98 /r | VFMADD132PD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 9A /r | VFMSUB132PS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 9A /r | VFMSUB132PD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 9C /r | VFNMADD132PS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 9C /r | VFNMADD132PD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 9E /r | VFNMSUB132PS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 9E /r | VFNMSUB132PD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.512.66.0F38.W0 A0 /vsib | VPSCATTERDD mvt {k1}, Di32(zmm1) | KNC
  ops: w=rm r=reg | mem=1000_1111 i32-elem
  flags: krw knz
-----
INSTRUCTION: MVEX.512.66.0F38.W1 A0 /vsib | VPSCATTERDQ mvt {k1}, Di64(zmm1) | KNC
  ops: w=rm r=reg | mem=1000_0000 i64-elem
  flags: krw knz
-----
INSTRUCTION: MVEX.512.66.0F38.W0 A2 /vsib | VSCATTERDPS mvt {k1}, Df32(zmm1) | KNC
  ops: w=rm r=reg | mem=1001_1111 f32-elem
  flags: krw knz
-----
INSTRUCTION: MVEX.512.66.0F38.W1 A2 /vsib | VSCATTERDPD mvt {k1}, Df64(zmm1) | KNC
  ops: w=rm r=reg | mem=1000_0000 f64-elem
  flags: krw knz
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 A4 /r | VFMADD233PS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae er swizz=1000_0000 mem=1010_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 A8 /r | VFMADD213PS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 A8 /r | VFMADD213PD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 AA /r | VFMSUB213PS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 AA /r | VFMSUB213PD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 AC /r | VFNMADD213PS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 AC /r | VFNMADD213PD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 AE /r | VFNMSUB213PS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 AE /r | VFNMSUB213PD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.512.66.0F38.W0 B0 /vsib | UNDOC zmm1 {k1}, mvt | KNC
  code-suffix: 512_66_0F38_W0_B0
  ops: n=reg n=rm | sae er mem=1111_1111 f32-elem
  flags: knz save-restore asm-ig
-----
INSTRUCTION: MVEX.512.66.0F38.W0 B2 /vsib | UNDOC zmm1 {k1}, mvt | KNC
  code-suffix: 512_66_0F38_W0_B2
  ops: n=reg n=rm | sae er mem=1111_1111 f32-elem
  flags: knz save-restore asm-ig
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 B4 /r | VPMADD233D zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz=1000_0000 mem=1010_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 B5 /r | VPMADD231D zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | swizz mem=1110_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 B8 /r | VFMADD231PS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 B8 /r | VFMADD231PD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 BA /r | VFMSUB231PS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 BA /r | VFMSUB231PD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 BC /r | VFNMADD231PS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 BC /r | VFNMADD231PD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 BE /r | VFNMSUB231PS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 BE /r | VFNMSUB231PD zmm1 {k1}, zmm2, Sf64(zmm3/mt) | KNC
  ops: rwvmm=reg r=vvvv r=rm | sae er swizz mem=1110_0000
-----
INSTRUCTION: MVEX.512.66.0F38.W0 C0 /vsib | UNDOC zmm1 {k1}, mvt | KNC
  code-suffix: 512_66_0F38_W0_C0
  ops: n=reg n=rm | sae er mem=1111_1111 f32-elem
  flags: knz save-restore asm-ig
-----
INSTRUCTION: MVEX.512.66.0F38.W0 C6 /0 /vsib | VGATHERPF0HINTDPS Uf32(mvt) {k1} | KNC
  ops: nma=rm | mem=1001_1111 f32-elem
  flags: knz prefetch
-----
INSTRUCTION: MVEX.512.66.0F38.W1 C6 /0 /vsib | VGATHERPF0HINTDPD Uf64(mvt) {k1} | KNC
  ops: nma=rm | mem=1000_0000 f64-elem
  flags: knz prefetch
-----
INSTRUCTION: MVEX.512.66.0F38.W0 C6 /1 /vsib | VGATHERPF0DPS Uf32(mvt) {k1} | KNC
  ops: nma=rm | mem=1001_1111 f32-elem
  flags: krw knz prefetch
-----
INSTRUCTION: MVEX.512.66.0F38.W0 C6 /2 /vsib | VGATHERPF1DPS Uf32(mvt) {k1} | KNC
  ops: nma=rm | mem=1001_1111 f32-elem
  flags: krw knz prefetch
-----
INSTRUCTION: MVEX.512.66.0F38.W0 C6 /4 /vsib | VSCATTERPF0HINTDPS Uf32(mvt) {k1} | KNC
  ops: nma=rm | mem=1001_1111 f32-elem
  flags: knz prefetch
-----
INSTRUCTION: MVEX.512.66.0F38.W1 C6 /4 /vsib | VSCATTERPF0HINTDPD Uf64(mvt) {k1} | KNC
  ops: nma=rm | mem=1000_0000 f64-elem
  flags: knz prefetch
-----
INSTRUCTION: MVEX.512.66.0F38.W0 C6 /5 /vsib | VSCATTERPF0DPS Uf32(mvt) {k1} | KNC
  ops: nma=rm | mem=1001_1111 f32-elem
  flags: krw knz prefetch
-----
INSTRUCTION: MVEX.512.66.0F38.W0 C6 /6 /vsib | VSCATTERPF1DPS Uf32(mvt) {k1} | KNC
  ops: nma=rm | mem=1001_1111 f32-elem
  flags: krw knz prefetch
-----
INSTRUCTION: MVEX.512.66.0F38.W0 C8 /r | VEXP223PS zmm1 {k1}, zmm2/mt | KNC
  ops: wvmm=reg r=rm | sae swizz=1000_0000 mem=1000_0000 i32
-----
INSTRUCTION: MVEX.512.66.0F38.W0 C9 /r | VLOG2PS zmm1 {k1}, zmm2/mt | KNC
  ops: wvmm=reg r=rm | sae swizz=1000_0000 mem=1000_0000 f32
-----
INSTRUCTION: MVEX.512.66.0F38.W0 CA /r | VRCP23PS zmm1 {k1}, zmm2/mt | KNC
  ops: wvmm=reg r=rm | sae swizz=1000_0000 mem=1000_0000 f32
-----
INSTRUCTION: MVEX.512.66.0F38.W0 CB /r | VRSQRT23PS zmm1 {k1}, zmm2/mt | KNC
  ops: wvmm=reg r=rm | sae swizz=1000_0000 mem=1000_0000 f32
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 CC /r | VADDSETSPS zmm1 {k1}, zmm2, Sf32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | sae er swizz mem=1111_1111
  flags: krw knz
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 CD /r | VPADDSETSD zmm1 {k1}, zmm2, Si32(zmm3/mt) | KNC
  ops: wvmm=reg r=vvvv r=rm | swizz mem=1110_1111
  flags: krw knz
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 CE /r | UNDOC zmm1 {k1}, zmm2, zmm3/mt | KNC
  code-suffix: 512_66_0F38_W0_CE
  ops: n=reg n=vvvv n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W1 CE /r | UNDOC zmm1 {k1}, zmm2, zmm3/mt | KNC
  code-suffix: 512_66_0F38_W1_CE
  ops: n=reg n=vvvv n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.NDS.512.66.0F38.W0 CF /r | UNDOC zmm1 {k1}, zmm2, zmm3/mt | KNC
  code-suffix: 512_66_0F38_W0_CF
  ops: n=reg n=vvvv n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.512.0F38.W0 D0 /r | VLOADUNPACKLD zmm1 {k1}, Ui32(mt) | KNC
  ops: rwvmm=reg r=rm | mem=1000_1111 i32-elem
-----
INSTRUCTION: MVEX.512.0F38.W1 D0 /r | VLOADUNPACKLQ zmm1 {k1}, Ui64(mt) | KNC
  ops: rwvmm=reg r=rm | mem=1000_0000 i64-elem
-----
INSTRUCTION: MVEX.512.66.0F38.W0 D0 /r | VPACKSTORELD mt {k1}, Di32(zmm1) | KNC
  ops: w=rm r=reg | mem=1000_1111 i32-elem
  flags: k-elem-selector
-----
INSTRUCTION: MVEX.512.66.0F38.W1 D0 /r | VPACKSTORELQ mt {k1}, Di64(zmm1) | KNC
  ops: w=rm r=reg | mem=1000_0000 i64-elem
  flags: k-elem-selector
-----
INSTRUCTION: MVEX.512.0F38.W0 D1 /r | VLOADUNPACKLPS zmm1 {k1}, Uf32(mt) | KNC
  ops: rwvmm=reg r=rm | mem=1001_1111 f32-elem
-----
INSTRUCTION: MVEX.512.0F38.W1 D1 /r | VLOADUNPACKLPD zmm1 {k1}, Uf64(mt) | KNC
  ops: rwvmm=reg r=rm | mem=1000_0000 f64-elem
-----
INSTRUCTION: MVEX.512.66.0F38.W0 D1 /r | VPACKSTORELPS mt {k1}, Df32(zmm1) | KNC
  ops: w=rm r=reg | mem=1001_1111 f32-elem
  flags: k-elem-selector
-----
INSTRUCTION: MVEX.512.66.0F38.W1 D1 /r | VPACKSTORELPD mt {k1}, Df64(zmm1) | KNC
  ops: w=rm r=reg | mem=1000_0000 f64-elem
  flags: k-elem-selector
-----
INSTRUCTION: MVEX.512.0F38.W0 D2 /r | UNDOC zmm1 {k1}, zmm2/mt | KNC
  code-suffix: 512_0F38_W0_D2
  ops: n=reg n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.512.66.0F38.W0 D2 /r | UNDOC zmm1 {k1}, zmm2/mt | KNC
  code-suffix: 512_66_0F38_W0_D2
  ops: n=reg n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.512.0F38.W0 D3 /r | UNDOC zmm1 {k1}, zmm2/mt | KNC
  code-suffix: 512_0F38_W0_D3
  ops: n=reg n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.512.0F38.W0 D4 /r | VLOADUNPACKHD zmm1 {k1}, Ui32(mt) | KNC
  implied: mem-displ=-64
  ops: rwvmm=reg r=rm | mem=1000_1111 i32-elem
-----
INSTRUCTION: MVEX.512.0F38.W1 D4 /r | VLOADUNPACKHQ zmm1 {k1}, Ui64(mt) | KNC
  implied: mem-displ=-64
  ops: rwvmm=reg r=rm | mem=1000_0000 i64-elem
-----
INSTRUCTION: MVEX.512.66.0F38.W0 D4 /r | VPACKSTOREHD mt {k1}, Di32(zmm1) | KNC
  implied: mem-displ=-64
  ops: w=rm r=reg | mem=1000_1111 i32-elem
  flags: k-elem-selector
-----
INSTRUCTION: MVEX.512.66.0F38.W1 D4 /r | VPACKSTOREHQ mt {k1}, Di64(zmm1) | KNC
  implied: mem-displ=-64
  ops: w=rm r=reg | mem=1000_0000 i64-elem
  flags: k-elem-selector
-----
INSTRUCTION: MVEX.512.0F38.W0 D5 /r | VLOADUNPACKHPS zmm1 {k1}, Uf32(mt) | KNC
  implied: mem-displ=-64
  ops: rwvmm=reg r=rm | mem=1001_1111 f32-elem
-----
INSTRUCTION: MVEX.512.0F38.W1 D5 /r | VLOADUNPACKHPD zmm1 {k1}, Uf64(mt) | KNC
  implied: mem-displ=-64
  ops: rwvmm=reg r=rm | mem=1000_0000 f64-elem
-----
INSTRUCTION: MVEX.512.66.0F38.W0 D5 /r | VPACKSTOREHPS mt {k1}, Df32(zmm1) | KNC
  implied: mem-displ=-64
  ops: w=rm r=reg | mem=1001_1111 f32-elem
  flags: k-elem-selector
-----
INSTRUCTION: MVEX.512.66.0F38.W1 D5 /r | VPACKSTOREHPD mt {k1}, Df64(zmm1) | KNC
  implied: mem-displ=-64
  ops: w=rm r=reg | mem=1000_0000 f64-elem
  flags: k-elem-selector
-----
INSTRUCTION: MVEX.512.0F38.W0 D6 /r | UNDOC zmm1 {k1}, zmm2/mt | KNC
  code-suffix: 512_0F38_W0_D6
  ops: n=reg n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.512.66.0F38.W0 D6 /r | UNDOC zmm1 {k1}, zmm2/mt | KNC
  code-suffix: 512_66_0F38_W0_D6
  ops: n=reg n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.512.0F38.W0 D7 /r | UNDOC zmm1 {k1}, zmm2/mt | KNC
  code-suffix: 512_0F38_W0_D7
  ops: n=reg n=rm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.NDS.512.66.0F3A.W0 03 /r ib | VALIGND zmm1 {k1}, zmm2, zmm3/mt, imm8 | KNC
  ops: wvmm=reg r=vvvv r=rm r=imm | no-er-sae swizz=1000_0000 mem=1000_0000 i32
-----
INSTRUCTION: MVEX.512.66.0F3A.W0 07 /r ib | VPERMF32X4 zmm1 {k1}, zmm2/mt, imm8 | KNC
  ops: wvmm=reg r=rm r=imm | no-er-sae swizz=1000_0000 mem=1000_0000 f32
-----
INSTRUCTION: MVEX.NDS.512.66.0F3A.W0 1E /r ib | VPCMPUD k2 {k1}, zmm1, Si32(zmm2/mt), imm8 | KNC
  ops: w=reg r=vvvv r=rm r=imm | no-er-sae swizz mem=1110_1111
  flags: pseudo=vpcmpud6 implied-z
-----
INSTRUCTION: MVEX.NDS.512.66.0F3A.W0 1F /r ib | VPCMPD k2 {k1}, zmm1, Si32(zmm2/mt), imm8 | KNC
  ops: w=reg r=vvvv r=rm r=imm | no-er-sae swizz mem=1110_1111
  flags: pseudo=vpcmpd6 implied-z
-----
INSTRUCTION: MVEX.512.66.0F3A.W0 26 /r ib | VGETMANTPS zmm1 {k1}, Sf32(zmm2/mt), imm8 | KNC
  ops: wvmm=reg r=rm r=imm | sae swizz mem=1111_1111
-----
INSTRUCTION: MVEX.512.66.0F3A.W1 26 /r ib | VGETMANTPD zmm1 {k1}, Sf64(zmm2/mt), imm8 | KNC
  ops: wvmm=reg r=rm r=imm | sae swizz mem=1110_0000
-----
INSTRUCTION: MVEX.512.66.0F3A.W0 52 /r ib | VRNDFXPNTPS zmm1 {k1}, Sf32(zmm2/mt), imm8 | KNC
  ops: wvmm=reg r=rm r=imm | sae er-imm swizz mem=1111_1111
-----
INSTRUCTION: MVEX.512.66.0F3A.W1 52 /r ib | VRNDFXPNTPD zmm1 {k1}, Sf64(zmm2/mt), imm8 | KNC
  ops: wvmm=reg r=rm r=imm | sae er-imm swizz mem=1110_0000
-----
INSTRUCTION: MVEX.512.0F3A.W0 CA /r ib | VCVTFXPNTUDQ2PS zmm1 {k1}, Si32(zmm2/mt), imm8 | KNC
  ops: wvmm=reg r=rm r=imm | sae er-imm swizz mem=1110_1111
-----
INSTRUCTION: MVEX.512.66.0F3A.W0 CA /r ib | VCVTFXPNTPS2UDQ zmm1 {k1}, Sf32(zmm2/mt), imm8 | KNC
  ops: wvmm=reg r=rm r=imm | sae er-imm swizz mem=1111_1111
-----
INSTRUCTION: MVEX.512.F2.0F3A.W1 CA /r ib | VCVTFXPNTPD2UDQ zmm1 {k1}, Sf64(zmm2/mt), imm8 | KNC
  ops: wvmm=reg r=rm r=imm | sae er-imm swizz mem=1110_0000
-----
INSTRUCTION: MVEX.512.0F3A.W0 CB /r ib | VCVTFXPNTDQ2PS zmm1 {k1}, Si32(zmm2/mt), imm8 | KNC
  ops: wvmm=reg r=rm r=imm | sae er-imm swizz mem=1110_1111
-----
INSTRUCTION: MVEX.512.66.0F3A.W0 CB /r ib | VCVTFXPNTPS2DQ zmm1 {k1}, Sf32(zmm2/mt), imm8 | KNC
  ops: wvmm=reg r=rm r=imm | sae er-imm swizz mem=1111_1111
-----
INSTRUCTION: MVEX.512.66.0F3A.W0 D0 /r ib | UNDOC zmm1 {k1}, zmm2/mt, imm8 | KNC
  code-suffix: 512_66_0F3A_W0_D0
  ops: n=reg n=rm n=imm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.512.66.0F3A.W0 D1 /r ib | UNDOC zmm1 {k1}, zmm2/mt, imm8 | KNC
  code-suffix: 512_66_0F3A_W0_D1
  ops: n=reg n=rm n=imm | sae er swizz mem=1111_1111 f32
  flags: save-restore asm-ig
-----
INSTRUCTION: MVEX.512.F2.0F3A.W1 E6 /r ib | VCVTFXPNTPD2DQ zmm1 {k1}, Sf64(zmm2/mt), imm8 | KNC
  ops: wvmm=reg r=rm r=imm | sae er-imm swizz mem=1110_0000
-----
INSTRUCTION: NP 0F 01 C6 | WRMSRNS | WRMSRNS
  implied: r=eax;ecx;edx
  flags: cpl0 intel-may-vm-exit tdx-non-root-may-gen-ex amd-may-vm-exit tsx-impl-abort
-----
INSTRUCTION: F3 0F 01 C6 | WRMSRLIST | MSRLIST
  implied: r=rcx cr=rsi;rdi cw=rcx cr=[ds:rsi=Unknown] cr=[es:rdi=Unknown]
  flags: 64 cpl0 intel-may-vm-exit tdx-non-root-may-gen-ex amd-may-vm-exit tsx-impl-abort aligned-mem
-----
INSTRUCTION: F2 0F 01 C6 | RDMSRLIST | MSRLIST
  implied: r=rcx cr=rsi;rdi cw=rcx cr=[ds:rsi=Unknown] cw=[es:rdi=Unknown]
  flags: 64 cpl0 intel-may-vm-exit tdx-non-root-may-gen-ex amd-may-vm-exit tsx-impl-abort aligned-mem
-----
INSTRUCTION: F3 0F 01 FD | RMPQUERY | RMPQUERY
  # Only writes rdx[63: 8]
  implied: r=rax;dl w=eax;rcx;rdx
  rflags: w=oszap
  flags: 64 cpl0 amd-may-vm-exit
-----
INSTRUCTION: 0F 18 /6 | PREFETCHIT1 m8 | PREFETCHITI
  ops: nma=rm | UInt8
  flags: prefetch
-----
INSTRUCTION: 0F 18 /7 | PREFETCHIT0 m8 | PREFETCHITI
  ops: nma=rm | UInt8
  flags: prefetch
-----
INSTRUCTION: NP 0F 38 FC !(11):rrr:bbb | AADD m32, r32 | RAO_INT
  ops: rw=rm r=reg | UInt32
  flags: tsx-abort atomic aligned-mem
-----
INSTRUCTION: NP o64 0F 38 FC !(11):rrr:bbb | AADD m64, r64 | RAO_INT
  ops: rw=rm r=reg | UInt64
  flags: 64 tsx-abort atomic aligned-mem
-----
INSTRUCTION: 66 0F 38 FC !(11):rrr:bbb | AAND m32, r32 | RAO_INT
  ops: rw=rm r=reg | UInt32
  flags: tsx-abort atomic aligned-mem
-----
INSTRUCTION: 66 o64 0F 38 FC !(11):rrr:bbb | AAND m64, r64 | RAO_INT
  ops: rw=rm r=reg | UInt64
  flags: 64 tsx-abort atomic aligned-mem
-----
INSTRUCTION: F3 0F 38 FC !(11):rrr:bbb | AXOR m32, r32 | RAO_INT
  ops: rw=rm r=reg | UInt32
  flags: tsx-abort atomic aligned-mem
-----
INSTRUCTION: F3 o64 0F 38 FC !(11):rrr:bbb | AXOR m64, r64 | RAO_INT
  ops: rw=rm r=reg | UInt64
  flags: 64 tsx-abort atomic aligned-mem
-----
INSTRUCTION: F2 0F 38 FC !(11):rrr:bbb | AOR m32, r32 | RAO_INT
  ops: rw=rm r=reg | UInt32
  flags: tsx-abort atomic aligned-mem
-----
INSTRUCTION: F2 o64 0F 38 FC !(11):rrr:bbb | AOR m64, r64 | RAO_INT
  ops: rw=rm r=reg | UInt64
  flags: 64 tsx-abort atomic aligned-mem
-----
INSTRUCTION: VEX.128.0F38.W0 50 /r | VPDPBUUD xmm1, xmm2, xmm3/m128 | AVX_VNNI_INT8
  ops: rw=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.0F38.W0 50 /r | VPDPBUUD ymm1, ymm2, ymm3/m256 | AVX_VNNI_INT8
  ops: rw=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: VEX.128.F3.0F38.W0 50 /r | VPDPBSUD xmm1, xmm2, xmm3/m128 | AVX_VNNI_INT8
  ops: rw=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.256.F3.0F38.W0 50 /r | VPDPBSUD ymm1, ymm2, ymm3/m256 | AVX_VNNI_INT8
  ops: rw=reg r=vvvv r=rm | Packed256_Int8
-----
INSTRUCTION: VEX.128.F2.0F38.W0 50 /r | VPDPBSSD xmm1, xmm2, xmm3/m128 | AVX_VNNI_INT8
  ops: rw=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.256.F2.0F38.W0 50 /r | VPDPBSSD ymm1, ymm2, ymm3/m256 | AVX_VNNI_INT8
  ops: rw=reg r=vvvv r=rm | Packed256_Int8
-----
INSTRUCTION: VEX.128.0F38.W0 51 /r | VPDPBUUDS xmm1, xmm2, xmm3/m128 | AVX_VNNI_INT8
  ops: rw=reg r=vvvv r=rm | Packed128_UInt8
-----
INSTRUCTION: VEX.256.0F38.W0 51 /r | VPDPBUUDS ymm1, ymm2, ymm3/m256 | AVX_VNNI_INT8
  ops: rw=reg r=vvvv r=rm | Packed256_UInt8
-----
INSTRUCTION: VEX.128.F3.0F38.W0 51 /r | VPDPBSUDS xmm1, xmm2, xmm3/m128 | AVX_VNNI_INT8
  ops: rw=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.256.F3.0F38.W0 51 /r | VPDPBSUDS ymm1, ymm2, ymm3/m256 | AVX_VNNI_INT8
  ops: rw=reg r=vvvv r=rm | Packed256_Int8
-----
INSTRUCTION: VEX.128.F2.0F38.W0 51 /r | VPDPBSSDS xmm1, xmm2, xmm3/m128 | AVX_VNNI_INT8
  ops: rw=reg r=vvvv r=rm | Packed128_Int8
-----
INSTRUCTION: VEX.256.F2.0F38.W0 51 /r | VPDPBSSDS ymm1, ymm2, ymm3/m256 | AVX_VNNI_INT8
  ops: rw=reg r=vvvv r=rm | Packed256_Int8
-----
INSTRUCTION: VEX.128.F2.0F38.W0 5C 11:rrr:bbb | TDPFP16PS tmm1, tmm2, tmm3 | AMX_FP16
  ops: rw=reg r=rm r=vvvv
  flags: 64 unique-reg-num tsx-abort
-----
INSTRUCTION: VEX.128.F3.0F38.W0 72 /r | VCVTNEPS2BF16 xmm1, xmm2/m128 | AVX_NE_CONVERT
  ops: w=reg r=rm | Packed128_Float32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=x
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: VEX.256.F3.0F38.W0 72 /r | VCVTNEPS2BF16 xmm1, ymm2/m256 | AVX_NE_CONVERT
  ops: w=reg r=rm | Packed256_Float32
  fast: flags=force-size=always
  gas: flags=force-mem-suffix suffix=y
  intel: flags=force-size=always
  masm: flags=force-size=always
  nasm: flags=force-size=always
-----
INSTRUCTION: VEX.128.0F38.W0 B0 !(11):rrr:bbb | VCVTNEOPH2PS xmm1, m128 | AVX_NE_CONVERT
  ops: w=reg r=rm | Packed128_Float16
-----
INSTRUCTION: VEX.256.0F38.W0 B0 !(11):rrr:bbb | VCVTNEOPH2PS ymm1, m256 | AVX_NE_CONVERT
  ops: w=reg r=rm | Packed256_Float16
-----
INSTRUCTION: VEX.128.66.0F38.W0 B0 !(11):rrr:bbb | VCVTNEEPH2PS xmm1, m128 | AVX_NE_CONVERT
  ops: w=reg r=rm | Packed128_Float16
-----
INSTRUCTION: VEX.256.66.0F38.W0 B0 !(11):rrr:bbb | VCVTNEEPH2PS ymm1, m256 | AVX_NE_CONVERT
  ops: w=reg r=rm | Packed256_Float16
-----
INSTRUCTION: VEX.128.F3.0F38.W0 B0 !(11):rrr:bbb | VCVTNEEBF162PS xmm1, m128 | AVX_NE_CONVERT
  ops: w=reg r=rm | Packed128_BFloat16
-----
INSTRUCTION: VEX.256.F3.0F38.W0 B0 !(11):rrr:bbb | VCVTNEEBF162PS ymm1, m256 | AVX_NE_CONVERT
  ops: w=reg r=rm | Packed256_BFloat16
-----
INSTRUCTION: VEX.128.F2.0F38.W0 B0 !(11):rrr:bbb | VCVTNEOBF162PS xmm1, m128 | AVX_NE_CONVERT
  ops: w=reg r=rm | Packed128_BFloat16
-----
INSTRUCTION: VEX.256.F2.0F38.W0 B0 !(11):rrr:bbb | VCVTNEOBF162PS ymm1, m256 | AVX_NE_CONVERT
  ops: w=reg r=rm | Packed256_BFloat16
-----
INSTRUCTION: VEX.128.66.0F38.W0 B1 !(11):rrr:bbb | VBCSTNESH2PS xmm1, m16 | AVX_NE_CONVERT
  ops: w=reg r=rm | Float16
-----
INSTRUCTION: VEX.256.66.0F38.W0 B1 !(11):rrr:bbb | VBCSTNESH2PS ymm1, m16 | AVX_NE_CONVERT
  ops: w=reg r=rm | Float16
-----
INSTRUCTION: VEX.128.F3.0F38.W0 B1 !(11):rrr:bbb | VBCSTNEBF162PS xmm1, m16 | AVX_NE_CONVERT
  ops: w=reg r=rm | BFloat16
-----
INSTRUCTION: VEX.256.F3.0F38.W0 B1 !(11):rrr:bbb | VBCSTNEBF162PS ymm1, m16 | AVX_NE_CONVERT
  ops: w=reg r=rm | BFloat16
-----
INSTRUCTION: VEX.128.66.0F38.W1 B4 /r | VPMADD52LUQ xmm1, xmm2, xmm3/m128 | AVX_IFMA
  ops: rw=reg r=vvvv r=rm | Packed128_UInt52
-----
INSTRUCTION: VEX.256.66.0F38.W1 B4 /r | VPMADD52LUQ ymm1, ymm2, ymm3/m256 | AVX_IFMA
  ops: rw=reg r=vvvv r=rm | Packed256_UInt52
-----
INSTRUCTION: VEX.128.66.0F38.W1 B5 /r | VPMADD52HUQ xmm1, xmm2, xmm3/m128 | AVX_IFMA
  ops: rw=reg r=vvvv r=rm | Packed128_UInt52
-----
INSTRUCTION: VEX.256.66.0F38.W1 B5 /r | VPMADD52HUQ ymm1, ymm2, ymm3/m256 | AVX_IFMA
  ops: rw=reg r=vvvv r=rm | Packed256_UInt52
-----
INSTRUCTION: VEX.128.66.0F38.W0 E0 !(11):rrr:bbb | CMPOXADD m32, r32, r32 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt32
  rflags: w=oszacp
  flags: wig32 64 cc=cmp;o;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W1 E0 !(11):rrr:bbb | CMPOXADD m64, r64, r64 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt64
  rflags: w=oszacp
  flags: 64 cc=cmp;o;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W0 E1 !(11):rrr:bbb | CMPNOXADD m32, r32, r32 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt32
  rflags: w=oszacp
  flags: wig32 64 cc=cmp;no;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W1 E1 !(11):rrr:bbb | CMPNOXADD m64, r64, r64 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt64
  rflags: w=oszacp
  flags: 64 cc=cmp;no;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W0 E2 !(11):rrr:bbb | CMPBXADD m32, r32, r32 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt32
  rflags: w=oszacp
  flags: wig32 64 cc=cmp;b;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W1 E2 !(11):rrr:bbb | CMPBXADD m64, r64, r64 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt64
  rflags: w=oszacp
  flags: 64 cc=cmp;b;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W0 E3 !(11):rrr:bbb | CMPNBXADD m32, r32, r32 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt32
  rflags: w=oszacp
  flags: wig32 64 cc=cmp;ae;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W1 E3 !(11):rrr:bbb | CMPNBXADD m64, r64, r64 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt64
  rflags: w=oszacp
  flags: 64 cc=cmp;ae;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W0 E4 !(11):rrr:bbb | CMPZXADD m32, r32, r32 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt32
  rflags: w=oszacp
  flags: wig32 64 cc=cmp;e;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W1 E4 !(11):rrr:bbb | CMPZXADD m64, r64, r64 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt64
  rflags: w=oszacp
  flags: 64 cc=cmp;e;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W0 E5 !(11):rrr:bbb | CMPNZXADD m32, r32, r32 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt32
  rflags: w=oszacp
  flags: wig32 64 cc=cmp;ne;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W1 E5 !(11):rrr:bbb | CMPNZXADD m64, r64, r64 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt64
  rflags: w=oszacp
  flags: 64 cc=cmp;ne;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W0 E6 !(11):rrr:bbb | CMPBEXADD m32, r32, r32 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt32
  rflags: w=oszacp
  flags: wig32 64 cc=cmp;be;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W1 E6 !(11):rrr:bbb | CMPBEXADD m64, r64, r64 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt64
  rflags: w=oszacp
  flags: 64 cc=cmp;be;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W0 E7 !(11):rrr:bbb | CMPNBEXADD m32, r32, r32 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt32
  rflags: w=oszacp
  flags: wig32 64 cc=cmp;a;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W1 E7 !(11):rrr:bbb | CMPNBEXADD m64, r64, r64 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt64
  rflags: w=oszacp
  flags: 64 cc=cmp;a;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W0 E8 !(11):rrr:bbb | CMPSXADD m32, r32, r32 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt32
  rflags: w=oszacp
  flags: wig32 64 cc=cmp;s;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W1 E8 !(11):rrr:bbb | CMPSXADD m64, r64, r64 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt64
  rflags: w=oszacp
  flags: 64 cc=cmp;s;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W0 E9 !(11):rrr:bbb | CMPNSXADD m32, r32, r32 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt32
  rflags: w=oszacp
  flags: wig32 64 cc=cmp;ns;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W1 E9 !(11):rrr:bbb | CMPNSXADD m64, r64, r64 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt64
  rflags: w=oszacp
  flags: 64 cc=cmp;ns;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W0 EA !(11):rrr:bbb | CMPPXADD m32, r32, r32 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt32
  rflags: w=oszacp
  flags: wig32 64 cc=cmp;p;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W1 EA !(11):rrr:bbb | CMPPXADD m64, r64, r64 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt64
  rflags: w=oszacp
  flags: 64 cc=cmp;p;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W0 EB !(11):rrr:bbb | CMPNPXADD m32, r32, r32 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt32
  rflags: w=oszacp
  flags: wig32 64 cc=cmp;np;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W1 EB !(11):rrr:bbb | CMPNPXADD m64, r64, r64 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt64
  rflags: w=oszacp
  flags: 64 cc=cmp;np;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W0 EC !(11):rrr:bbb | CMPLXADD m32, r32, r32 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt32
  rflags: w=oszacp
  flags: wig32 64 cc=cmp;l;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W1 EC !(11):rrr:bbb | CMPLXADD m64, r64, r64 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt64
  rflags: w=oszacp
  flags: 64 cc=cmp;l;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W0 ED !(11):rrr:bbb | CMPNLXADD m32, r32, r32 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt32
  rflags: w=oszacp
  flags: wig32 64 cc=cmp;ge;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W1 ED !(11):rrr:bbb | CMPNLXADD m64, r64, r64 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt64
  rflags: w=oszacp
  flags: 64 cc=cmp;ge;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W0 EE !(11):rrr:bbb | CMPLEXADD m32, r32, r32 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt32
  rflags: w=oszacp
  flags: wig32 64 cc=cmp;le;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W1 EE !(11):rrr:bbb | CMPLEXADD m64, r64, r64 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt64
  rflags: w=oszacp
  flags: 64 cc=cmp;le;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W0 EF !(11):rrr:bbb | CMPNLEXADD m32, r32, r32 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt32
  rflags: w=oszacp
  flags: wig32 64 cc=cmp;g;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.66.0F38.W1 EF !(11):rrr:bbb | CMPNLEXADD m64, r64, r64 | CMPCCXADD
  ops: rw=rm rw=reg r=vvvv | UInt64
  rflags: w=oszacp
  flags: 64 cc=cmp;g;xadd atomic aligned-mem
  gas: cc
  intel: cc
  masm: cc
  nasm: cc
-----
INSTRUCTION: VEX.128.0F38.W0 6C 11:rrr:bbb | TCMMRLFP16PS tmm1, tmm2, tmm3 | AMX_COMPLEX
  ops: rw=reg r=rm r=vvvv
  flags: 64 unique-reg-num tsx-abort
-----
INSTRUCTION: VEX.128.66.0F38.W0 6C 11:rrr:bbb | TCMMIMFP16PS tmm1, tmm2, tmm3 | AMX_COMPLEX
  ops: rw=reg r=rm r=vvvv
  flags: 64 unique-reg-num tsx-abort
-----
INSTRUCTION: NP 0F 01 C7 | PBNDKB | TSE
  implied: r=rcx;rbx w=eax r=[ds:rbx=Unknown] w=[ds:rcx=Unknown]
  rflags: w=z 0=osacp
  flags: 64 cpl0
-----
INSTRUCTION: VEX.256.F2.0F38.W0 CB 11:rrr:bbb | VSHA512RNDS2 ymm1, ymm2, xmm3 | AVX SHA512
  ops: rw=reg r=vvvv r=rm
-----
INSTRUCTION: VEX.256.F2.0F38.W0 CC 11:rrr:bbb | VSHA512MSG1 ymm1, xmm2 | AVX SHA512
  ops: rw=reg r=rm
-----
INSTRUCTION: VEX.256.F2.0F38.W0 CD 11:rrr:bbb | VSHA512MSG2 ymm1, ymm2 | AVX SHA512
  ops: rw=reg r=rm
-----
INSTRUCTION: VEX.128.0F38.W0 D2 /r | VPDPWUUD xmm1, xmm2, xmm3/m128 | AVX_VNNI_INT16
  ops: rw=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.0F38.W0 D2 /r | VPDPWUUD ymm1, ymm2, ymm3/m256 | AVX_VNNI_INT16
  ops: rw=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: VEX.128.66.0F38.W0 D2 /r | VPDPWUSD xmm1, xmm2, xmm3/m128 | AVX_VNNI_INT16
  ops: rw=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.66.0F38.W0 D2 /r | VPDPWUSD ymm1, ymm2, ymm3/m256 | AVX_VNNI_INT16
  ops: rw=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: VEX.128.F3.0F38.W0 D2 /r | VPDPWSUD xmm1, xmm2, xmm3/m128 | AVX_VNNI_INT16
  ops: rw=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.F3.0F38.W0 D2 /r | VPDPWSUD ymm1, ymm2, ymm3/m256 | AVX_VNNI_INT16
  ops: rw=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: VEX.128.0F38.W0 D3 /r | VPDPWUUDS xmm1, xmm2, xmm3/m128 | AVX_VNNI_INT16
  ops: rw=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.0F38.W0 D3 /r | VPDPWUUDS ymm1, ymm2, ymm3/m256 | AVX_VNNI_INT16
  ops: rw=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: VEX.128.66.0F38.W0 D3 /r | VPDPWUSDS xmm1, xmm2, xmm3/m128 | AVX_VNNI_INT16
  ops: rw=reg r=vvvv r=rm | Packed128_UInt16
-----
INSTRUCTION: VEX.256.66.0F38.W0 D3 /r | VPDPWUSDS ymm1, ymm2, ymm3/m256 | AVX_VNNI_INT16
  ops: rw=reg r=vvvv r=rm | Packed256_UInt16
-----
INSTRUCTION: VEX.128.F3.0F38.W0 D3 /r | VPDPWSUDS xmm1, xmm2, xmm3/m128 | AVX_VNNI_INT16
  ops: rw=reg r=vvvv r=rm | Packed128_Int16
-----
INSTRUCTION: VEX.256.F3.0F38.W0 D3 /r | VPDPWSUDS ymm1, ymm2, ymm3/m256 | AVX_VNNI_INT16
  ops: rw=reg r=vvvv r=rm | Packed256_Int16
-----
INSTRUCTION: VEX.128.0F38.W0 DA /r | VSM3MSG1 xmm1, xmm2, xmm3/m128 | AVX SM3
  ops: rw=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.128.66.0F38.W0 DA /r | VSM3MSG2 xmm1, xmm2, xmm3/m128 | AVX SM3
  ops: rw=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.128.F3.0F38.W0 DA /r | VSM4KEY4 xmm1, xmm2, xmm3/m128 | AVX SM4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.F3.0F38.W0 DA /r | VSM4KEY4 ymm1, ymm2, ymm3/m256 | AVX SM4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
-----
INSTRUCTION: VEX.128.F2.0F38.W0 DA /r | VSM4RNDS4 xmm1, xmm2, xmm3/m128 | AVX SM4
  ops: w=reg r=vvvv r=rm | Packed128_UInt32
-----
INSTRUCTION: VEX.256.F2.0F38.W0 DA /r | VSM4RNDS4 ymm1, ymm2, ymm3/m256 | AVX SM4
  ops: w=reg r=vvvv r=rm | Packed256_UInt32
-----
INSTRUCTION: VEX.128.66.0F3A.W0 DE /r ib | VSM3RNDS2 xmm1, xmm2, xmm3/m128, imm8 | AVX SM3
  ops: rw=reg r=vvvv r=rm r=imm | Packed128_UInt32
-----
