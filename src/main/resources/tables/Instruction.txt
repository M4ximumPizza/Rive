Invalid:
INSTRUCTION: <invalid> | <invalid> | INTEL8086
    mnemoic: <invalid>

DeclareByte:
INSTRUCTION: <db> | <db> | INTEL8086
    mnemoic: <db>
    code-mnemonic: DeclareByte
    flags: no-instr cflow=ex asm-ig

DeclareWord:
INSTRUCTION: <dw> | <dw> | INTEL8086
    mnemoic: <dw>
    code-mnemonic: DeclareWord
    flags: no-instr cflow=ex asm-ig

DeclareDWord:
INSTRUCTION: <dd> | <dd> | INTEL8086
    mnemoic: <dd>
    code-mnemonic: DeclareDword
    flags: no-instr cflow=ex asm-ig

DeclareQWord:
INSTRUCTION: <dq> | <dq> | INTEL8086
    mnemoic: <dq>
    code-mnemonic: DeclareQword
    flags: no-instr cflow=ex asm-ig

Add_rm8_r8:
INSTRUCTION: 00 /r | ADD r/m8, r8 | INTEL8086
  ops: rw=rm r=reg | UInt8
  rflags: w=oszacp
  flags: lock xacquire xrelease

Add_rm16_r16:
INSTRUCTION: o16 01 /r | ADD r/m16, r16 | INTEL8086
  ops: rw=rm r=reg | UInt16
  rflags: w=oszacp
  flags: lock xacquire xrelease

Add_rm32_r32:
INSTRUCTION: o32 01 /r | ADD r/m32, r32 | INTEL386
  ops: rw=rm r=reg | UInt32
  rflags: w=oszacp
  flags: lock xacquire xrelease

Add_rm64_r64:
INSTRUCTION: o64 01 /r | ADD r/m64, r64 | INTELAMD64
  ops: rw=rm r=reg | UInt64
  rflags: w=oszacp
  flags: lock xacquire xrelease

Add_r8_rm8:
INSTRUCTION: 02 /r | ADD r8, r/m8 | INTEL8086
  ops: rw=reg r=rm | UInt8
  rflags: w=oszacp
  flags: lock xacquire xrelease

Add_r16_rm16:
INSTRUCTION: o16 03 /r | ADD r16, r/m16 | INTEL8086
  ops: rw=reg r=rm | UInt16
  rflags: w=oszacp
  flags: lock xacquire xrelease

Add_r32_rm32:
INSTRUCTION: o32 03 /r | ADD r32, r/m32 | INTEL386
  ops: rw=reg r=rm | UInt32
  rflags: w=oszacp
  flags: lock xacquire xrelease

Add_r64_rm64:
INSTRUCTION: o64 03 /r | ADD r64, r/m64 | INTELAMD64
  ops: rw=reg r=rm | UInt64
  rflags: w=oszacp
  flags: lock xacquire xrelease

Add_Al_imm8:
INSTRUCTION: 04 ib | ADD AL, imm8 | INTEL8086
	ops: rw=r:al r=imm
	rflags: w=oszacp

Add_AX_imm16:
INSTRUCTION: o16 05 iw | ADD AX, imm16 | INTEL8086
    ops: rw=r:ax r=imm
    rflags: w=oszacp

Add_EAX_imm32:
INSTRUCTION: o32 05 id | ADD EAX, imm32 | INTEL386
    ops: rw=r:eax r=imm
    rflags: w=oszacp

Add_RAX_imm32:
INSTRUCTION: o64 05 id | ADD RAX, imm32 | X64
	ops: rw=r:rax r=imm;64
	rflags: w=oszacp
	flags: 64